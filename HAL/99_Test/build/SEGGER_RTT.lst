ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"SEGGER_RTT.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._GetAvailWriteSpace,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  23              	_GetAvailWriteSpace:
  24              	.LVL0:
  25              	.LFB4:
  26              		.file 1 "RTT/SEGGER_RTT.c"
   1:RTT/SEGGER_RTT.c **** /*********************************************************************
   2:RTT/SEGGER_RTT.c **** *                    SEGGER Microcontroller GmbH                     *
   3:RTT/SEGGER_RTT.c **** *                        The Embedded Experts                        *
   4:RTT/SEGGER_RTT.c **** **********************************************************************
   5:RTT/SEGGER_RTT.c **** *                                                                    *
   6:RTT/SEGGER_RTT.c **** *            (c) 1995 - 2021 SEGGER Microcontroller GmbH             *
   7:RTT/SEGGER_RTT.c **** *                                                                    *
   8:RTT/SEGGER_RTT.c **** *       www.segger.com     Support: support@segger.com               *
   9:RTT/SEGGER_RTT.c **** *                                                                    *
  10:RTT/SEGGER_RTT.c **** **********************************************************************
  11:RTT/SEGGER_RTT.c **** *                                                                    *
  12:RTT/SEGGER_RTT.c **** *       SEGGER RTT * Real Time Transfer for embedded targets         *
  13:RTT/SEGGER_RTT.c **** *                                                                    *
  14:RTT/SEGGER_RTT.c **** **********************************************************************
  15:RTT/SEGGER_RTT.c **** *                                                                    *
  16:RTT/SEGGER_RTT.c **** * All rights reserved.                                               *
  17:RTT/SEGGER_RTT.c **** *                                                                    *
  18:RTT/SEGGER_RTT.c **** * SEGGER strongly recommends to not make any changes                 *
  19:RTT/SEGGER_RTT.c **** * to or modify the source code of this software in order to stay     *
  20:RTT/SEGGER_RTT.c **** * compatible with the RTT protocol and J-Link.                       *
  21:RTT/SEGGER_RTT.c **** *                                                                    *
  22:RTT/SEGGER_RTT.c **** * Redistribution and use in source and binary forms, with or         *
  23:RTT/SEGGER_RTT.c **** * without modification, are permitted provided that the following    *
  24:RTT/SEGGER_RTT.c **** * condition is met:                                                  *
  25:RTT/SEGGER_RTT.c **** *                                                                    *
  26:RTT/SEGGER_RTT.c **** * o Redistributions of source code must retain the above copyright   *
  27:RTT/SEGGER_RTT.c **** *   notice, this condition and the following disclaimer.             *
  28:RTT/SEGGER_RTT.c **** *                                                                    *
  29:RTT/SEGGER_RTT.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND             *
  30:RTT/SEGGER_RTT.c **** * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,        *
  31:RTT/SEGGER_RTT.c **** * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF           *
  32:RTT/SEGGER_RTT.c **** * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           *
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 2


  33:RTT/SEGGER_RTT.c **** * DISCLAIMED. IN NO EVENT SHALL SEGGER Microcontroller BE LIABLE FOR *
  34:RTT/SEGGER_RTT.c **** * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           *
  35:RTT/SEGGER_RTT.c **** * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  *
  36:RTT/SEGGER_RTT.c **** * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;    *
  37:RTT/SEGGER_RTT.c **** * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF      *
  38:RTT/SEGGER_RTT.c **** * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT          *
  39:RTT/SEGGER_RTT.c **** * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE  *
  40:RTT/SEGGER_RTT.c **** * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   *
  41:RTT/SEGGER_RTT.c **** * DAMAGE.                                                            *
  42:RTT/SEGGER_RTT.c **** *                                                                    *
  43:RTT/SEGGER_RTT.c **** **********************************************************************
  44:RTT/SEGGER_RTT.c **** *                                                                    *
  45:RTT/SEGGER_RTT.c **** *       RTT version: 7.60h                                           *
  46:RTT/SEGGER_RTT.c **** *                                                                    *
  47:RTT/SEGGER_RTT.c **** **********************************************************************
  48:RTT/SEGGER_RTT.c **** 
  49:RTT/SEGGER_RTT.c **** ---------------------------END-OF-HEADER------------------------------
  50:RTT/SEGGER_RTT.c **** File    : SEGGER_RTT.c
  51:RTT/SEGGER_RTT.c **** Purpose : Implementation of SEGGER real-time transfer (RTT) which
  52:RTT/SEGGER_RTT.c ****           allows real-time communication on targets which support
  53:RTT/SEGGER_RTT.c ****           debugger memory accesses while the CPU is running.
  54:RTT/SEGGER_RTT.c **** Revision: $Rev: 24715 $
  55:RTT/SEGGER_RTT.c **** 
  56:RTT/SEGGER_RTT.c **** Additional information:
  57:RTT/SEGGER_RTT.c ****           Type "int" is assumed to be 32-bits in size
  58:RTT/SEGGER_RTT.c ****           H->T    Host to target communication
  59:RTT/SEGGER_RTT.c ****           T->H    Target to host communication
  60:RTT/SEGGER_RTT.c **** 
  61:RTT/SEGGER_RTT.c ****           RTT channel 0 is always present and reserved for Terminal usage.
  62:RTT/SEGGER_RTT.c ****           Name is fixed to "Terminal"
  63:RTT/SEGGER_RTT.c **** 
  64:RTT/SEGGER_RTT.c ****           Effective buffer size: SizeOfBuffer - 1
  65:RTT/SEGGER_RTT.c **** 
  66:RTT/SEGGER_RTT.c ****           WrOff == RdOff:       Buffer is empty
  67:RTT/SEGGER_RTT.c ****           WrOff == (RdOff - 1): Buffer is full
  68:RTT/SEGGER_RTT.c ****           WrOff >  RdOff:       Free space includes wrap-around
  69:RTT/SEGGER_RTT.c ****           WrOff <  RdOff:       Used space includes wrap-around
  70:RTT/SEGGER_RTT.c ****           (WrOff == (SizeOfBuffer - 1)) && (RdOff == 0):  
  71:RTT/SEGGER_RTT.c ****                                 Buffer full and wrap-around after next byte
  72:RTT/SEGGER_RTT.c **** 
  73:RTT/SEGGER_RTT.c **** 
  74:RTT/SEGGER_RTT.c **** ----------------------------------------------------------------------
  75:RTT/SEGGER_RTT.c **** */
  76:RTT/SEGGER_RTT.c **** 
  77:RTT/SEGGER_RTT.c **** #include "SEGGER_RTT.h"
  78:RTT/SEGGER_RTT.c **** 
  79:RTT/SEGGER_RTT.c **** #include <string.h>                 // for memcpy
  80:RTT/SEGGER_RTT.c **** 
  81:RTT/SEGGER_RTT.c **** /*********************************************************************
  82:RTT/SEGGER_RTT.c **** *
  83:RTT/SEGGER_RTT.c **** *       Configuration, default values
  84:RTT/SEGGER_RTT.c **** *
  85:RTT/SEGGER_RTT.c **** **********************************************************************
  86:RTT/SEGGER_RTT.c **** */
  87:RTT/SEGGER_RTT.c **** 
  88:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_CPU_CACHE_LINE_SIZE
  89:RTT/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_CB_ALIGN
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 3


  90:RTT/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_CB_ALIGN() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE != 0"
  91:RTT/SEGGER_RTT.c ****   #endif
  92:RTT/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_BUFFER_ALIGN
  93:RTT/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_BUFFER_ALIGN() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE !=
  94:RTT/SEGGER_RTT.c ****   #endif
  95:RTT/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_PUT_CB_SECTION
  96:RTT/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_PUT_CB_SECTION() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE 
  97:RTT/SEGGER_RTT.c ****   #endif
  98:RTT/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_PUT_BUFFER_SECTION
  99:RTT/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_PUT_BUFFER_SECTION() is not supported for SEGGER_RTT_CPU_CACHE_LINE_S
 100:RTT/SEGGER_RTT.c ****   #endif
 101:RTT/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_BUFFER_ALIGNMENT
 102:RTT/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_BUFFER_ALIGNMENT is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE 
 103:RTT/SEGGER_RTT.c ****   #endif
 104:RTT/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_ALIGNMENT
 105:RTT/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_ALIGNMENT is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE != 0"
 106:RTT/SEGGER_RTT.c ****   #endif
 107:RTT/SEGGER_RTT.c **** #endif
 108:RTT/SEGGER_RTT.c **** 
 109:RTT/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_UP
 110:RTT/SEGGER_RTT.c ****   #define BUFFER_SIZE_UP                                  1024  // Size of the buffer for terminal 
 111:RTT/SEGGER_RTT.c **** #endif
 112:RTT/SEGGER_RTT.c **** 
 113:RTT/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_DOWN
 114:RTT/SEGGER_RTT.c ****   #define BUFFER_SIZE_DOWN                                16    // Size of the buffer for terminal 
 115:RTT/SEGGER_RTT.c **** #endif
 116:RTT/SEGGER_RTT.c **** 
 117:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_UP_BUFFERS
 118:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_UP_BUFFERS                    2    // Number of up-buffers (T->H) avai
 119:RTT/SEGGER_RTT.c **** #endif
 120:RTT/SEGGER_RTT.c **** 
 121:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_DOWN_BUFFERS
 122:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_DOWN_BUFFERS                  2    // Number of down-buffers (H->T) av
 123:RTT/SEGGER_RTT.c **** #endif
 124:RTT/SEGGER_RTT.c **** 
 125:RTT/SEGGER_RTT.c **** #ifndef SEGGER_RTT_BUFFER_SECTION
 126:RTT/SEGGER_RTT.c ****   #if defined(SEGGER_RTT_SECTION)
 127:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_BUFFER_SECTION SEGGER_RTT_SECTION
 128:RTT/SEGGER_RTT.c ****   #endif
 129:RTT/SEGGER_RTT.c **** #endif
 130:RTT/SEGGER_RTT.c **** 
 131:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_ALIGNMENT
 132:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGNMENT                            SEGGER_RTT_CPU_CACHE_LINE_SIZE
 133:RTT/SEGGER_RTT.c **** #endif
 134:RTT/SEGGER_RTT.c **** 
 135:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_BUFFER_ALIGNMENT
 136:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGNMENT                     SEGGER_RTT_CPU_CACHE_LINE_SIZE
 137:RTT/SEGGER_RTT.c **** #endif
 138:RTT/SEGGER_RTT.c **** 
 139:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MODE_DEFAULT
 140:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MODE_DEFAULT                         SEGGER_RTT_MODE_NO_BLOCK_SKIP
 141:RTT/SEGGER_RTT.c **** #endif
 142:RTT/SEGGER_RTT.c **** 
 143:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_LOCK
 144:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_LOCK()
 145:RTT/SEGGER_RTT.c **** #endif
 146:RTT/SEGGER_RTT.c **** 
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 4


 147:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_UNLOCK
 148:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_UNLOCK()
 149:RTT/SEGGER_RTT.c **** #endif
 150:RTT/SEGGER_RTT.c **** 
 151:RTT/SEGGER_RTT.c **** #ifndef   STRLEN
 152:RTT/SEGGER_RTT.c ****   #define STRLEN(a)                                       strlen((a))
 153:RTT/SEGGER_RTT.c **** #endif
 154:RTT/SEGGER_RTT.c **** 
 155:RTT/SEGGER_RTT.c **** #ifndef   STRCPY
 156:RTT/SEGGER_RTT.c ****   #define STRCPY(pDest, pSrc)                             strcpy((pDest), (pSrc))
 157:RTT/SEGGER_RTT.c **** #endif
 158:RTT/SEGGER_RTT.c **** 
 159:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY_USE_BYTELOOP
 160:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MEMCPY_USE_BYTELOOP                  0
 161:RTT/SEGGER_RTT.c **** #endif
 162:RTT/SEGGER_RTT.c **** 
 163:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY
 164:RTT/SEGGER_RTT.c ****   #ifdef  MEMCPY
 165:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      MEMCPY((pDest), (pSrc), (NumBytes))
 166:RTT/SEGGER_RTT.c ****   #else
 167:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      memcpy((pDest), (pSrc), (NumBytes))
 168:RTT/SEGGER_RTT.c ****   #endif
 169:RTT/SEGGER_RTT.c **** #endif
 170:RTT/SEGGER_RTT.c **** 
 171:RTT/SEGGER_RTT.c **** #ifndef   MIN
 172:RTT/SEGGER_RTT.c ****   #define MIN(a, b)         (((a) < (b)) ? (a) : (b))
 173:RTT/SEGGER_RTT.c **** #endif
 174:RTT/SEGGER_RTT.c **** 
 175:RTT/SEGGER_RTT.c **** #ifndef   MAX
 176:RTT/SEGGER_RTT.c ****   #define MAX(a, b)         (((a) > (b)) ? (a) : (b))
 177:RTT/SEGGER_RTT.c **** #endif
 178:RTT/SEGGER_RTT.c **** //
 179:RTT/SEGGER_RTT.c **** // For some environments, NULL may not be defined until certain headers are included
 180:RTT/SEGGER_RTT.c **** //
 181:RTT/SEGGER_RTT.c **** #ifndef NULL
 182:RTT/SEGGER_RTT.c ****   #define NULL 0
 183:RTT/SEGGER_RTT.c **** #endif
 184:RTT/SEGGER_RTT.c **** 
 185:RTT/SEGGER_RTT.c **** /*********************************************************************
 186:RTT/SEGGER_RTT.c **** *
 187:RTT/SEGGER_RTT.c **** *       Defines, fixed
 188:RTT/SEGGER_RTT.c **** *
 189:RTT/SEGGER_RTT.c **** **********************************************************************
 190:RTT/SEGGER_RTT.c **** */
 191:RTT/SEGGER_RTT.c **** #if (defined __ICCARM__) || (defined __ICCRX__)
 192:RTT/SEGGER_RTT.c ****   #define RTT_PRAGMA(P) _Pragma(#P)
 193:RTT/SEGGER_RTT.c **** #endif
 194:RTT/SEGGER_RTT.c **** 
 195:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT || SEGGER_RTT_BUFFER_ALIGNMENT
 196:RTT/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 197:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 198:RTT/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 199:RTT/SEGGER_RTT.c ****     #define PRAGMA(A) _Pragma(#A)
 200:RTT/SEGGER_RTT.c **** #define SEGGER_RTT_ALIGN(Var, Alignment) RTT_PRAGMA(data_alignment=Alignment) \
 201:RTT/SEGGER_RTT.c ****                                   Var
 202:RTT/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 203:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 5


 204:RTT/SEGGER_RTT.c ****   #else
 205:RTT/SEGGER_RTT.c ****     #error "Alignment not supported for this compiler."
 206:RTT/SEGGER_RTT.c ****   #endif
 207:RTT/SEGGER_RTT.c **** #else
 208:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGN(Var, Alignment) Var
 209:RTT/SEGGER_RTT.c **** #endif
 210:RTT/SEGGER_RTT.c **** 
 211:RTT/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION) || defined (SEGGER_RTT_BUFFER_SECTION)
 212:RTT/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 213:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section))) Var
 214:RTT/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 215:RTT/SEGGER_RTT.c **** #define SEGGER_RTT_PUT_SECTION(Var, Section) RTT_PRAGMA(location=Section) \
 216:RTT/SEGGER_RTT.c ****                                         Var
 217:RTT/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 218:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section), zero_init))  Va
 219:RTT/SEGGER_RTT.c ****   #else
 220:RTT/SEGGER_RTT.c ****     #error "Section placement not supported for this compiler."
 221:RTT/SEGGER_RTT.c ****   #endif
 222:RTT/SEGGER_RTT.c **** #else
 223:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_SECTION(Var, Section) Var
 224:RTT/SEGGER_RTT.c **** #endif
 225:RTT/SEGGER_RTT.c **** 
 226:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT
 227:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_ALIGNMENT)
 228:RTT/SEGGER_RTT.c **** #else
 229:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  Var
 230:RTT/SEGGER_RTT.c **** #endif
 231:RTT/SEGGER_RTT.c **** 
 232:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_BUFFER_ALIGNMENT
 233:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_BUFFER_ALIGNMENT)
 234:RTT/SEGGER_RTT.c **** #else
 235:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  Var
 236:RTT/SEGGER_RTT.c **** #endif
 237:RTT/SEGGER_RTT.c **** 
 238:RTT/SEGGER_RTT.c **** 
 239:RTT/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION)
 240:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_SECTION)
 241:RTT/SEGGER_RTT.c **** #else
 242:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) Var
 243:RTT/SEGGER_RTT.c **** #endif
 244:RTT/SEGGER_RTT.c **** 
 245:RTT/SEGGER_RTT.c **** #if defined(SEGGER_RTT_BUFFER_SECTION)
 246:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_BUFFER_SECTION)
 247:RTT/SEGGER_RTT.c **** #else
 248:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) Var
 249:RTT/SEGGER_RTT.c **** #endif
 250:RTT/SEGGER_RTT.c **** 
 251:RTT/SEGGER_RTT.c **** /*********************************************************************
 252:RTT/SEGGER_RTT.c **** *
 253:RTT/SEGGER_RTT.c **** *       Static const data
 254:RTT/SEGGER_RTT.c **** *
 255:RTT/SEGGER_RTT.c **** **********************************************************************
 256:RTT/SEGGER_RTT.c **** */
 257:RTT/SEGGER_RTT.c **** 
 258:RTT/SEGGER_RTT.c **** static unsigned char _aTerminalId[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B
 259:RTT/SEGGER_RTT.c **** 
 260:RTT/SEGGER_RTT.c **** /*********************************************************************
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 6


 261:RTT/SEGGER_RTT.c **** *
 262:RTT/SEGGER_RTT.c **** *       Static data
 263:RTT/SEGGER_RTT.c **** *
 264:RTT/SEGGER_RTT.c **** **********************************************************************
 265:RTT/SEGGER_RTT.c **** */
 266:RTT/SEGGER_RTT.c **** 
 267:RTT/SEGGER_RTT.c **** //
 268:RTT/SEGGER_RTT.c **** // RTT Control Block and allocate buffers for channel 0
 269:RTT/SEGGER_RTT.c **** //
 270:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_CPU_CACHE_LINE_SIZE
 271:RTT/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 272:RTT/SEGGER_RTT.c ****     SEGGER_RTT_CB _SEGGER_RTT                                                             __attribu
 273:RTT/SEGGER_RTT.c ****     static char   _acUpBuffer  [SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_UP)]   __attribu
 274:RTT/SEGGER_RTT.c ****     static char   _acDownBuffer[SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_DOWN)] __attribu
 275:RTT/SEGGER_RTT.c ****   #else
 276:RTT/SEGGER_RTT.c ****     #error "Don't know how to place _SEGGER_RTT, _acUpBuffer, _acDownBuffer cache-line aligned"
 277:RTT/SEGGER_RTT.c ****   #endif
 278:RTT/SEGGER_RTT.c **** #else
 279:RTT/SEGGER_RTT.c ****   SEGGER_RTT_PUT_CB_SECTION(SEGGER_RTT_CB_ALIGN(SEGGER_RTT_CB _SEGGER_RTT));
 280:RTT/SEGGER_RTT.c ****   SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acUpBuffer  [BUFFER_SIZE_UP]))
 281:RTT/SEGGER_RTT.c ****   SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acDownBuffer[BUFFER_SIZE_DOWN]
 282:RTT/SEGGER_RTT.c **** #endif
 283:RTT/SEGGER_RTT.c **** 
 284:RTT/SEGGER_RTT.c **** static unsigned char _ActiveTerminal;
 285:RTT/SEGGER_RTT.c **** 
 286:RTT/SEGGER_RTT.c **** /*********************************************************************
 287:RTT/SEGGER_RTT.c **** *
 288:RTT/SEGGER_RTT.c **** *       Static functions
 289:RTT/SEGGER_RTT.c **** *
 290:RTT/SEGGER_RTT.c **** **********************************************************************
 291:RTT/SEGGER_RTT.c **** */
 292:RTT/SEGGER_RTT.c **** 
 293:RTT/SEGGER_RTT.c **** /*********************************************************************
 294:RTT/SEGGER_RTT.c **** *
 295:RTT/SEGGER_RTT.c **** *       _DoInit()
 296:RTT/SEGGER_RTT.c **** *
 297:RTT/SEGGER_RTT.c **** *  Function description
 298:RTT/SEGGER_RTT.c **** *    Initializes the control block an buffers.
 299:RTT/SEGGER_RTT.c **** *    May only be called via INIT() to avoid overriding settings.
 300:RTT/SEGGER_RTT.c **** *
 301:RTT/SEGGER_RTT.c **** */
 302:RTT/SEGGER_RTT.c **** #define INIT()  {                                                                                  
 303:RTT/SEGGER_RTT.c ****                   volatile SEGGER_RTT_CB* pRTTCBInit;                                              
 304:RTT/SEGGER_RTT.c ****                   pRTTCBInit = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_
 305:RTT/SEGGER_RTT.c ****                   do {                                                                             
 306:RTT/SEGGER_RTT.c ****                     if (pRTTCBInit->acID[0] == '\0') {                                             
 307:RTT/SEGGER_RTT.c ****                       _DoInit();                                                                   
 308:RTT/SEGGER_RTT.c ****                     }                                                                              
 309:RTT/SEGGER_RTT.c ****                   } while (0);                                                                     
 310:RTT/SEGGER_RTT.c ****                 }
 311:RTT/SEGGER_RTT.c **** 
 312:RTT/SEGGER_RTT.c **** static void _DoInit(void) {
 313:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of ac
 314:RTT/SEGGER_RTT.c ****   static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sur
 315:RTT/SEGGER_RTT.c ****   unsigned i;
 316:RTT/SEGGER_RTT.c ****   //
 317:RTT/SEGGER_RTT.c ****   // Initialize control block
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 7


 318:RTT/SEGGER_RTT.c ****   //
 319:RTT/SEGGER_RTT.c ****   p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);
 320:RTT/SEGGER_RTT.c ****   memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always
 321:RTT/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 322:RTT/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 323:RTT/SEGGER_RTT.c ****   //
 324:RTT/SEGGER_RTT.c ****   // Initialize up buffer 0
 325:RTT/SEGGER_RTT.c ****   //
 326:RTT/SEGGER_RTT.c ****   p->aUp[0].sName         = "Terminal";
 327:RTT/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 328:RTT/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 329:RTT/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 330:RTT/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 331:RTT/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 332:RTT/SEGGER_RTT.c ****   //
 333:RTT/SEGGER_RTT.c ****   // Initialize down buffer 0
 334:RTT/SEGGER_RTT.c ****   //
 335:RTT/SEGGER_RTT.c ****   p->aDown[0].sName         = "Terminal";
 336:RTT/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 337:RTT/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 338:RTT/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 339:RTT/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 340:RTT/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 341:RTT/SEGGER_RTT.c ****   //
 342:RTT/SEGGER_RTT.c ****   // Finish initialization of the control block.
 343:RTT/SEGGER_RTT.c ****   // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (us
 344:RTT/SEGGER_RTT.c ****   // as this would cause J-Link to "find" the control block at a wrong address.
 345:RTT/SEGGER_RTT.c ****   //
 346:RTT/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accesses for cores that may perform ou
 347:RTT/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 348:RTT/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 349:RTT/SEGGER_RTT.c ****   }
 350:RTT/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accesses for cores that may perform ou
 351:RTT/SEGGER_RTT.c **** }
 352:RTT/SEGGER_RTT.c **** 
 353:RTT/SEGGER_RTT.c **** /*********************************************************************
 354:RTT/SEGGER_RTT.c **** *
 355:RTT/SEGGER_RTT.c **** *       _WriteBlocking()
 356:RTT/SEGGER_RTT.c **** *
 357:RTT/SEGGER_RTT.c **** *  Function description
 358:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 359:RTT/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 360:RTT/SEGGER_RTT.c **** *    read by the host.
 361:RTT/SEGGER_RTT.c **** *    The caller is responsible for managing the write chunk sizes as
 362:RTT/SEGGER_RTT.c **** *    _WriteBlocking() will block until all data has been posted successfully.
 363:RTT/SEGGER_RTT.c **** *
 364:RTT/SEGGER_RTT.c **** *  Parameters
 365:RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 366:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 367:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 368:RTT/SEGGER_RTT.c **** *
 369:RTT/SEGGER_RTT.c **** *  Return value
 370:RTT/SEGGER_RTT.c **** *    >= 0 - Number of bytes written into buffer.
 371:RTT/SEGGER_RTT.c **** */
 372:RTT/SEGGER_RTT.c **** static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes)
 373:RTT/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 374:RTT/SEGGER_RTT.c ****   unsigned NumBytesWritten;
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 8


 375:RTT/SEGGER_RTT.c ****   unsigned RdOff;
 376:RTT/SEGGER_RTT.c ****   unsigned WrOff;
 377:RTT/SEGGER_RTT.c ****   volatile char* pDst;
 378:RTT/SEGGER_RTT.c ****   //
 379:RTT/SEGGER_RTT.c ****   // Write data to buffer and handle wrap-around if necessary
 380:RTT/SEGGER_RTT.c ****   //
 381:RTT/SEGGER_RTT.c ****   NumBytesWritten = 0u;
 382:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 383:RTT/SEGGER_RTT.c ****   do {
 384:RTT/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 385:RTT/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 386:RTT/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 387:RTT/SEGGER_RTT.c ****     } else {
 388:RTT/SEGGER_RTT.c ****       NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 389:RTT/SEGGER_RTT.c ****     }
 390:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes 
 391:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 392:RTT/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 393:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 394:RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 395:RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 396:RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 397:RTT/SEGGER_RTT.c ****     while (NumBytesToWrite--) {
 398:RTT/SEGGER_RTT.c ****       *pDst++ = *pBuffer++;
 399:RTT/SEGGER_RTT.c ****     };
 400:RTT/SEGGER_RTT.c **** #else
 401:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 402:RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 403:RTT/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 404:RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 405:RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 406:RTT/SEGGER_RTT.c **** #endif
 407:RTT/SEGGER_RTT.c ****     if (WrOff == pRing->SizeOfBuffer) {
 408:RTT/SEGGER_RTT.c ****       WrOff = 0u;
 409:RTT/SEGGER_RTT.c ****     }
 410:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 411:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 412:RTT/SEGGER_RTT.c ****   } while (NumBytes);
 413:RTT/SEGGER_RTT.c ****   return NumBytesWritten;
 414:RTT/SEGGER_RTT.c **** }
 415:RTT/SEGGER_RTT.c **** 
 416:RTT/SEGGER_RTT.c **** /*********************************************************************
 417:RTT/SEGGER_RTT.c **** *
 418:RTT/SEGGER_RTT.c **** *       _WriteNoCheck()
 419:RTT/SEGGER_RTT.c **** *
 420:RTT/SEGGER_RTT.c **** *  Function description
 421:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 422:RTT/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 423:RTT/SEGGER_RTT.c **** *    read by the host.
 424:RTT/SEGGER_RTT.c **** *    It is callers responsibility to make sure data actually fits in buffer.
 425:RTT/SEGGER_RTT.c **** *
 426:RTT/SEGGER_RTT.c **** *  Parameters
 427:RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 428:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 429:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 430:RTT/SEGGER_RTT.c **** *
 431:RTT/SEGGER_RTT.c **** *  Notes
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 9


 432:RTT/SEGGER_RTT.c **** *    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
 433:RTT/SEGGER_RTT.c **** */
 434:RTT/SEGGER_RTT.c **** static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 435:RTT/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
 436:RTT/SEGGER_RTT.c ****   unsigned WrOff;
 437:RTT/SEGGER_RTT.c ****   unsigned Rem;
 438:RTT/SEGGER_RTT.c ****   volatile char* pDst;
 439:RTT/SEGGER_RTT.c **** 
 440:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 441:RTT/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 442:RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 443:RTT/SEGGER_RTT.c ****     //
 444:RTT/SEGGER_RTT.c ****     // All data fits before wrap around
 445:RTT/SEGGER_RTT.c ****     //
 446:RTT/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 447:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 448:RTT/SEGGER_RTT.c ****     WrOff += NumBytes;
 449:RTT/SEGGER_RTT.c ****     while (NumBytes--) {
 450:RTT/SEGGER_RTT.c ****       *pDst++ = *pData++;
 451:RTT/SEGGER_RTT.c ****     };
 452:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 453:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 454:RTT/SEGGER_RTT.c **** #else
 455:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 456:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 457:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 458:RTT/SEGGER_RTT.c **** #endif
 459:RTT/SEGGER_RTT.c ****   } else {
 460:RTT/SEGGER_RTT.c ****     //
 461:RTT/SEGGER_RTT.c ****     // We reach the end of the buffer, so need to wrap around
 462:RTT/SEGGER_RTT.c ****     //
 463:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 464:RTT/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 465:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 466:RTT/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 467:RTT/SEGGER_RTT.c ****       *pDst++ = *pData++;
 468:RTT/SEGGER_RTT.c ****     };
 469:RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 470:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 471:RTT/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 472:RTT/SEGGER_RTT.c ****       *pDst++ = *pData++;
 473:RTT/SEGGER_RTT.c ****     };
 474:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 475:RTT/SEGGER_RTT.c ****     pRing->WrOff = NumBytes - Rem;
 476:RTT/SEGGER_RTT.c **** #else
 477:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 478:RTT/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 479:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 480:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 481:RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 482:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 483:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 484:RTT/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 485:RTT/SEGGER_RTT.c **** #endif
 486:RTT/SEGGER_RTT.c ****   }
 487:RTT/SEGGER_RTT.c **** }
 488:RTT/SEGGER_RTT.c **** 
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 10


 489:RTT/SEGGER_RTT.c **** /*********************************************************************
 490:RTT/SEGGER_RTT.c **** *
 491:RTT/SEGGER_RTT.c **** *       _PostTerminalSwitch()
 492:RTT/SEGGER_RTT.c **** *
 493:RTT/SEGGER_RTT.c **** *  Function description
 494:RTT/SEGGER_RTT.c **** *    Switch terminal to the given terminal ID.  It is the caller's
 495:RTT/SEGGER_RTT.c **** *    responsibility to ensure the terminal ID is correct and there is
 496:RTT/SEGGER_RTT.c **** *    enough space in the buffer for this to complete successfully.
 497:RTT/SEGGER_RTT.c **** *
 498:RTT/SEGGER_RTT.c **** *  Parameters
 499:RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 500:RTT/SEGGER_RTT.c **** *    TerminalId   Terminal ID to switch to.
 501:RTT/SEGGER_RTT.c **** */
 502:RTT/SEGGER_RTT.c **** static void _PostTerminalSwitch(SEGGER_RTT_BUFFER_UP* pRing, unsigned char TerminalId) {
 503:RTT/SEGGER_RTT.c ****   unsigned char ac[2];
 504:RTT/SEGGER_RTT.c **** 
 505:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 506:RTT/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 507:RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 508:RTT/SEGGER_RTT.c **** }
 509:RTT/SEGGER_RTT.c **** 
 510:RTT/SEGGER_RTT.c **** /*********************************************************************
 511:RTT/SEGGER_RTT.c **** *
 512:RTT/SEGGER_RTT.c **** *       _GetAvailWriteSpace()
 513:RTT/SEGGER_RTT.c **** *
 514:RTT/SEGGER_RTT.c **** *  Function description
 515:RTT/SEGGER_RTT.c **** *    Returns the number of bytes that can be written to the ring
 516:RTT/SEGGER_RTT.c **** *    buffer without blocking.
 517:RTT/SEGGER_RTT.c **** *
 518:RTT/SEGGER_RTT.c **** *  Parameters
 519:RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to check.
 520:RTT/SEGGER_RTT.c **** *
 521:RTT/SEGGER_RTT.c **** *  Return value
 522:RTT/SEGGER_RTT.c **** *    Number of bytes that are free in the buffer.
 523:RTT/SEGGER_RTT.c **** */
 524:RTT/SEGGER_RTT.c **** static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
  27              		.loc 1 524 66 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 525:RTT/SEGGER_RTT.c ****   unsigned RdOff;
  32              		.loc 1 525 3 view .LVU1
 526:RTT/SEGGER_RTT.c ****   unsigned WrOff;
  33              		.loc 1 526 3 view .LVU2
 527:RTT/SEGGER_RTT.c ****   unsigned r;
  34              		.loc 1 527 3 view .LVU3
 528:RTT/SEGGER_RTT.c ****   //
 529:RTT/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
 530:RTT/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
 531:RTT/SEGGER_RTT.c ****   //
 532:RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
  35              		.loc 1 532 3 view .LVU4
  36              		.loc 1 532 9 is_stmt 0 view .LVU5
  37 0000 0369     		ldr	r3, [r0, #16]
  38              	.LVL1:
 533:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 11


  39              		.loc 1 533 3 is_stmt 1 view .LVU6
  40              		.loc 1 533 9 is_stmt 0 view .LVU7
  41 0002 C268     		ldr	r2, [r0, #12]
  42              	.LVL2:
 534:RTT/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
  43              		.loc 1 534 3 is_stmt 1 view .LVU8
  44              		.loc 1 534 6 is_stmt 0 view .LVU9
  45 0004 9342     		cmp	r3, r2
  46 0006 04D8     		bhi	.L2
 535:RTT/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
  47              		.loc 1 535 5 is_stmt 1 view .LVU10
  48              		.loc 1 535 14 is_stmt 0 view .LVU11
  49 0008 8068     		ldr	r0, [r0, #8]
  50              	.LVL3:
  51              		.loc 1 535 34 view .LVU12
  52 000a 801A     		subs	r0, r0, r2
  53              		.loc 1 535 42 view .LVU13
  54 000c 0344     		add	r3, r3, r0
  55              	.LVL4:
  56              		.loc 1 535 7 view .LVU14
  57 000e 581E     		subs	r0, r3, #1
  58              	.LVL5:
  59              		.loc 1 535 7 view .LVU15
  60 0010 7047     		bx	lr
  61              	.LVL6:
  62              	.L2:
 536:RTT/SEGGER_RTT.c ****   } else {
 537:RTT/SEGGER_RTT.c ****     r = RdOff - WrOff - 1u;
  63              		.loc 1 537 5 is_stmt 1 view .LVU16
  64              		.loc 1 537 15 is_stmt 0 view .LVU17
  65 0012 9B1A     		subs	r3, r3, r2
  66              	.LVL7:
  67              		.loc 1 537 7 view .LVU18
  68 0014 581E     		subs	r0, r3, #1
  69              	.LVL8:
 538:RTT/SEGGER_RTT.c ****   }
 539:RTT/SEGGER_RTT.c ****   return r;
  70              		.loc 1 539 3 is_stmt 1 view .LVU19
 540:RTT/SEGGER_RTT.c **** }
  71              		.loc 1 540 1 is_stmt 0 view .LVU20
  72 0016 7047     		bx	lr
  73              		.cfi_endproc
  74              	.LFE4:
  76              		.section	.text._WriteNoCheck,"ax",%progbits
  77              		.align	1
  78              		.syntax unified
  79              		.thumb
  80              		.thumb_func
  82              	_WriteNoCheck:
  83              	.LVL9:
  84              	.LFB2:
 434:RTT/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  85              		.loc 1 434 94 is_stmt 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
 434:RTT/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 12


  89              		.loc 1 434 94 is_stmt 0 view .LVU22
  90 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
  91              	.LCFI0:
  92              		.cfi_def_cfa_offset 32
  93              		.cfi_offset 3, -32
  94              		.cfi_offset 4, -28
  95              		.cfi_offset 5, -24
  96              		.cfi_offset 6, -20
  97              		.cfi_offset 7, -16
  98              		.cfi_offset 8, -12
  99              		.cfi_offset 9, -8
 100              		.cfi_offset 14, -4
 101 0004 0446     		mov	r4, r0
 102 0006 8846     		mov	r8, r1
 103 0008 1646     		mov	r6, r2
 435:RTT/SEGGER_RTT.c ****   unsigned WrOff;
 104              		.loc 1 435 3 is_stmt 1 view .LVU23
 436:RTT/SEGGER_RTT.c ****   unsigned Rem;
 105              		.loc 1 436 3 view .LVU24
 437:RTT/SEGGER_RTT.c ****   volatile char* pDst;
 106              		.loc 1 437 3 view .LVU25
 438:RTT/SEGGER_RTT.c **** 
 107              		.loc 1 438 3 view .LVU26
 440:RTT/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 108              		.loc 1 440 3 view .LVU27
 440:RTT/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 109              		.loc 1 440 9 is_stmt 0 view .LVU28
 110 000a C568     		ldr	r5, [r0, #12]
 111              	.LVL10:
 441:RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 112              		.loc 1 441 3 is_stmt 1 view .LVU29
 441:RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 113              		.loc 1 441 14 is_stmt 0 view .LVU30
 114 000c 8768     		ldr	r7, [r0, #8]
 441:RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 115              		.loc 1 441 7 view .LVU31
 116 000e A7EB0509 		sub	r9, r7, r5
 117              	.LVL11:
 442:RTT/SEGGER_RTT.c ****     //
 118              		.loc 1 442 3 is_stmt 1 view .LVU32
 442:RTT/SEGGER_RTT.c ****     //
 119              		.loc 1 442 6 is_stmt 0 view .LVU33
 120 0012 9145     		cmp	r9, r2
 121 0014 07D9     		bls	.L5
 446:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 122              		.loc 1 446 5 is_stmt 1 view .LVU34
 446:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 123              		.loc 1 446 18 is_stmt 0 view .LVU35
 124 0016 4068     		ldr	r0, [r0, #4]
 125              	.LVL12:
 455:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 126              		.loc 1 455 5 is_stmt 1 view .LVU36
 127 0018 2844     		add	r0, r0, r5
 128              	.LVL13:
 455:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 129              		.loc 1 455 5 is_stmt 0 view .LVU37
 130 001a FFF7FEFF 		bl	memcpy
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 13


 131              	.LVL14:
 456:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 132              		.loc 1 456 15 is_stmt 1 view .LVU38
 457:RTT/SEGGER_RTT.c **** #endif
 133              		.loc 1 457 5 view .LVU39
 457:RTT/SEGGER_RTT.c **** #endif
 134              		.loc 1 457 26 is_stmt 0 view .LVU40
 135 001e 3544     		add	r5, r5, r6
 136              	.LVL15:
 457:RTT/SEGGER_RTT.c **** #endif
 137              		.loc 1 457 18 view .LVU41
 138 0020 E560     		str	r5, [r4, #12]
 139              	.L4:
 487:RTT/SEGGER_RTT.c **** 
 140              		.loc 1 487 1 view .LVU42
 141 0022 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 142              	.LVL16:
 143              	.L5:
 477:RTT/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 144              		.loc 1 477 5 is_stmt 1 view .LVU43
 478:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 145              		.loc 1 478 5 view .LVU44
 478:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 146              		.loc 1 478 18 is_stmt 0 view .LVU45
 147 0026 4068     		ldr	r0, [r0, #4]
 148              	.LVL17:
 479:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 149              		.loc 1 479 5 is_stmt 1 view .LVU46
 150 0028 4A46     		mov	r2, r9
 151              	.LVL18:
 479:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 152              		.loc 1 479 5 is_stmt 0 view .LVU47
 153 002a 2844     		add	r0, r0, r5
 154              	.LVL19:
 479:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 155              		.loc 1 479 5 view .LVU48
 156 002c FFF7FEFF 		bl	memcpy
 157              	.LVL20:
 480:RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 158              		.loc 1 480 5 is_stmt 1 view .LVU49
 480:RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 159              		.loc 1 480 20 is_stmt 0 view .LVU50
 160 0030 ED1B     		subs	r5, r5, r7
 161              	.LVL21:
 480:RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 162              		.loc 1 480 20 view .LVU51
 163 0032 3544     		add	r5, r5, r6
 164              	.LVL22:
 481:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 165              		.loc 1 481 5 is_stmt 1 view .LVU52
 482:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 166              		.loc 1 482 5 view .LVU53
 167 0034 2A46     		mov	r2, r5
 168 0036 08EB0901 		add	r1, r8, r9
 169 003a 6068     		ldr	r0, [r4, #4]
 170 003c FFF7FEFF 		bl	memcpy
 171              	.LVL23:
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 14


 483:RTT/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 172              		.loc 1 483 15 view .LVU54
 484:RTT/SEGGER_RTT.c **** #endif
 173              		.loc 1 484 5 view .LVU55
 484:RTT/SEGGER_RTT.c **** #endif
 174              		.loc 1 484 18 is_stmt 0 view .LVU56
 175 0040 E560     		str	r5, [r4, #12]
 487:RTT/SEGGER_RTT.c **** 
 176              		.loc 1 487 1 view .LVU57
 177 0042 EEE7     		b	.L4
 178              		.cfi_endproc
 179              	.LFE2:
 181              		.section	.text._WriteBlocking,"ax",%progbits
 182              		.align	1
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 187              	_WriteBlocking:
 188              	.LVL24:
 189              	.LFB1:
 372:RTT/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 190              		.loc 1 372 101 is_stmt 1 view -0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 372:RTT/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 194              		.loc 1 372 101 is_stmt 0 view .LVU59
 195 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 196              	.LCFI1:
 197              		.cfi_def_cfa_offset 32
 198              		.cfi_offset 3, -32
 199              		.cfi_offset 4, -28
 200              		.cfi_offset 5, -24
 201              		.cfi_offset 6, -20
 202              		.cfi_offset 7, -16
 203              		.cfi_offset 8, -12
 204              		.cfi_offset 9, -8
 205              		.cfi_offset 14, -4
 206 0004 0646     		mov	r6, r0
 207 0006 8846     		mov	r8, r1
 208 0008 1746     		mov	r7, r2
 373:RTT/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 209              		.loc 1 373 3 is_stmt 1 view .LVU60
 374:RTT/SEGGER_RTT.c ****   unsigned RdOff;
 210              		.loc 1 374 3 view .LVU61
 375:RTT/SEGGER_RTT.c ****   unsigned WrOff;
 211              		.loc 1 375 3 view .LVU62
 376:RTT/SEGGER_RTT.c ****   volatile char* pDst;
 212              		.loc 1 376 3 view .LVU63
 377:RTT/SEGGER_RTT.c ****   //
 213              		.loc 1 377 3 view .LVU64
 381:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 214              		.loc 1 381 3 view .LVU65
 215              	.LVL25:
 382:RTT/SEGGER_RTT.c ****   do {
 216              		.loc 1 382 3 view .LVU66
 382:RTT/SEGGER_RTT.c ****   do {
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 15


 217              		.loc 1 382 9 is_stmt 0 view .LVU67
 218 000a C568     		ldr	r5, [r0, #12]
 219              	.LVL26:
 381:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 220              		.loc 1 381 19 view .LVU68
 221 000c 4FF00009 		mov	r9, #0
 222 0010 18E0     		b	.L12
 223              	.LVL27:
 224              	.L17:
 386:RTT/SEGGER_RTT.c ****     } else {
 225              		.loc 1 386 7 is_stmt 1 view .LVU69
 386:RTT/SEGGER_RTT.c ****     } else {
 226              		.loc 1 386 31 is_stmt 0 view .LVU70
 227 0012 641B     		subs	r4, r4, r5
 228              	.LVL28:
 386:RTT/SEGGER_RTT.c ****     } else {
 229              		.loc 1 386 23 view .LVU71
 230 0014 621E     		subs	r2, r4, #1
 231              	.LVL29:
 232              	.L10:
 390:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 233              		.loc 1 390 5 is_stmt 1 view .LVU72
 390:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 234              		.loc 1 390 23 is_stmt 0 view .LVU73
 235 0016 B368     		ldr	r3, [r6, #8]
 236 0018 5C1B     		subs	r4, r3, r5
 390:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 237              		.loc 1 390 21 view .LVU74
 238 001a 9442     		cmp	r4, r2
 239 001c 28BF     		it	cs
 240 001e 1446     		movcs	r4, r2
 241              	.LVL30:
 391:RTT/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 242              		.loc 1 391 5 is_stmt 1 view .LVU75
 391:RTT/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 243              		.loc 1 391 21 is_stmt 0 view .LVU76
 244 0020 BC42     		cmp	r4, r7
 245 0022 28BF     		it	cs
 246 0024 3C46     		movcs	r4, r7
 247              	.LVL31:
 392:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 248              		.loc 1 392 5 is_stmt 1 view .LVU77
 392:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 249              		.loc 1 392 18 is_stmt 0 view .LVU78
 250 0026 7068     		ldr	r0, [r6, #4]
 251              	.LVL32:
 401:RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 252              		.loc 1 401 5 is_stmt 1 view .LVU79
 253 0028 2246     		mov	r2, r4
 254 002a 4146     		mov	r1, r8
 255 002c 2844     		add	r0, r0, r5
 256              	.LVL33:
 401:RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 257              		.loc 1 401 5 is_stmt 0 view .LVU80
 258 002e FFF7FEFF 		bl	memcpy
 259              	.LVL34:
 402:RTT/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 16


 260              		.loc 1 402 5 is_stmt 1 view .LVU81
 402:RTT/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 261              		.loc 1 402 21 is_stmt 0 view .LVU82
 262 0032 A144     		add	r9, r9, r4
 263              	.LVL35:
 403:RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 264              		.loc 1 403 5 is_stmt 1 view .LVU83
 403:RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 265              		.loc 1 403 21 is_stmt 0 view .LVU84
 266 0034 A044     		add	r8, r8, r4
 267              	.LVL36:
 404:RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 268              		.loc 1 404 5 is_stmt 1 view .LVU85
 404:RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 269              		.loc 1 404 21 is_stmt 0 view .LVU86
 270 0036 3F1B     		subs	r7, r7, r4
 271              	.LVL37:
 405:RTT/SEGGER_RTT.c **** #endif
 272              		.loc 1 405 5 is_stmt 1 view .LVU87
 405:RTT/SEGGER_RTT.c **** #endif
 273              		.loc 1 405 21 is_stmt 0 view .LVU88
 274 0038 2544     		add	r5, r5, r4
 275              	.LVL38:
 407:RTT/SEGGER_RTT.c ****       WrOff = 0u;
 276              		.loc 1 407 5 is_stmt 1 view .LVU89
 407:RTT/SEGGER_RTT.c ****       WrOff = 0u;
 277              		.loc 1 407 23 is_stmt 0 view .LVU90
 278 003a B368     		ldr	r3, [r6, #8]
 407:RTT/SEGGER_RTT.c ****       WrOff = 0u;
 279              		.loc 1 407 8 view .LVU91
 280 003c AB42     		cmp	r3, r5
 281 003e 09D0     		beq	.L15
 282              	.LVL39:
 283              	.L11:
 410:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 284              		.loc 1 410 15 is_stmt 1 view .LVU92
 411:RTT/SEGGER_RTT.c ****   } while (NumBytes);
 285              		.loc 1 411 5 view .LVU93
 411:RTT/SEGGER_RTT.c ****   } while (NumBytes);
 286              		.loc 1 411 18 is_stmt 0 view .LVU94
 287 0040 F560     		str	r5, [r6, #12]
 412:RTT/SEGGER_RTT.c ****   return NumBytesWritten;
 288              		.loc 1 412 11 is_stmt 1 view .LVU95
 412:RTT/SEGGER_RTT.c ****   return NumBytesWritten;
 289              		.loc 1 412 3 is_stmt 0 view .LVU96
 290 0042 4FB1     		cbz	r7, .L16
 291              	.LVL40:
 292              	.L12:
 383:RTT/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 293              		.loc 1 383 3 is_stmt 1 view .LVU97
 384:RTT/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 294              		.loc 1 384 5 view .LVU98
 384:RTT/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 295              		.loc 1 384 11 is_stmt 0 view .LVU99
 296 0044 3469     		ldr	r4, [r6, #16]
 297              	.LVL41:
 385:RTT/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 17


 298              		.loc 1 385 5 is_stmt 1 view .LVU100
 385:RTT/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 299              		.loc 1 385 8 is_stmt 0 view .LVU101
 300 0046 A542     		cmp	r5, r4
 301 0048 E3D3     		bcc	.L17
 388:RTT/SEGGER_RTT.c ****     }
 302              		.loc 1 388 7 is_stmt 1 view .LVU102
 388:RTT/SEGGER_RTT.c ****     }
 303              		.loc 1 388 30 is_stmt 0 view .LVU103
 304 004a B268     		ldr	r2, [r6, #8]
 388:RTT/SEGGER_RTT.c ****     }
 305              		.loc 1 388 62 view .LVU104
 306 004c 641B     		subs	r4, r4, r5
 307              	.LVL42:
 388:RTT/SEGGER_RTT.c ****     }
 308              		.loc 1 388 45 view .LVU105
 309 004e 1444     		add	r4, r4, r2
 388:RTT/SEGGER_RTT.c ****     }
 310              		.loc 1 388 23 view .LVU106
 311 0050 621E     		subs	r2, r4, #1
 312              	.LVL43:
 388:RTT/SEGGER_RTT.c ****     }
 313              		.loc 1 388 23 view .LVU107
 314 0052 E0E7     		b	.L10
 315              	.LVL44:
 316              	.L15:
 408:RTT/SEGGER_RTT.c ****     }
 317              		.loc 1 408 13 view .LVU108
 318 0054 0025     		movs	r5, #0
 319              	.LVL45:
 408:RTT/SEGGER_RTT.c ****     }
 320              		.loc 1 408 13 view .LVU109
 321 0056 F3E7     		b	.L11
 322              	.LVL46:
 323              	.L16:
 413:RTT/SEGGER_RTT.c **** }
 324              		.loc 1 413 3 is_stmt 1 view .LVU110
 414:RTT/SEGGER_RTT.c **** 
 325              		.loc 1 414 1 is_stmt 0 view .LVU111
 326 0058 4846     		mov	r0, r9
 327 005a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 414:RTT/SEGGER_RTT.c **** 
 328              		.loc 1 414 1 view .LVU112
 329              		.cfi_endproc
 330              	.LFE1:
 332              		.section	.text._PostTerminalSwitch,"ax",%progbits
 333              		.align	1
 334              		.syntax unified
 335              		.thumb
 336              		.thumb_func
 338              	_PostTerminalSwitch:
 339              	.LVL47:
 340              	.LFB3:
 502:RTT/SEGGER_RTT.c ****   unsigned char ac[2];
 341              		.loc 1 502 88 is_stmt 1 view -0
 342              		.cfi_startproc
 343              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 18


 344              		@ frame_needed = 0, uses_anonymous_args = 0
 502:RTT/SEGGER_RTT.c ****   unsigned char ac[2];
 345              		.loc 1 502 88 is_stmt 0 view .LVU114
 346 0000 00B5     		push	{lr}
 347              	.LCFI2:
 348              		.cfi_def_cfa_offset 4
 349              		.cfi_offset 14, -4
 350 0002 83B0     		sub	sp, sp, #12
 351              	.LCFI3:
 352              		.cfi_def_cfa_offset 16
 503:RTT/SEGGER_RTT.c **** 
 353              		.loc 1 503 3 is_stmt 1 view .LVU115
 505:RTT/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 354              		.loc 1 505 3 view .LVU116
 505:RTT/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 355              		.loc 1 505 9 is_stmt 0 view .LVU117
 356 0004 FF23     		movs	r3, #255
 357 0006 8DF80430 		strb	r3, [sp, #4]
 506:RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 358              		.loc 1 506 3 is_stmt 1 view .LVU118
 506:RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 359              		.loc 1 506 23 is_stmt 0 view .LVU119
 360 000a 054B     		ldr	r3, .L20
 361 000c 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 506:RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 362              		.loc 1 506 9 view .LVU120
 363 000e 8DF80530 		strb	r3, [sp, #5]
 507:RTT/SEGGER_RTT.c **** }
 364              		.loc 1 507 3 is_stmt 1 view .LVU121
 365 0012 0222     		movs	r2, #2
 366 0014 01A9     		add	r1, sp, #4
 367              	.LVL48:
 507:RTT/SEGGER_RTT.c **** }
 368              		.loc 1 507 3 is_stmt 0 view .LVU122
 369 0016 FFF7FEFF 		bl	_WriteBlocking
 370              	.LVL49:
 508:RTT/SEGGER_RTT.c **** 
 371              		.loc 1 508 1 view .LVU123
 372 001a 03B0     		add	sp, sp, #12
 373              	.LCFI4:
 374              		.cfi_def_cfa_offset 4
 375              		@ sp needed
 376 001c 5DF804FB 		ldr	pc, [sp], #4
 377              	.L21:
 378              		.align	2
 379              	.L20:
 380 0020 00000000 		.word	.LANCHOR0
 381              		.cfi_endproc
 382              	.LFE3:
 384              		.section	.rodata._DoInit.str1.4,"aMS",%progbits,1
 385              		.align	2
 386              	.LC0:
 387 0000 5465726D 		.ascii	"Terminal\000"
 387      696E616C 
 387      00
 388              		.section	.text._DoInit,"ax",%progbits
 389              		.align	1
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 19


 390              		.syntax unified
 391              		.thumb
 392              		.thumb_func
 394              	_DoInit:
 395              	.LFB0:
 312:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of ac
 396              		.loc 1 312 27 is_stmt 1 view -0
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 0
 399              		@ frame_needed = 0, uses_anonymous_args = 0
 400 0000 10B5     		push	{r4, lr}
 401              	.LCFI5:
 402              		.cfi_def_cfa_offset 8
 403              		.cfi_offset 4, -8
 404              		.cfi_offset 14, -4
 313:RTT/SEGGER_RTT.c ****   static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sur
 405              		.loc 1 313 3 view .LVU125
 314:RTT/SEGGER_RTT.c ****   unsigned i;
 406              		.loc 1 314 3 view .LVU126
 315:RTT/SEGGER_RTT.c ****   //
 407              		.loc 1 315 3 view .LVU127
 319:RTT/SEGGER_RTT.c ****   memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always
 408              		.loc 1 319 3 view .LVU128
 409              	.LVL50:
 320:RTT/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 410              		.loc 1 320 3 view .LVU129
 411 0002 134C     		ldr	r4, .L26
 412 0004 A822     		movs	r2, #168
 413 0006 0021     		movs	r1, #0
 414 0008 2046     		mov	r0, r4
 415 000a FFF7FEFF 		bl	memset
 416              	.LVL51:
 321:RTT/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 417              		.loc 1 321 3 view .LVU130
 321:RTT/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 418              		.loc 1 321 25 is_stmt 0 view .LVU131
 419 000e 0323     		movs	r3, #3
 420 0010 2361     		str	r3, [r4, #16]
 322:RTT/SEGGER_RTT.c ****   //
 421              		.loc 1 322 3 is_stmt 1 view .LVU132
 322:RTT/SEGGER_RTT.c ****   //
 422              		.loc 1 322 25 is_stmt 0 view .LVU133
 423 0012 6361     		str	r3, [r4, #20]
 326:RTT/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 424              		.loc 1 326 3 is_stmt 1 view .LVU134
 326:RTT/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 425              		.loc 1 326 27 is_stmt 0 view .LVU135
 426 0014 0F4A     		ldr	r2, .L26+4
 427 0016 A261     		str	r2, [r4, #24]
 327:RTT/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 428              		.loc 1 327 3 is_stmt 1 view .LVU136
 327:RTT/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 429              		.loc 1 327 27 is_stmt 0 view .LVU137
 430 0018 0F4B     		ldr	r3, .L26+8
 431 001a E361     		str	r3, [r4, #28]
 328:RTT/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 432              		.loc 1 328 3 is_stmt 1 view .LVU138
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 20


 328:RTT/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 433              		.loc 1 328 27 is_stmt 0 view .LVU139
 434 001c 4FF48063 		mov	r3, #1024
 435 0020 2362     		str	r3, [r4, #32]
 329:RTT/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 436              		.loc 1 329 3 is_stmt 1 view .LVU140
 329:RTT/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 437              		.loc 1 329 27 is_stmt 0 view .LVU141
 438 0022 0023     		movs	r3, #0
 439 0024 A362     		str	r3, [r4, #40]
 330:RTT/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 440              		.loc 1 330 3 is_stmt 1 view .LVU142
 330:RTT/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 441              		.loc 1 330 27 is_stmt 0 view .LVU143
 442 0026 6362     		str	r3, [r4, #36]
 331:RTT/SEGGER_RTT.c ****   //
 443              		.loc 1 331 3 is_stmt 1 view .LVU144
 331:RTT/SEGGER_RTT.c ****   //
 444              		.loc 1 331 27 is_stmt 0 view .LVU145
 445 0028 E362     		str	r3, [r4, #44]
 335:RTT/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 446              		.loc 1 335 3 is_stmt 1 view .LVU146
 335:RTT/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 447              		.loc 1 335 29 is_stmt 0 view .LVU147
 448 002a 2266     		str	r2, [r4, #96]
 336:RTT/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 449              		.loc 1 336 3 is_stmt 1 view .LVU148
 336:RTT/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 450              		.loc 1 336 29 is_stmt 0 view .LVU149
 451 002c 0B4A     		ldr	r2, .L26+12
 452 002e 6266     		str	r2, [r4, #100]
 337:RTT/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 453              		.loc 1 337 3 is_stmt 1 view .LVU150
 337:RTT/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 454              		.loc 1 337 29 is_stmt 0 view .LVU151
 455 0030 1022     		movs	r2, #16
 456 0032 A266     		str	r2, [r4, #104]
 338:RTT/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 457              		.loc 1 338 3 is_stmt 1 view .LVU152
 338:RTT/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 458              		.loc 1 338 29 is_stmt 0 view .LVU153
 459 0034 2367     		str	r3, [r4, #112]
 339:RTT/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 460              		.loc 1 339 3 is_stmt 1 view .LVU154
 339:RTT/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 461              		.loc 1 339 29 is_stmt 0 view .LVU155
 462 0036 E366     		str	r3, [r4, #108]
 340:RTT/SEGGER_RTT.c ****   //
 463              		.loc 1 340 3 is_stmt 1 view .LVU156
 340:RTT/SEGGER_RTT.c ****   //
 464              		.loc 1 340 29 is_stmt 0 view .LVU157
 465 0038 6367     		str	r3, [r4, #116]
 346:RTT/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 466              		.loc 1 346 13 is_stmt 1 view .LVU158
 347:RTT/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 467              		.loc 1 347 3 view .LVU159
 468              	.LVL52:
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 21


 347:RTT/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 469              		.loc 1 347 3 is_stmt 0 view .LVU160
 470 003a 06E0     		b	.L23
 471              	.LVL53:
 472              	.L24:
 348:RTT/SEGGER_RTT.c ****   }
 473              		.loc 1 348 5 is_stmt 1 discriminator 3 view .LVU161
 348:RTT/SEGGER_RTT.c ****   }
 474              		.loc 1 348 50 is_stmt 0 discriminator 3 view .LVU162
 475 003c C3F10F02 		rsb	r2, r3, #15
 348:RTT/SEGGER_RTT.c ****   }
 476              		.loc 1 348 27 discriminator 3 view .LVU163
 477 0040 0749     		ldr	r1, .L26+16
 478 0042 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 348:RTT/SEGGER_RTT.c ****   }
 479              		.loc 1 348 16 discriminator 3 view .LVU164
 480 0044 024A     		ldr	r2, .L26
 481 0046 D154     		strb	r1, [r2, r3]
 347:RTT/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 482              		.loc 1 347 42 is_stmt 1 discriminator 3 view .LVU165
 483 0048 0133     		adds	r3, r3, #1
 484              	.LVL54:
 485              	.L23:
 347:RTT/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 486              		.loc 1 347 15 discriminator 1 view .LVU166
 347:RTT/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 487              		.loc 1 347 3 is_stmt 0 discriminator 1 view .LVU167
 488 004a 0F2B     		cmp	r3, #15
 489 004c F6D9     		bls	.L24
 351:RTT/SEGGER_RTT.c **** 
 490              		.loc 1 351 1 view .LVU168
 491 004e 10BD     		pop	{r4, pc}
 492              	.L27:
 493              		.align	2
 494              	.L26:
 495 0050 00000000 		.word	.LANCHOR1
 496 0054 00000000 		.word	.LC0
 497 0058 00000000 		.word	.LANCHOR2
 498 005c 00000000 		.word	.LANCHOR3
 499 0060 00000000 		.word	.LANCHOR4
 500              		.cfi_endproc
 501              	.LFE0:
 503              		.section	.text.SEGGER_RTT_ReadUpBufferNoLock,"ax",%progbits
 504              		.align	1
 505              		.global	SEGGER_RTT_ReadUpBufferNoLock
 506              		.syntax unified
 507              		.thumb
 508              		.thumb_func
 510              	SEGGER_RTT_ReadUpBufferNoLock:
 511              	.LVL55:
 512              	.LFB5:
 541:RTT/SEGGER_RTT.c **** 
 542:RTT/SEGGER_RTT.c **** /*********************************************************************
 543:RTT/SEGGER_RTT.c **** *
 544:RTT/SEGGER_RTT.c **** *       Public code
 545:RTT/SEGGER_RTT.c **** *
 546:RTT/SEGGER_RTT.c **** **********************************************************************
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 22


 547:RTT/SEGGER_RTT.c **** */
 548:RTT/SEGGER_RTT.c **** 
 549:RTT/SEGGER_RTT.c **** /*********************************************************************
 550:RTT/SEGGER_RTT.c **** *
 551:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBufferNoLock()
 552:RTT/SEGGER_RTT.c **** *
 553:RTT/SEGGER_RTT.c **** *  Function description
 554:RTT/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 555:RTT/SEGGER_RTT.c **** *    which have been previously stored by the application.
 556:RTT/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 557:RTT/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 558:RTT/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 559:RTT/SEGGER_RTT.c **** *
 560:RTT/SEGGER_RTT.c **** *  Parameters
 561:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 562:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 563:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 564:RTT/SEGGER_RTT.c **** *
 565:RTT/SEGGER_RTT.c **** *  Return value
 566:RTT/SEGGER_RTT.c **** *    Number of bytes that have been read.
 567:RTT/SEGGER_RTT.c **** *
 568:RTT/SEGGER_RTT.c **** *  Additional information
 569:RTT/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 570:RTT/SEGGER_RTT.c **** */
 571:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 513              		.loc 1 571 96 is_stmt 1 view -0
 514              		.cfi_startproc
 515              		@ args = 0, pretend = 0, frame = 0
 516              		@ frame_needed = 0, uses_anonymous_args = 0
 517              		.loc 1 571 96 is_stmt 0 view .LVU170
 518 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 519              	.LCFI6:
 520              		.cfi_def_cfa_offset 32
 521              		.cfi_offset 4, -32
 522              		.cfi_offset 5, -28
 523              		.cfi_offset 6, -24
 524              		.cfi_offset 7, -20
 525              		.cfi_offset 8, -16
 526              		.cfi_offset 9, -12
 527              		.cfi_offset 10, -8
 528              		.cfi_offset 14, -4
 529 0004 0446     		mov	r4, r0
 530 0006 8846     		mov	r8, r1
 531 0008 9146     		mov	r9, r2
 572:RTT/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 532              		.loc 1 572 3 is_stmt 1 view .LVU171
 573:RTT/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 533              		.loc 1 573 3 view .LVU172
 574:RTT/SEGGER_RTT.c ****   unsigned                RdOff;
 534              		.loc 1 574 3 view .LVU173
 575:RTT/SEGGER_RTT.c ****   unsigned                WrOff;
 535              		.loc 1 575 3 view .LVU174
 576:RTT/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 536              		.loc 1 576 3 view .LVU175
 577:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 537              		.loc 1 577 3 view .LVU176
 578:RTT/SEGGER_RTT.c ****   volatile char*          pSrc;
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 23


 538              		.loc 1 578 3 view .LVU177
 539              	.LBB2:
 579:RTT/SEGGER_RTT.c **** 
 580:RTT/SEGGER_RTT.c ****   INIT();
 540              		.loc 1 580 3 view .LVU178
 541              		.loc 1 580 3 view .LVU179
 542              	.LVL56:
 543              		.loc 1 580 3 view .LVU180
 544              		.loc 1 580 3 view .LVU181
 545 000a 274B     		ldr	r3, .L39
 546 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 547 000e C3B1     		cbz	r3, .L36
 548              	.LVL57:
 549              	.L29:
 550              		.loc 1 580 3 discriminator 3 view .LVU182
 551              	.LBE2:
 552              		.loc 1 580 9 discriminator 3 view .LVU183
 581:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 553              		.loc 1 581 3 discriminator 3 view .LVU184
 582:RTT/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 554              		.loc 1 582 3 discriminator 3 view .LVU185
 583:RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 555              		.loc 1 583 3 discriminator 3 view .LVU186
 556              		.loc 1 583 9 is_stmt 0 discriminator 3 view .LVU187
 557 0010 04EB4403 		add	r3, r4, r4, lsl #1
 558 0014 244A     		ldr	r2, .L39
 559 0016 02EBC303 		add	r3, r2, r3, lsl #3
 560 001a 9F6A     		ldr	r7, [r3, #40]
 561              	.LVL58:
 584:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 562              		.loc 1 584 3 is_stmt 1 discriminator 3 view .LVU188
 563              		.loc 1 584 9 is_stmt 0 discriminator 3 view .LVU189
 564 001c 5D6A     		ldr	r5, [r3, #36]
 565              	.LVL59:
 585:RTT/SEGGER_RTT.c ****   NumBytesRead = 0u;
 566              		.loc 1 585 3 is_stmt 1 discriminator 3 view .LVU190
 586:RTT/SEGGER_RTT.c ****   //
 587:RTT/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 588:RTT/SEGGER_RTT.c ****   //
 589:RTT/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 567              		.loc 1 589 3 discriminator 3 view .LVU191
 568              		.loc 1 589 6 is_stmt 0 discriminator 3 view .LVU192
 569 001e AF42     		cmp	r7, r5
 570 0020 12D8     		bhi	.L37
 585:RTT/SEGGER_RTT.c ****   NumBytesRead = 0u;
 571              		.loc 1 585 16 view .LVU193
 572 0022 0026     		movs	r6, #0
 573              	.LVL60:
 574              	.L30:
 590:RTT/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 591:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 592:RTT/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 593:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 594:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 595:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 596:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 597:RTT/SEGGER_RTT.c ****     while (NumBytesRem--) {
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 24


 598:RTT/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 599:RTT/SEGGER_RTT.c ****     };
 600:RTT/SEGGER_RTT.c **** #else
 601:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 602:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 603:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 604:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 605:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 606:RTT/SEGGER_RTT.c **** #endif
 607:RTT/SEGGER_RTT.c ****     //
 608:RTT/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 609:RTT/SEGGER_RTT.c ****     //
 610:RTT/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 611:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 612:RTT/SEGGER_RTT.c ****     }
 613:RTT/SEGGER_RTT.c ****   }
 614:RTT/SEGGER_RTT.c ****   //
 615:RTT/SEGGER_RTT.c ****   // Read remaining items of buffer
 616:RTT/SEGGER_RTT.c ****   //
 617:RTT/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 575              		.loc 1 617 3 is_stmt 1 view .LVU194
 576              		.loc 1 617 15 is_stmt 0 view .LVU195
 577 0024 ED1B     		subs	r5, r5, r7
 578              	.LVL61:
 618:RTT/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 579              		.loc 1 618 3 is_stmt 1 view .LVU196
 580              		.loc 1 618 15 is_stmt 0 view .LVU197
 581 0026 4D45     		cmp	r5, r9
 582 0028 28BF     		it	cs
 583 002a 4D46     		movcs	r5, r9
 584              	.LVL62:
 619:RTT/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 585              		.loc 1 619 3 is_stmt 1 view .LVU198
 586              		.loc 1 619 6 is_stmt 0 view .LVU199
 587 002c 65BB     		cbnz	r5, .L38
 588              	.LVL63:
 589              	.L31:
 620:RTT/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 621:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 622:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 623:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 624:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 625:RTT/SEGGER_RTT.c ****     while (NumBytesRem--) {
 626:RTT/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 627:RTT/SEGGER_RTT.c ****     };
 628:RTT/SEGGER_RTT.c **** #else
 629:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 630:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 631:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 632:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 633:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 634:RTT/SEGGER_RTT.c **** #endif
 635:RTT/SEGGER_RTT.c ****   }
 636:RTT/SEGGER_RTT.c ****   //
 637:RTT/SEGGER_RTT.c ****   // Update read offset of buffer
 638:RTT/SEGGER_RTT.c ****   //
 639:RTT/SEGGER_RTT.c ****   if (NumBytesRead) {
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 25


 590              		.loc 1 639 3 is_stmt 1 view .LVU200
 591              		.loc 1 639 6 is_stmt 0 view .LVU201
 592 002e 2EB1     		cbz	r6, .L28
 640:RTT/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 593              		.loc 1 640 5 is_stmt 1 view .LVU202
 594              		.loc 1 640 18 is_stmt 0 view .LVU203
 595 0030 04EB4404 		add	r4, r4, r4, lsl #1
 596              	.LVL64:
 597              		.loc 1 640 18 view .LVU204
 598 0034 1C48     		ldr	r0, .L39
 599 0036 00EBC404 		add	r4, r0, r4, lsl #3
 600 003a A762     		str	r7, [r4, #40]
 641:RTT/SEGGER_RTT.c ****   }
 642:RTT/SEGGER_RTT.c ****   //
 643:RTT/SEGGER_RTT.c ****   return NumBytesRead;
 601              		.loc 1 643 3 is_stmt 1 view .LVU205
 602              	.L28:
 644:RTT/SEGGER_RTT.c **** }
 603              		.loc 1 644 1 is_stmt 0 view .LVU206
 604 003c 3046     		mov	r0, r6
 605 003e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 606              	.LVL65:
 607              	.L36:
 608              	.LBB3:
 580:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 609              		.loc 1 580 3 is_stmt 1 discriminator 1 view .LVU207
 610 0042 FFF7FEFF 		bl	_DoInit
 611              	.LVL66:
 580:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 612              		.loc 1 580 3 is_stmt 0 discriminator 1 view .LVU208
 613 0046 E3E7     		b	.L29
 614              	.LVL67:
 615              	.L37:
 580:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 616              		.loc 1 580 3 discriminator 1 view .LVU209
 617              	.LBE3:
 590:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 618              		.loc 1 590 5 is_stmt 1 view .LVU210
 590:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 619              		.loc 1 590 24 is_stmt 0 view .LVU211
 620 0048 1346     		mov	r3, r2
 621 004a 04EB440A 		add	r10, r4, r4, lsl #1
 622 004e 02EBCA0A 		add	r10, r2, r10, lsl #3
 623 0052 DAF82060 		ldr	r6, [r10, #32]
 590:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 624              		.loc 1 590 17 view .LVU212
 625 0056 F61B     		subs	r6, r6, r7
 626              	.LVL68:
 591:RTT/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 627              		.loc 1 591 5 is_stmt 1 view .LVU213
 591:RTT/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 628              		.loc 1 591 17 is_stmt 0 view .LVU214
 629 0058 4E45     		cmp	r6, r9
 630 005a 28BF     		it	cs
 631 005c 4E46     		movcs	r6, r9
 632              	.LVL69:
 592:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 26


 633              		.loc 1 592 5 is_stmt 1 view .LVU215
 592:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 634              		.loc 1 592 18 is_stmt 0 view .LVU216
 635 005e 621C     		adds	r2, r4, #1
 636 0060 02EB4202 		add	r2, r2, r2, lsl #1
 637 0064 03EBC203 		add	r3, r3, r2, lsl #3
 638 0068 5968     		ldr	r1, [r3, #4]
 639              	.LVL70:
 601:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 640              		.loc 1 601 5 is_stmt 1 view .LVU217
 641 006a 3246     		mov	r2, r6
 642 006c 3944     		add	r1, r1, r7
 643              	.LVL71:
 601:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 644              		.loc 1 601 5 is_stmt 0 view .LVU218
 645 006e 4046     		mov	r0, r8
 646 0070 FFF7FEFF 		bl	memcpy
 647              	.LVL72:
 602:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 648              		.loc 1 602 5 is_stmt 1 view .LVU219
 603:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 649              		.loc 1 603 5 view .LVU220
 603:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 650              		.loc 1 603 18 is_stmt 0 view .LVU221
 651 0074 B044     		add	r8, r8, r6
 652              	.LVL73:
 604:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 653              		.loc 1 604 5 is_stmt 1 view .LVU222
 604:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 654              		.loc 1 604 18 is_stmt 0 view .LVU223
 655 0076 A9EB0609 		sub	r9, r9, r6
 656              	.LVL74:
 605:RTT/SEGGER_RTT.c **** #endif
 657              		.loc 1 605 5 is_stmt 1 view .LVU224
 605:RTT/SEGGER_RTT.c **** #endif
 658              		.loc 1 605 18 is_stmt 0 view .LVU225
 659 007a 3744     		add	r7, r7, r6
 660              	.LVL75:
 610:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 661              		.loc 1 610 5 is_stmt 1 view .LVU226
 610:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 662              		.loc 1 610 23 is_stmt 0 view .LVU227
 663 007c DAF82030 		ldr	r3, [r10, #32]
 610:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 664              		.loc 1 610 8 view .LVU228
 665 0080 BB42     		cmp	r3, r7
 666 0082 CFD1     		bne	.L30
 611:RTT/SEGGER_RTT.c ****     }
 667              		.loc 1 611 13 view .LVU229
 668 0084 0027     		movs	r7, #0
 669              	.LVL76:
 611:RTT/SEGGER_RTT.c ****     }
 670              		.loc 1 611 13 view .LVU230
 671 0086 CDE7     		b	.L30
 672              	.LVL77:
 673              	.L38:
 620:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 27


 674              		.loc 1 620 5 is_stmt 1 view .LVU231
 620:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 675              		.loc 1 620 18 is_stmt 0 view .LVU232
 676 0088 631C     		adds	r3, r4, #1
 677 008a 03EB4303 		add	r3, r3, r3, lsl #1
 678 008e 064A     		ldr	r2, .L39
 679 0090 02EBC303 		add	r3, r2, r3, lsl #3
 680 0094 5968     		ldr	r1, [r3, #4]
 681              	.LVL78:
 629:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 682              		.loc 1 629 5 is_stmt 1 view .LVU233
 683 0096 2A46     		mov	r2, r5
 684 0098 3944     		add	r1, r1, r7
 685              	.LVL79:
 629:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 686              		.loc 1 629 5 is_stmt 0 view .LVU234
 687 009a 4046     		mov	r0, r8
 688 009c FFF7FEFF 		bl	memcpy
 689              	.LVL80:
 630:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 690              		.loc 1 630 5 is_stmt 1 view .LVU235
 630:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 691              		.loc 1 630 18 is_stmt 0 view .LVU236
 692 00a0 2E44     		add	r6, r6, r5
 693              	.LVL81:
 631:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 694              		.loc 1 631 5 is_stmt 1 view .LVU237
 632:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 695              		.loc 1 632 5 view .LVU238
 633:RTT/SEGGER_RTT.c **** #endif
 696              		.loc 1 633 5 view .LVU239
 633:RTT/SEGGER_RTT.c **** #endif
 697              		.loc 1 633 18 is_stmt 0 view .LVU240
 698 00a2 2F44     		add	r7, r7, r5
 699              	.LVL82:
 633:RTT/SEGGER_RTT.c **** #endif
 700              		.loc 1 633 18 view .LVU241
 701 00a4 C3E7     		b	.L31
 702              	.L40:
 703 00a6 00BF     		.align	2
 704              	.L39:
 705 00a8 00000000 		.word	.LANCHOR1
 706              		.cfi_endproc
 707              	.LFE5:
 709              		.section	.text.SEGGER_RTT_ReadNoLock,"ax",%progbits
 710              		.align	1
 711              		.global	SEGGER_RTT_ReadNoLock
 712              		.syntax unified
 713              		.thumb
 714              		.thumb_func
 716              	SEGGER_RTT_ReadNoLock:
 717              	.LVL83:
 718              	.LFB6:
 645:RTT/SEGGER_RTT.c **** 
 646:RTT/SEGGER_RTT.c **** /*********************************************************************
 647:RTT/SEGGER_RTT.c **** *
 648:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ReadNoLock()
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 28


 649:RTT/SEGGER_RTT.c **** *
 650:RTT/SEGGER_RTT.c **** *  Function description
 651:RTT/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 652:RTT/SEGGER_RTT.c **** *    which have been previously stored by the host.
 653:RTT/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 654:RTT/SEGGER_RTT.c **** *
 655:RTT/SEGGER_RTT.c **** *  Parameters
 656:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 657:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 658:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 659:RTT/SEGGER_RTT.c **** *
 660:RTT/SEGGER_RTT.c **** *  Return value
 661:RTT/SEGGER_RTT.c **** *    Number of bytes that have been read.
 662:RTT/SEGGER_RTT.c **** */
 663:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 719              		.loc 1 663 88 is_stmt 1 view -0
 720              		.cfi_startproc
 721              		@ args = 0, pretend = 0, frame = 0
 722              		@ frame_needed = 0, uses_anonymous_args = 0
 723              		.loc 1 663 88 is_stmt 0 view .LVU243
 724 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 725              	.LCFI7:
 726              		.cfi_def_cfa_offset 32
 727              		.cfi_offset 4, -32
 728              		.cfi_offset 5, -28
 729              		.cfi_offset 6, -24
 730              		.cfi_offset 7, -20
 731              		.cfi_offset 8, -16
 732              		.cfi_offset 9, -12
 733              		.cfi_offset 10, -8
 734              		.cfi_offset 14, -4
 735 0004 0446     		mov	r4, r0
 736 0006 8846     		mov	r8, r1
 737 0008 9146     		mov	r9, r2
 664:RTT/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 738              		.loc 1 664 3 is_stmt 1 view .LVU244
 665:RTT/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 739              		.loc 1 665 3 view .LVU245
 666:RTT/SEGGER_RTT.c ****   unsigned                RdOff;
 740              		.loc 1 666 3 view .LVU246
 667:RTT/SEGGER_RTT.c ****   unsigned                WrOff;
 741              		.loc 1 667 3 view .LVU247
 668:RTT/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 742              		.loc 1 668 3 view .LVU248
 669:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 743              		.loc 1 669 3 view .LVU249
 670:RTT/SEGGER_RTT.c ****   volatile char*          pSrc;
 744              		.loc 1 670 3 view .LVU250
 745              	.LBB4:
 671:RTT/SEGGER_RTT.c ****   //
 672:RTT/SEGGER_RTT.c ****   INIT();
 746              		.loc 1 672 3 view .LVU251
 747              		.loc 1 672 3 view .LVU252
 748              	.LVL84:
 749              		.loc 1 672 3 view .LVU253
 750              		.loc 1 672 3 view .LVU254
 751 000a 244B     		ldr	r3, .L52
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 29


 752 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 753 000e C3B1     		cbz	r3, .L49
 754              	.LVL85:
 755              	.L42:
 756              		.loc 1 672 3 discriminator 3 view .LVU255
 757              	.LBE4:
 758              		.loc 1 672 9 discriminator 3 view .LVU256
 673:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 759              		.loc 1 673 3 discriminator 3 view .LVU257
 674:RTT/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 760              		.loc 1 674 3 discriminator 3 view .LVU258
 675:RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 761              		.loc 1 675 3 discriminator 3 view .LVU259
 762              		.loc 1 675 9 is_stmt 0 discriminator 3 view .LVU260
 763 0010 04EB4403 		add	r3, r4, r4, lsl #1
 764 0014 214A     		ldr	r2, .L52
 765 0016 02EBC303 		add	r3, r2, r3, lsl #3
 766 001a 1F6F     		ldr	r7, [r3, #112]
 767              	.LVL86:
 676:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 768              		.loc 1 676 3 is_stmt 1 discriminator 3 view .LVU261
 769              		.loc 1 676 9 is_stmt 0 discriminator 3 view .LVU262
 770 001c DD6E     		ldr	r5, [r3, #108]
 771              	.LVL87:
 677:RTT/SEGGER_RTT.c ****   NumBytesRead = 0u;
 772              		.loc 1 677 3 is_stmt 1 discriminator 3 view .LVU263
 678:RTT/SEGGER_RTT.c ****   //
 679:RTT/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 680:RTT/SEGGER_RTT.c ****   //
 681:RTT/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 773              		.loc 1 681 3 discriminator 3 view .LVU264
 774              		.loc 1 681 6 is_stmt 0 discriminator 3 view .LVU265
 775 001e AF42     		cmp	r7, r5
 776 0020 12D8     		bhi	.L50
 677:RTT/SEGGER_RTT.c ****   NumBytesRead = 0u;
 777              		.loc 1 677 16 view .LVU266
 778 0022 0026     		movs	r6, #0
 779              	.LVL88:
 780              	.L43:
 682:RTT/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 683:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 684:RTT/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 685:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 686:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 687:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 688:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 689:RTT/SEGGER_RTT.c ****     while (NumBytesRem--) {
 690:RTT/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 691:RTT/SEGGER_RTT.c ****     };
 692:RTT/SEGGER_RTT.c **** #else
 693:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 694:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 695:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 696:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 697:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 698:RTT/SEGGER_RTT.c **** #endif
 699:RTT/SEGGER_RTT.c ****     //
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 30


 700:RTT/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 701:RTT/SEGGER_RTT.c ****     //
 702:RTT/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 703:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 704:RTT/SEGGER_RTT.c ****     }
 705:RTT/SEGGER_RTT.c ****   }
 706:RTT/SEGGER_RTT.c ****   //
 707:RTT/SEGGER_RTT.c ****   // Read remaining items of buffer
 708:RTT/SEGGER_RTT.c ****   //
 709:RTT/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 781              		.loc 1 709 3 is_stmt 1 view .LVU267
 782              		.loc 1 709 15 is_stmt 0 view .LVU268
 783 0024 ED1B     		subs	r5, r5, r7
 784              	.LVL89:
 710:RTT/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 785              		.loc 1 710 3 is_stmt 1 view .LVU269
 786              		.loc 1 710 15 is_stmt 0 view .LVU270
 787 0026 4D45     		cmp	r5, r9
 788 0028 28BF     		it	cs
 789 002a 4D46     		movcs	r5, r9
 790              	.LVL90:
 711:RTT/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 791              		.loc 1 711 3 is_stmt 1 view .LVU271
 792              		.loc 1 711 6 is_stmt 0 view .LVU272
 793 002c 3DBB     		cbnz	r5, .L51
 794              	.LVL91:
 795              	.L44:
 712:RTT/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 713:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 714:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 715:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 716:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 717:RTT/SEGGER_RTT.c ****     while (NumBytesRem--) {
 718:RTT/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 719:RTT/SEGGER_RTT.c ****     };
 720:RTT/SEGGER_RTT.c **** #else
 721:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 722:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 723:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 724:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 725:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 726:RTT/SEGGER_RTT.c **** #endif
 727:RTT/SEGGER_RTT.c ****   }
 728:RTT/SEGGER_RTT.c ****   if (NumBytesRead) {
 796              		.loc 1 728 3 is_stmt 1 view .LVU273
 797              		.loc 1 728 6 is_stmt 0 view .LVU274
 798 002e 2EB1     		cbz	r6, .L41
 729:RTT/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 799              		.loc 1 729 5 is_stmt 1 view .LVU275
 800              		.loc 1 729 18 is_stmt 0 view .LVU276
 801 0030 04EB4404 		add	r4, r4, r4, lsl #1
 802              	.LVL92:
 803              		.loc 1 729 18 view .LVU277
 804 0034 1948     		ldr	r0, .L52
 805 0036 00EBC404 		add	r4, r0, r4, lsl #3
 806 003a 2767     		str	r7, [r4, #112]
 730:RTT/SEGGER_RTT.c ****   }
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 31


 731:RTT/SEGGER_RTT.c ****   //
 732:RTT/SEGGER_RTT.c ****   return NumBytesRead;
 807              		.loc 1 732 3 is_stmt 1 view .LVU278
 808              	.L41:
 733:RTT/SEGGER_RTT.c **** }
 809              		.loc 1 733 1 is_stmt 0 view .LVU279
 810 003c 3046     		mov	r0, r6
 811 003e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 812              	.LVL93:
 813              	.L49:
 814              	.LBB5:
 672:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 815              		.loc 1 672 3 is_stmt 1 discriminator 1 view .LVU280
 816 0042 FFF7FEFF 		bl	_DoInit
 817              	.LVL94:
 672:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 818              		.loc 1 672 3 is_stmt 0 discriminator 1 view .LVU281
 819 0046 E3E7     		b	.L42
 820              	.LVL95:
 821              	.L50:
 672:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 822              		.loc 1 672 3 discriminator 1 view .LVU282
 823              	.LBE5:
 682:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 824              		.loc 1 682 5 is_stmt 1 view .LVU283
 682:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 825              		.loc 1 682 24 is_stmt 0 view .LVU284
 826 0048 04EB440A 		add	r10, r4, r4, lsl #1
 827 004c 02EBCA0A 		add	r10, r2, r10, lsl #3
 828 0050 DAF86860 		ldr	r6, [r10, #104]
 682:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 829              		.loc 1 682 17 view .LVU285
 830 0054 F61B     		subs	r6, r6, r7
 831              	.LVL96:
 683:RTT/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 832              		.loc 1 683 5 is_stmt 1 view .LVU286
 683:RTT/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 833              		.loc 1 683 17 is_stmt 0 view .LVU287
 834 0056 4E45     		cmp	r6, r9
 835 0058 28BF     		it	cs
 836 005a 4E46     		movcs	r6, r9
 837              	.LVL97:
 684:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 838              		.loc 1 684 5 is_stmt 1 view .LVU288
 684:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 839              		.loc 1 684 18 is_stmt 0 view .LVU289
 840 005c DAF86410 		ldr	r1, [r10, #100]
 841              	.LVL98:
 693:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 842              		.loc 1 693 5 is_stmt 1 view .LVU290
 843 0060 3246     		mov	r2, r6
 844 0062 3944     		add	r1, r1, r7
 845              	.LVL99:
 693:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 846              		.loc 1 693 5 is_stmt 0 view .LVU291
 847 0064 4046     		mov	r0, r8
 848 0066 FFF7FEFF 		bl	memcpy
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 32


 849              	.LVL100:
 694:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 850              		.loc 1 694 5 is_stmt 1 view .LVU292
 695:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 851              		.loc 1 695 5 view .LVU293
 695:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 852              		.loc 1 695 18 is_stmt 0 view .LVU294
 853 006a B044     		add	r8, r8, r6
 854              	.LVL101:
 696:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 855              		.loc 1 696 5 is_stmt 1 view .LVU295
 696:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 856              		.loc 1 696 18 is_stmt 0 view .LVU296
 857 006c A9EB0609 		sub	r9, r9, r6
 858              	.LVL102:
 697:RTT/SEGGER_RTT.c **** #endif
 859              		.loc 1 697 5 is_stmt 1 view .LVU297
 697:RTT/SEGGER_RTT.c **** #endif
 860              		.loc 1 697 18 is_stmt 0 view .LVU298
 861 0070 3744     		add	r7, r7, r6
 862              	.LVL103:
 702:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 863              		.loc 1 702 5 is_stmt 1 view .LVU299
 702:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 864              		.loc 1 702 23 is_stmt 0 view .LVU300
 865 0072 DAF86830 		ldr	r3, [r10, #104]
 702:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 866              		.loc 1 702 8 view .LVU301
 867 0076 BB42     		cmp	r3, r7
 868 0078 D4D1     		bne	.L43
 703:RTT/SEGGER_RTT.c ****     }
 869              		.loc 1 703 13 view .LVU302
 870 007a 0027     		movs	r7, #0
 871              	.LVL104:
 703:RTT/SEGGER_RTT.c ****     }
 872              		.loc 1 703 13 view .LVU303
 873 007c D2E7     		b	.L43
 874              	.LVL105:
 875              	.L51:
 712:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 876              		.loc 1 712 5 is_stmt 1 view .LVU304
 712:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 877              		.loc 1 712 18 is_stmt 0 view .LVU305
 878 007e 04EB4403 		add	r3, r4, r4, lsl #1
 879 0082 064A     		ldr	r2, .L52
 880 0084 02EBC303 		add	r3, r2, r3, lsl #3
 881 0088 596E     		ldr	r1, [r3, #100]
 882              	.LVL106:
 721:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 883              		.loc 1 721 5 is_stmt 1 view .LVU306
 884 008a 2A46     		mov	r2, r5
 885 008c 3944     		add	r1, r1, r7
 886              	.LVL107:
 721:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 887              		.loc 1 721 5 is_stmt 0 view .LVU307
 888 008e 4046     		mov	r0, r8
 889 0090 FFF7FEFF 		bl	memcpy
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 33


 890              	.LVL108:
 722:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 891              		.loc 1 722 5 is_stmt 1 view .LVU308
 722:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 892              		.loc 1 722 18 is_stmt 0 view .LVU309
 893 0094 2E44     		add	r6, r6, r5
 894              	.LVL109:
 723:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 895              		.loc 1 723 5 is_stmt 1 view .LVU310
 724:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 896              		.loc 1 724 5 view .LVU311
 725:RTT/SEGGER_RTT.c **** #endif
 897              		.loc 1 725 5 view .LVU312
 725:RTT/SEGGER_RTT.c **** #endif
 898              		.loc 1 725 18 is_stmt 0 view .LVU313
 899 0096 2F44     		add	r7, r7, r5
 900              	.LVL110:
 725:RTT/SEGGER_RTT.c **** #endif
 901              		.loc 1 725 18 view .LVU314
 902 0098 C9E7     		b	.L44
 903              	.L53:
 904 009a 00BF     		.align	2
 905              	.L52:
 906 009c 00000000 		.word	.LANCHOR1
 907              		.cfi_endproc
 908              	.LFE6:
 910              		.section	.text.SEGGER_RTT_ReadUpBuffer,"ax",%progbits
 911              		.align	1
 912              		.global	SEGGER_RTT_ReadUpBuffer
 913              		.syntax unified
 914              		.thumb
 915              		.thumb_func
 917              	SEGGER_RTT_ReadUpBuffer:
 918              	.LVL111:
 919              	.LFB7:
 734:RTT/SEGGER_RTT.c **** 
 735:RTT/SEGGER_RTT.c **** /*********************************************************************
 736:RTT/SEGGER_RTT.c **** *
 737:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBuffer
 738:RTT/SEGGER_RTT.c **** *
 739:RTT/SEGGER_RTT.c **** *  Function description
 740:RTT/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 741:RTT/SEGGER_RTT.c **** *    which have been previously stored by the application.
 742:RTT/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 743:RTT/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 744:RTT/SEGGER_RTT.c **** *
 745:RTT/SEGGER_RTT.c **** *  Parameters
 746:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 747:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 748:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 749:RTT/SEGGER_RTT.c **** *
 750:RTT/SEGGER_RTT.c **** *  Return value
 751:RTT/SEGGER_RTT.c **** *    Number of bytes that have been read.
 752:RTT/SEGGER_RTT.c **** *
 753:RTT/SEGGER_RTT.c **** *  Additional information
 754:RTT/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 755:RTT/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 34


 756:RTT/SEGGER_RTT.c **** *    the read operation, writing is also locked.
 757:RTT/SEGGER_RTT.c **** *    If only one consumer reads from the up buffer, 
 758:RTT/SEGGER_RTT.c **** *    call sEGGER_RTT_ReadUpBufferNoLock() instead.
 759:RTT/SEGGER_RTT.c **** */
 760:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBuffer(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 920              		.loc 1 760 92 is_stmt 1 view -0
 921              		.cfi_startproc
 922              		@ args = 0, pretend = 0, frame = 0
 923              		@ frame_needed = 0, uses_anonymous_args = 0
 924              		.loc 1 760 92 is_stmt 0 view .LVU316
 925 0000 10B5     		push	{r4, lr}
 926              	.LCFI8:
 927              		.cfi_def_cfa_offset 8
 928              		.cfi_offset 4, -8
 929              		.cfi_offset 14, -4
 930 0002 0B46     		mov	r3, r1
 761:RTT/SEGGER_RTT.c ****   unsigned NumBytesRead;
 931              		.loc 1 761 3 is_stmt 1 view .LVU317
 932              	.LBB6:
 762:RTT/SEGGER_RTT.c **** 
 763:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 933              		.loc 1 763 3 view .LVU318
 934              		.loc 1 763 3 view .LVU319
 935              		.syntax unified
 936              	@ 763 "RTT/SEGGER_RTT.c" 1
 937 0004 EFF31184 		mrs   r4, basepri  
 938 0008 4FF02001 		mov   r1, #32       
 939 000c 81F31188 		msr   basepri, r1  
 940              		
 941              	@ 0 "" 2
 942              	.LVL112:
 943              		.loc 1 763 20 view .LVU320
 764:RTT/SEGGER_RTT.c ****   //
 765:RTT/SEGGER_RTT.c ****   // Call the non-locking read function
 766:RTT/SEGGER_RTT.c ****   //
 767:RTT/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadUpBufferNoLock(BufferIndex, pBuffer, BufferSize);
 944              		.loc 1 767 3 view .LVU321
 945              		.loc 1 767 18 is_stmt 0 view .LVU322
 946              		.thumb
 947              		.syntax unified
 948 0010 1946     		mov	r1, r3
 949 0012 FFF7FEFF 		bl	SEGGER_RTT_ReadUpBufferNoLock
 950              	.LVL113:
 768:RTT/SEGGER_RTT.c ****   //
 769:RTT/SEGGER_RTT.c ****   // Finish up.
 770:RTT/SEGGER_RTT.c ****   //
 771:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 951              		.loc 1 771 3 is_stmt 1 view .LVU323
 952              		.syntax unified
 953              	@ 771 "RTT/SEGGER_RTT.c" 1
 954 0016 84F31188 		msr   basepri, r4  
 955              		
 956              	@ 0 "" 2
 957              		.thumb
 958              		.syntax unified
 959              	.LBE6:
 960              		.loc 1 771 22 view .LVU324
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 35


 772:RTT/SEGGER_RTT.c ****   //
 773:RTT/SEGGER_RTT.c ****   return NumBytesRead;
 961              		.loc 1 773 3 view .LVU325
 774:RTT/SEGGER_RTT.c **** }
 962              		.loc 1 774 1 is_stmt 0 view .LVU326
 963 001a 10BD     		pop	{r4, pc}
 964              		.loc 1 774 1 view .LVU327
 965              		.cfi_endproc
 966              	.LFE7:
 968              		.section	.text.SEGGER_RTT_Read,"ax",%progbits
 969              		.align	1
 970              		.global	SEGGER_RTT_Read
 971              		.syntax unified
 972              		.thumb
 973              		.thumb_func
 975              	SEGGER_RTT_Read:
 976              	.LVL114:
 977              	.LFB8:
 775:RTT/SEGGER_RTT.c **** 
 776:RTT/SEGGER_RTT.c **** /*********************************************************************
 777:RTT/SEGGER_RTT.c **** *
 778:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_Read
 779:RTT/SEGGER_RTT.c **** *
 780:RTT/SEGGER_RTT.c **** *  Function description
 781:RTT/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 782:RTT/SEGGER_RTT.c **** *    which have been previously stored by the host.
 783:RTT/SEGGER_RTT.c **** *
 784:RTT/SEGGER_RTT.c **** *  Parameters
 785:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 786:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 787:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 788:RTT/SEGGER_RTT.c **** *
 789:RTT/SEGGER_RTT.c **** *  Return value
 790:RTT/SEGGER_RTT.c **** *    Number of bytes that have been read.
 791:RTT/SEGGER_RTT.c **** */
 792:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 978              		.loc 1 792 84 is_stmt 1 view -0
 979              		.cfi_startproc
 980              		@ args = 0, pretend = 0, frame = 0
 981              		@ frame_needed = 0, uses_anonymous_args = 0
 982              		.loc 1 792 84 is_stmt 0 view .LVU329
 983 0000 10B5     		push	{r4, lr}
 984              	.LCFI9:
 985              		.cfi_def_cfa_offset 8
 986              		.cfi_offset 4, -8
 987              		.cfi_offset 14, -4
 988 0002 0B46     		mov	r3, r1
 793:RTT/SEGGER_RTT.c ****   unsigned NumBytesRead;
 989              		.loc 1 793 3 is_stmt 1 view .LVU330
 990              	.LBB7:
 794:RTT/SEGGER_RTT.c **** 
 795:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 991              		.loc 1 795 3 view .LVU331
 992              		.loc 1 795 3 view .LVU332
 993              		.syntax unified
 994              	@ 795 "RTT/SEGGER_RTT.c" 1
 995 0004 EFF31184 		mrs   r4, basepri  
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 36


 996 0008 4FF02001 		mov   r1, #32       
 997 000c 81F31188 		msr   basepri, r1  
 998              		
 999              	@ 0 "" 2
 1000              	.LVL115:
 1001              		.loc 1 795 20 view .LVU333
 796:RTT/SEGGER_RTT.c ****   //
 797:RTT/SEGGER_RTT.c ****   // Call the non-locking read function
 798:RTT/SEGGER_RTT.c ****   //
 799:RTT/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 1002              		.loc 1 799 3 view .LVU334
 1003              		.loc 1 799 18 is_stmt 0 view .LVU335
 1004              		.thumb
 1005              		.syntax unified
 1006 0010 1946     		mov	r1, r3
 1007 0012 FFF7FEFF 		bl	SEGGER_RTT_ReadNoLock
 1008              	.LVL116:
 800:RTT/SEGGER_RTT.c ****   //
 801:RTT/SEGGER_RTT.c ****   // Finish up.
 802:RTT/SEGGER_RTT.c ****   //
 803:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1009              		.loc 1 803 3 is_stmt 1 view .LVU336
 1010              		.syntax unified
 1011              	@ 803 "RTT/SEGGER_RTT.c" 1
 1012 0016 84F31188 		msr   basepri, r4  
 1013              		
 1014              	@ 0 "" 2
 1015              		.thumb
 1016              		.syntax unified
 1017              	.LBE7:
 1018              		.loc 1 803 22 view .LVU337
 804:RTT/SEGGER_RTT.c ****   //
 805:RTT/SEGGER_RTT.c ****   return NumBytesRead;
 1019              		.loc 1 805 3 view .LVU338
 806:RTT/SEGGER_RTT.c **** }
 1020              		.loc 1 806 1 is_stmt 0 view .LVU339
 1021 001a 10BD     		pop	{r4, pc}
 1022              		.loc 1 806 1 view .LVU340
 1023              		.cfi_endproc
 1024              	.LFE8:
 1026              		.section	.text.SEGGER_RTT_WriteWithOverwriteNoLock,"ax",%progbits
 1027              		.align	1
 1028              		.global	SEGGER_RTT_WriteWithOverwriteNoLock
 1029              		.syntax unified
 1030              		.thumb
 1031              		.thumb_func
 1033              	SEGGER_RTT_WriteWithOverwriteNoLock:
 1034              	.LVL117:
 1035              	.LFB9:
 807:RTT/SEGGER_RTT.c **** 
 808:RTT/SEGGER_RTT.c **** /*********************************************************************
 809:RTT/SEGGER_RTT.c **** *
 810:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteWithOverwriteNoLock
 811:RTT/SEGGER_RTT.c **** *
 812:RTT/SEGGER_RTT.c **** *  Function description
 813:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 814:RTT/SEGGER_RTT.c **** *    control block.
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 37


 815:RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteWithOverwriteNoLock does not lock the application 
 816:RTT/SEGGER_RTT.c **** *    and overwrites data if the data does not fit into the buffer.
 817:RTT/SEGGER_RTT.c **** *
 818:RTT/SEGGER_RTT.c **** *  Parameters
 819:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 820:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 821:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 822:RTT/SEGGER_RTT.c **** *
 823:RTT/SEGGER_RTT.c **** *  Notes
 824:RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, data is overwritten.
 825:RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 826:RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 827:RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 828:RTT/SEGGER_RTT.c **** *    (3) Do not use SEGGER_RTT_WriteWithOverwriteNoLock if a J-Link 
 829:RTT/SEGGER_RTT.c **** *        connection reads RTT data.
 830:RTT/SEGGER_RTT.c **** */
 831:RTT/SEGGER_RTT.c **** void SEGGER_RTT_WriteWithOverwriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumByt
 1036              		.loc 1 831 104 is_stmt 1 view -0
 1037              		.cfi_startproc
 1038              		@ args = 0, pretend = 0, frame = 0
 1039              		@ frame_needed = 0, uses_anonymous_args = 0
 1040              		.loc 1 831 104 is_stmt 0 view .LVU342
 1041 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1042              	.LCFI10:
 1043              		.cfi_def_cfa_offset 32
 1044              		.cfi_offset 3, -32
 1045              		.cfi_offset 4, -28
 1046              		.cfi_offset 5, -24
 1047              		.cfi_offset 6, -20
 1048              		.cfi_offset 7, -16
 1049              		.cfi_offset 8, -12
 1050              		.cfi_offset 9, -8
 1051              		.cfi_offset 14, -4
 1052 0004 0646     		mov	r6, r0
 1053 0006 8846     		mov	r8, r1
 1054 0008 1746     		mov	r7, r2
 832:RTT/SEGGER_RTT.c ****   const char*           pData;
 1055              		.loc 1 832 3 is_stmt 1 view .LVU343
 833:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1056              		.loc 1 833 3 view .LVU344
 834:RTT/SEGGER_RTT.c ****   unsigned              Avail;
 1057              		.loc 1 834 3 view .LVU345
 835:RTT/SEGGER_RTT.c ****   volatile char*        pDst;
 1058              		.loc 1 835 3 view .LVU346
 836:RTT/SEGGER_RTT.c ****   //
 837:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer and copy some elements into local variables.
 838:RTT/SEGGER_RTT.c ****   //
 839:RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1059              		.loc 1 839 3 view .LVU347
 1060              	.LVL118:
 840:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1061              		.loc 1 840 3 view .LVU348
 841:RTT/SEGGER_RTT.c ****   //
 842:RTT/SEGGER_RTT.c ****   // Check if we will overwrite data and need to adjust the RdOff.
 843:RTT/SEGGER_RTT.c ****   //
 844:RTT/SEGGER_RTT.c ****   if (pRing->WrOff == pRing->RdOff) {
 1062              		.loc 1 844 3 view .LVU349
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 38


 1063              		.loc 1 844 12 is_stmt 0 view .LVU350
 1064 000a 00EB4002 		add	r2, r0, r0, lsl #1
 1065              	.LVL119:
 1066              		.loc 1 844 12 view .LVU351
 1067 000e 3F4B     		ldr	r3, .L71
 1068 0010 03EBC203 		add	r3, r3, r2, lsl #3
 1069 0014 596A     		ldr	r1, [r3, #36]
 1070              	.LVL120:
 1071              		.loc 1 844 28 view .LVU352
 1072 0016 9B6A     		ldr	r3, [r3, #40]
 1073              		.loc 1 844 6 view .LVU353
 1074 0018 9942     		cmp	r1, r3
 1075 001a 0FD0     		beq	.L69
 845:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 846:RTT/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 1076              		.loc 1 846 10 is_stmt 1 view .LVU354
 1077              		.loc 1 846 35 is_stmt 0 view .LVU355
 1078 001c 00EB4003 		add	r3, r0, r0, lsl #1
 1079 0020 3A4A     		ldr	r2, .L71
 1080 0022 02EBC303 		add	r3, r2, r3, lsl #3
 1081 0026 9B6A     		ldr	r3, [r3, #40]
 1082              		.loc 1 846 13 view .LVU356
 1083 0028 9942     		cmp	r1, r3
 1084 002a 19D2     		bcs	.L61
 847:RTT/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u;
 1085              		.loc 1 847 5 is_stmt 1 view .LVU357
 1086              		.loc 1 847 18 is_stmt 0 view .LVU358
 1087 002c 00EB4003 		add	r3, r0, r0, lsl #1
 1088 0030 02EBC303 		add	r3, r2, r3, lsl #3
 1089 0034 9B6A     		ldr	r3, [r3, #40]
 1090              		.loc 1 847 26 view .LVU359
 1091 0036 5B1A     		subs	r3, r3, r1
 1092              		.loc 1 847 11 view .LVU360
 1093 0038 013B     		subs	r3, r3, #1
 1094              	.LVL121:
 1095              		.loc 1 847 11 view .LVU361
 1096 003a 05E0     		b	.L60
 1097              	.LVL122:
 1098              	.L69:
 845:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1099              		.loc 1 845 5 is_stmt 1 view .LVU362
 845:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1100              		.loc 1 845 18 is_stmt 0 view .LVU363
 1101 003c 1346     		mov	r3, r2
 1102 003e 334A     		ldr	r2, .L71
 1103 0040 02EBC303 		add	r3, r2, r3, lsl #3
 1104 0044 1B6A     		ldr	r3, [r3, #32]
 845:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1105              		.loc 1 845 11 view .LVU364
 1106 0046 013B     		subs	r3, r3, #1
 1107              	.LVL123:
 1108              	.L60:
 848:RTT/SEGGER_RTT.c ****   } else {
 849:RTT/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u + pRing->SizeOfBuffer;
 850:RTT/SEGGER_RTT.c ****   }
 851:RTT/SEGGER_RTT.c ****   if (NumBytes > Avail) {
 1109              		.loc 1 851 3 is_stmt 1 view .LVU365
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 39


 1110              		.loc 1 851 6 is_stmt 0 view .LVU366
 1111 0048 BB42     		cmp	r3, r7
 1112 004a 25D2     		bcs	.L62
 852:RTT/SEGGER_RTT.c ****     pRing->RdOff += (NumBytes - Avail);
 1113              		.loc 1 852 5 is_stmt 1 view .LVU367
 1114              		.loc 1 852 18 is_stmt 0 view .LVU368
 1115 004c 06EB4602 		add	r2, r6, r6, lsl #1
 1116 0050 2E48     		ldr	r0, .L71
 1117              	.LVL124:
 1118              		.loc 1 852 18 view .LVU369
 1119 0052 00EBC202 		add	r2, r0, r2, lsl #3
 1120 0056 906A     		ldr	r0, [r2, #40]
 1121              		.loc 1 852 31 view .LVU370
 1122 0058 FB1A     		subs	r3, r7, r3
 1123              	.LVL125:
 1124              		.loc 1 852 18 view .LVU371
 1125 005a 0344     		add	r3, r3, r0
 1126 005c 9362     		str	r3, [r2, #40]
 853:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1127              		.loc 1 853 5 is_stmt 1 view .LVU372
 1128              		.loc 1 853 11 is_stmt 0 view .LVU373
 1129 005e 12E0     		b	.L63
 1130              	.LVL126:
 1131              	.L61:
 849:RTT/SEGGER_RTT.c ****   }
 1132              		.loc 1 849 5 is_stmt 1 view .LVU374
 849:RTT/SEGGER_RTT.c ****   }
 1133              		.loc 1 849 18 is_stmt 0 view .LVU375
 1134 0060 00EB4002 		add	r2, r0, r0, lsl #1
 1135 0064 294B     		ldr	r3, .L71
 1136 0066 03EBC202 		add	r2, r3, r2, lsl #3
 1137 006a 936A     		ldr	r3, [r2, #40]
 849:RTT/SEGGER_RTT.c ****   }
 1138              		.loc 1 849 26 view .LVU376
 1139 006c 5B1A     		subs	r3, r3, r1
 849:RTT/SEGGER_RTT.c ****   }
 1140              		.loc 1 849 53 view .LVU377
 1141 006e 126A     		ldr	r2, [r2, #32]
 849:RTT/SEGGER_RTT.c ****   }
 1142              		.loc 1 849 46 view .LVU378
 1143 0070 1344     		add	r3, r3, r2
 849:RTT/SEGGER_RTT.c ****   }
 1144              		.loc 1 849 11 view .LVU379
 1145 0072 013B     		subs	r3, r3, #1
 1146              	.LVL127:
 849:RTT/SEGGER_RTT.c ****   }
 1147              		.loc 1 849 11 view .LVU380
 1148 0074 E8E7     		b	.L60
 1149              	.LVL128:
 1150              	.L64:
 854:RTT/SEGGER_RTT.c ****       pRing->RdOff -= pRing->SizeOfBuffer;
 1151              		.loc 1 854 7 is_stmt 1 view .LVU381
 1152              		.loc 1 854 20 is_stmt 0 view .LVU382
 1153 0076 06EB4603 		add	r3, r6, r6, lsl #1
 1154 007a 244A     		ldr	r2, .L71
 1155 007c 02EBC303 		add	r3, r2, r3, lsl #3
 1156 0080 9A6A     		ldr	r2, [r3, #40]
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 40


 1157 0082 121A     		subs	r2, r2, r0
 1158 0084 9A62     		str	r2, [r3, #40]
 1159              	.L63:
 853:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1160              		.loc 1 853 11 is_stmt 1 view .LVU383
 853:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1161              		.loc 1 853 17 is_stmt 0 view .LVU384
 1162 0086 06EB4603 		add	r3, r6, r6, lsl #1
 1163 008a 204A     		ldr	r2, .L71
 1164 008c 02EBC303 		add	r3, r2, r3, lsl #3
 1165 0090 9A6A     		ldr	r2, [r3, #40]
 853:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1166              		.loc 1 853 33 view .LVU385
 1167 0092 186A     		ldr	r0, [r3, #32]
 853:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1168              		.loc 1 853 11 view .LVU386
 1169 0094 8242     		cmp	r2, r0
 1170 0096 EED2     		bcs	.L64
 1171              	.L62:
 855:RTT/SEGGER_RTT.c ****     }
 856:RTT/SEGGER_RTT.c ****   }
 857:RTT/SEGGER_RTT.c ****   //
 858:RTT/SEGGER_RTT.c ****   // Write all data, no need to check the RdOff, but possibly handle multiple wrap-arounds
 859:RTT/SEGGER_RTT.c ****   //
 860:RTT/SEGGER_RTT.c ****   Avail = pRing->SizeOfBuffer - pRing->WrOff;
 1172              		.loc 1 860 3 is_stmt 1 view .LVU387
 1173              		.loc 1 860 16 is_stmt 0 view .LVU388
 1174 0098 06EB4603 		add	r3, r6, r6, lsl #1
 1175 009c 1B4A     		ldr	r2, .L71
 1176 009e 02EBC303 		add	r3, r2, r3, lsl #3
 1177 00a2 1C6A     		ldr	r4, [r3, #32]
 1178              		.loc 1 860 9 view .LVU389
 1179 00a4 641A     		subs	r4, r4, r1
 1180              	.LVL129:
 1181              	.L67:
 861:RTT/SEGGER_RTT.c ****   do {
 1182              		.loc 1 861 3 is_stmt 1 view .LVU390
 862:RTT/SEGGER_RTT.c ****     if (Avail > NumBytes) {
 1183              		.loc 1 862 5 view .LVU391
 1184              		.loc 1 862 8 is_stmt 0 view .LVU392
 1185 00a6 A742     		cmp	r7, r4
 1186 00a8 19D3     		bcc	.L70
 863:RTT/SEGGER_RTT.c ****       //
 864:RTT/SEGGER_RTT.c ****       // Last round
 865:RTT/SEGGER_RTT.c ****       //
 866:RTT/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 867:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 868:RTT/SEGGER_RTT.c ****       Avail = NumBytes;
 869:RTT/SEGGER_RTT.c ****       while (NumBytes--) {
 870:RTT/SEGGER_RTT.c ****         *pDst++ = *pData++;
 871:RTT/SEGGER_RTT.c ****       };
 872:RTT/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 873:RTT/SEGGER_RTT.c ****       pRing->WrOff += Avail;
 874:RTT/SEGGER_RTT.c **** #else
 875:RTT/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 876:RTT/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 877:RTT/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 41


 878:RTT/SEGGER_RTT.c **** #endif
 879:RTT/SEGGER_RTT.c ****       break;
 880:RTT/SEGGER_RTT.c ****     } else {
 881:RTT/SEGGER_RTT.c ****       //
 882:RTT/SEGGER_RTT.c ****       //  Wrap-around necessary, write until wrap-around and reset WrOff
 883:RTT/SEGGER_RTT.c ****       //
 884:RTT/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1187              		.loc 1 884 7 is_stmt 1 view .LVU393
 1188              		.loc 1 884 20 is_stmt 0 view .LVU394
 1189 00aa 184D     		ldr	r5, .L71
 1190 00ac 731C     		adds	r3, r6, #1
 1191 00ae 03EB4303 		add	r3, r3, r3, lsl #1
 1192 00b2 05EBC303 		add	r3, r5, r3, lsl #3
 1193 00b6 5868     		ldr	r0, [r3, #4]
 1194              		.loc 1 884 37 view .LVU395
 1195 00b8 06EB4603 		add	r3, r6, r6, lsl #1
 1196 00bc 05EBC305 		add	r5, r5, r3, lsl #3
 1197 00c0 6B6A     		ldr	r3, [r5, #36]
 1198              	.LVL130:
 885:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 886:RTT/SEGGER_RTT.c ****       NumBytes -= Avail;
 887:RTT/SEGGER_RTT.c ****       while (Avail--) {
 888:RTT/SEGGER_RTT.c ****         *pDst++ = *pData++;
 889:RTT/SEGGER_RTT.c ****       };
 890:RTT/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 891:RTT/SEGGER_RTT.c ****       pRing->WrOff = 0;
 892:RTT/SEGGER_RTT.c **** #else
 893:RTT/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY((void*)pDst, pData, Avail);
 1199              		.loc 1 893 7 is_stmt 1 view .LVU396
 1200 00c2 2246     		mov	r2, r4
 1201 00c4 4146     		mov	r1, r8
 1202 00c6 1844     		add	r0, r0, r3
 1203              	.LVL131:
 1204              		.loc 1 893 7 is_stmt 0 view .LVU397
 1205 00c8 FFF7FEFF 		bl	memcpy
 1206              	.LVL132:
 894:RTT/SEGGER_RTT.c ****       pData += Avail;
 1207              		.loc 1 894 7 is_stmt 1 view .LVU398
 1208              		.loc 1 894 13 is_stmt 0 view .LVU399
 1209 00cc A044     		add	r8, r8, r4
 1210              	.LVL133:
 895:RTT/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1211              		.loc 1 895 17 is_stmt 1 view .LVU400
 896:RTT/SEGGER_RTT.c ****       pRing->WrOff = 0;
 1212              		.loc 1 896 7 view .LVU401
 1213              		.loc 1 896 20 is_stmt 0 view .LVU402
 1214 00ce 0023     		movs	r3, #0
 1215 00d0 6B62     		str	r3, [r5, #36]
 897:RTT/SEGGER_RTT.c ****       NumBytes -= Avail;
 1216              		.loc 1 897 7 is_stmt 1 view .LVU403
 1217              		.loc 1 897 16 is_stmt 0 view .LVU404
 1218 00d2 3F1B     		subs	r7, r7, r4
 1219              	.LVL134:
 898:RTT/SEGGER_RTT.c **** #endif
 899:RTT/SEGGER_RTT.c ****       Avail = (pRing->SizeOfBuffer - 1);
 1220              		.loc 1 899 7 is_stmt 1 view .LVU405
 1221              		.loc 1 899 21 is_stmt 0 view .LVU406
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 42


 1222 00d4 2C6A     		ldr	r4, [r5, #32]
 1223              	.LVL135:
 1224              		.loc 1 899 13 view .LVU407
 1225 00d6 013C     		subs	r4, r4, #1
 1226              	.LVL136:
 900:RTT/SEGGER_RTT.c ****     }
 901:RTT/SEGGER_RTT.c ****   } while (NumBytes);
 1227              		.loc 1 901 11 is_stmt 1 view .LVU408
 1228              		.loc 1 901 3 is_stmt 0 view .LVU409
 1229 00d8 002F     		cmp	r7, #0
 1230 00da E4D1     		bne	.L67
 1231 00dc 13E0     		b	.L58
 1232              	.L70:
 866:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1233              		.loc 1 866 7 is_stmt 1 view .LVU410
 866:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1234              		.loc 1 866 20 is_stmt 0 view .LVU411
 1235 00de 0B4C     		ldr	r4, .L71
 1236              	.LVL137:
 866:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1237              		.loc 1 866 20 view .LVU412
 1238 00e0 731C     		adds	r3, r6, #1
 1239 00e2 03EB4303 		add	r3, r3, r3, lsl #1
 1240 00e6 04EBC303 		add	r3, r4, r3, lsl #3
 1241 00ea 5868     		ldr	r0, [r3, #4]
 866:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1242              		.loc 1 866 37 view .LVU413
 1243 00ec 06EB4605 		add	r5, r6, r6, lsl #1
 1244 00f0 04EBC505 		add	r5, r4, r5, lsl #3
 1245 00f4 6B6A     		ldr	r3, [r5, #36]
 1246              	.LVL138:
 875:RTT/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1247              		.loc 1 875 7 is_stmt 1 view .LVU414
 1248 00f6 3A46     		mov	r2, r7
 1249 00f8 4146     		mov	r1, r8
 1250 00fa 1844     		add	r0, r0, r3
 1251              	.LVL139:
 875:RTT/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1252              		.loc 1 875 7 is_stmt 0 view .LVU415
 1253 00fc FFF7FEFF 		bl	memcpy
 1254              	.LVL140:
 876:RTT/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 1255              		.loc 1 876 17 is_stmt 1 view .LVU416
 877:RTT/SEGGER_RTT.c **** #endif
 1256              		.loc 1 877 7 view .LVU417
 877:RTT/SEGGER_RTT.c **** #endif
 1257              		.loc 1 877 20 is_stmt 0 view .LVU418
 1258 0100 6B6A     		ldr	r3, [r5, #36]
 1259 0102 1F44     		add	r7, r7, r3
 1260              	.LVL141:
 877:RTT/SEGGER_RTT.c **** #endif
 1261              		.loc 1 877 20 view .LVU419
 1262 0104 6F62     		str	r7, [r5, #36]
 879:RTT/SEGGER_RTT.c ****     } else {
 1263              		.loc 1 879 7 is_stmt 1 view .LVU420
 1264              	.L58:
 902:RTT/SEGGER_RTT.c **** }
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 43


 1265              		.loc 1 902 1 is_stmt 0 view .LVU421
 1266 0106 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1267              	.LVL142:
 1268              	.L72:
 1269              		.loc 1 902 1 view .LVU422
 1270 010a 00BF     		.align	2
 1271              	.L71:
 1272 010c 00000000 		.word	.LANCHOR1
 1273              		.cfi_endproc
 1274              	.LFE9:
 1276              		.section	.text.SEGGER_RTT_WriteDownBufferNoLock,"ax",%progbits
 1277              		.align	1
 1278              		.global	SEGGER_RTT_WriteDownBufferNoLock
 1279              		.syntax unified
 1280              		.thumb
 1281              		.thumb_func
 1283              	SEGGER_RTT_WriteDownBufferNoLock:
 1284              	.LVL143:
 1285              	.LFB10:
 903:RTT/SEGGER_RTT.c **** 
 904:RTT/SEGGER_RTT.c **** /*********************************************************************
 905:RTT/SEGGER_RTT.c **** *
 906:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteSkipNoLock
 907:RTT/SEGGER_RTT.c **** *
 908:RTT/SEGGER_RTT.c **** *  Function description
 909:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 910:RTT/SEGGER_RTT.c **** *    control block which is then read by the host.
 911:RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteSkipNoLock does not lock the application and
 912:RTT/SEGGER_RTT.c **** *    skips all data, if the data does not fit into the buffer.
 913:RTT/SEGGER_RTT.c **** *
 914:RTT/SEGGER_RTT.c **** *  Parameters
 915:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 916:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 917:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 918:RTT/SEGGER_RTT.c **** *                 MUST be > 0!!!
 919:RTT/SEGGER_RTT.c **** *                 This is done for performance reasons, so no initial check has do be done.
 920:RTT/SEGGER_RTT.c **** *
 921:RTT/SEGGER_RTT.c **** *  Return value
 922:RTT/SEGGER_RTT.c **** *    1: Data has been copied
 923:RTT/SEGGER_RTT.c **** *    0: No space, data has not been copied
 924:RTT/SEGGER_RTT.c **** *
 925:RTT/SEGGER_RTT.c **** *  Notes
 926:RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
 927:RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 928:RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 929:RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 930:RTT/SEGGER_RTT.c **** */
 931:RTT/SEGGER_RTT.c **** #if (RTT_USE_ASM == 0)
 932:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 933:RTT/SEGGER_RTT.c ****   const char*           pData;
 934:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 935:RTT/SEGGER_RTT.c ****   unsigned              Avail;
 936:RTT/SEGGER_RTT.c ****   unsigned              RdOff;
 937:RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 938:RTT/SEGGER_RTT.c ****   unsigned              Rem;
 939:RTT/SEGGER_RTT.c ****   volatile char*        pDst;
 940:RTT/SEGGER_RTT.c ****   //
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 44


 941:RTT/SEGGER_RTT.c ****   // Cases:
 942:RTT/SEGGER_RTT.c ****   //   1) RdOff <= WrOff => Space until wrap-around is sufficient
 943:RTT/SEGGER_RTT.c ****   //   2) RdOff <= WrOff => Space after wrap-around needed (copy in 2 chunks)
 944:RTT/SEGGER_RTT.c ****   //   3) RdOff <  WrOff => No space in buf
 945:RTT/SEGGER_RTT.c ****   //   4) RdOff >  WrOff => Space is sufficient
 946:RTT/SEGGER_RTT.c ****   //   5) RdOff >  WrOff => No space in buf
 947:RTT/SEGGER_RTT.c ****   //
 948:RTT/SEGGER_RTT.c ****   // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enou
 949:RTT/SEGGER_RTT.c ****   //
 950:RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 951:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 952:RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 953:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 954:RTT/SEGGER_RTT.c ****   if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 955:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte n
 956:RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 1)?
 957:RTT/SEGGER_RTT.c **** CopyStraight:
 958:RTT/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 959:RTT/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, NumBytes);
 960:RTT/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 961:RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 962:RTT/SEGGER_RTT.c ****       return 1;
 963:RTT/SEGGER_RTT.c ****     }
 964:RTT/SEGGER_RTT.c ****     Avail += RdOff;                                     // Space incl. wrap-around
 965:RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does
 966:RTT/SEGGER_RTT.c ****       Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 967:RTT/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 968:RTT/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
 969:RTT/SEGGER_RTT.c ****       NumBytes -= Rem;
 970:RTT/SEGGER_RTT.c ****       //
 971:RTT/SEGGER_RTT.c ****       // Special case: First check that assumed RdOff == 0 calculated that last element before wrap
 972:RTT/SEGGER_RTT.c ****       // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is
 973:RTT/SEGGER_RTT.c ****       // In this case, we may use a copy straight until buffer end anyway without needing to copy 2
 974:RTT/SEGGER_RTT.c ****       // Therefore, check if 2nd memcpy is necessary at all
 975:RTT/SEGGER_RTT.c ****       //
 976:RTT/SEGGER_RTT.c ****       if (NumBytes) {
 977:RTT/SEGGER_RTT.c ****         pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 978:RTT/SEGGER_RTT.c ****         memcpy((void*)pDst, pData + Rem, NumBytes);
 979:RTT/SEGGER_RTT.c ****       }
 980:RTT/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 981:RTT/SEGGER_RTT.c ****       pRing->WrOff = NumBytes;
 982:RTT/SEGGER_RTT.c ****       return 1;
 983:RTT/SEGGER_RTT.c ****     }
 984:RTT/SEGGER_RTT.c ****   } else {                                             // Potential case 4)
 985:RTT/SEGGER_RTT.c ****     Avail = RdOff - WrOff - 1u;
 986:RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does
 987:RTT/SEGGER_RTT.c ****       goto CopyStraight;
 988:RTT/SEGGER_RTT.c ****     }
 989:RTT/SEGGER_RTT.c ****   }
 990:RTT/SEGGER_RTT.c ****   return 0;     // No space in buffer
 991:RTT/SEGGER_RTT.c **** }
 992:RTT/SEGGER_RTT.c **** #endif
 993:RTT/SEGGER_RTT.c **** 
 994:RTT/SEGGER_RTT.c **** /*********************************************************************
 995:RTT/SEGGER_RTT.c **** *
 996:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBufferNoLock
 997:RTT/SEGGER_RTT.c **** *
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 45


 998:RTT/SEGGER_RTT.c **** *  Function description
 999:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1000:RTT/SEGGER_RTT.c **** *    control block inside a <Down> buffer.
1001:RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteDownBufferNoLock does not lock the application.
1002:RTT/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
1003:RTT/SEGGER_RTT.c **** *    RTT data from other channels, such as TCP/IP or UART.
1004:RTT/SEGGER_RTT.c **** *
1005:RTT/SEGGER_RTT.c **** *  Parameters
1006:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Down"-buffer to be used.
1007:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1008:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1009:RTT/SEGGER_RTT.c **** *
1010:RTT/SEGGER_RTT.c **** *  Return value
1011:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
1012:RTT/SEGGER_RTT.c **** *
1013:RTT/SEGGER_RTT.c **** *  Notes
1014:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1015:RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1016:RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1017:RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1018:RTT/SEGGER_RTT.c **** *
1019:RTT/SEGGER_RTT.c **** *  Additional information
1020:RTT/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1021:RTT/SEGGER_RTT.c **** */
1022:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBy
 1286              		.loc 1 1022 105 is_stmt 1 view -0
 1287              		.cfi_startproc
 1288              		@ args = 0, pretend = 0, frame = 0
 1289              		@ frame_needed = 0, uses_anonymous_args = 0
 1290              		.loc 1 1022 105 is_stmt 0 view .LVU424
 1291 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1292              	.LCFI11:
 1293              		.cfi_def_cfa_offset 24
 1294              		.cfi_offset 3, -24
 1295              		.cfi_offset 4, -20
 1296              		.cfi_offset 5, -16
 1297              		.cfi_offset 6, -12
 1298              		.cfi_offset 7, -8
 1299              		.cfi_offset 14, -4
 1300 0002 0E46     		mov	r6, r1
 1301 0004 1546     		mov	r5, r2
1023:RTT/SEGGER_RTT.c ****   unsigned                Status;
 1302              		.loc 1 1023 3 is_stmt 1 view .LVU425
1024:RTT/SEGGER_RTT.c ****   unsigned                Avail;
 1303              		.loc 1 1024 3 view .LVU426
1025:RTT/SEGGER_RTT.c ****   const char*             pData;
 1304              		.loc 1 1025 3 view .LVU427
1026:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 1305              		.loc 1 1026 3 view .LVU428
1027:RTT/SEGGER_RTT.c ****   //
1028:RTT/SEGGER_RTT.c ****   // Get "to-target" ring buffer.
1029:RTT/SEGGER_RTT.c ****   // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offs
1030:RTT/SEGGER_RTT.c ****   //
1031:RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1306              		.loc 1 1031 3 view .LVU429
 1307              	.LVL144:
1032:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF)
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 46


 1308              		.loc 1 1032 3 view .LVU430
 1309              		.loc 1 1032 9 is_stmt 0 view .LVU431
 1310 0006 00EB4000 		add	r0, r0, r0, lsl #1
 1311              	.LVL145:
 1312              		.loc 1 1032 9 view .LVU432
 1313 000a C000     		lsls	r0, r0, #3
 1314 000c 6030     		adds	r0, r0, #96
 1315 000e 144F     		ldr	r7, .L80
 1316 0010 0744     		add	r7, r7, r0
 1317              	.LVL146:
1033:RTT/SEGGER_RTT.c ****   //
1034:RTT/SEGGER_RTT.c ****   // How we output depends upon the mode...
1035:RTT/SEGGER_RTT.c ****   //
1036:RTT/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1318              		.loc 1 1036 3 is_stmt 1 view .LVU433
 1319              		.loc 1 1036 16 is_stmt 0 view .LVU434
 1320 0012 7C69     		ldr	r4, [r7, #20]
 1321              		.loc 1 1036 3 view .LVU435
 1322 0014 012C     		cmp	r4, #1
 1323 0016 11D0     		beq	.L74
 1324 0018 022C     		cmp	r4, #2
 1325 001a 1CD0     		beq	.L75
 1326 001c 14B1     		cbz	r4, .L79
 1327 001e 0024     		movs	r4, #0
 1328              	.LVL147:
1037:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1038:RTT/SEGGER_RTT.c ****     //
1039:RTT/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1040:RTT/SEGGER_RTT.c ****     // of this output, don't bother.
1041:RTT/SEGGER_RTT.c ****     //
1042:RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1043:RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
1044:RTT/SEGGER_RTT.c ****       Status = 0u;
1045:RTT/SEGGER_RTT.c ****     } else {
1046:RTT/SEGGER_RTT.c ****       Status = NumBytes;
1047:RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1048:RTT/SEGGER_RTT.c ****     }
1049:RTT/SEGGER_RTT.c ****     break;
1050:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1051:RTT/SEGGER_RTT.c ****     //
1052:RTT/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1053:RTT/SEGGER_RTT.c ****     //
1054:RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1055:RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
1056:RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
1057:RTT/SEGGER_RTT.c ****     break;
1058:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1059:RTT/SEGGER_RTT.c ****     //
1060:RTT/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1061:RTT/SEGGER_RTT.c ****     //
1062:RTT/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
1063:RTT/SEGGER_RTT.c ****     break;
1064:RTT/SEGGER_RTT.c ****   default:
1065:RTT/SEGGER_RTT.c ****     Status = 0u;
1066:RTT/SEGGER_RTT.c ****     break;
1067:RTT/SEGGER_RTT.c ****   }
1068:RTT/SEGGER_RTT.c ****   //
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 47


1069:RTT/SEGGER_RTT.c ****   // Finish up.
1070:RTT/SEGGER_RTT.c ****   //
1071:RTT/SEGGER_RTT.c ****   return Status;
 1329              		.loc 1 1071 3 is_stmt 1 view .LVU436
 1330              	.L73:
1072:RTT/SEGGER_RTT.c **** }
 1331              		.loc 1 1072 1 is_stmt 0 view .LVU437
 1332 0020 2046     		mov	r0, r4
 1333 0022 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1334              	.LVL148:
 1335              	.L79:
1042:RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1336              		.loc 1 1042 5 is_stmt 1 view .LVU438
1042:RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1337              		.loc 1 1042 13 is_stmt 0 view .LVU439
 1338 0024 3846     		mov	r0, r7
 1339 0026 FFF7FEFF 		bl	_GetAvailWriteSpace
 1340              	.LVL149:
1043:RTT/SEGGER_RTT.c ****       Status = 0u;
 1341              		.loc 1 1043 5 is_stmt 1 view .LVU440
1043:RTT/SEGGER_RTT.c ****       Status = 0u;
 1342              		.loc 1 1043 8 is_stmt 0 view .LVU441
 1343 002a 8542     		cmp	r5, r0
 1344 002c F8D8     		bhi	.L73
1046:RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1345              		.loc 1 1046 7 is_stmt 1 view .LVU442
 1346              	.LVL150:
1047:RTT/SEGGER_RTT.c ****     }
 1347              		.loc 1 1047 7 view .LVU443
 1348 002e 2A46     		mov	r2, r5
 1349 0030 3146     		mov	r1, r6
 1350 0032 3846     		mov	r0, r7
 1351              	.LVL151:
1047:RTT/SEGGER_RTT.c ****     }
 1352              		.loc 1 1047 7 is_stmt 0 view .LVU444
 1353 0034 FFF7FEFF 		bl	_WriteNoCheck
 1354              	.LVL152:
1046:RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1355              		.loc 1 1046 14 view .LVU445
 1356 0038 2C46     		mov	r4, r5
 1357 003a F1E7     		b	.L73
 1358              	.LVL153:
 1359              	.L74:
1054:RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1360              		.loc 1 1054 5 is_stmt 1 view .LVU446
1054:RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1361              		.loc 1 1054 13 is_stmt 0 view .LVU447
 1362 003c 3846     		mov	r0, r7
 1363 003e FFF7FEFF 		bl	_GetAvailWriteSpace
 1364              	.LVL154:
1055:RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1365              		.loc 1 1055 5 is_stmt 1 view .LVU448
1055:RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1366              		.loc 1 1055 12 is_stmt 0 view .LVU449
 1367 0042 2C46     		mov	r4, r5
 1368 0044 8542     		cmp	r5, r0
 1369 0046 28BF     		it	cs
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 48


 1370 0048 0446     		movcs	r4, r0
 1371              	.LVL155:
1056:RTT/SEGGER_RTT.c ****     break;
 1372              		.loc 1 1056 5 is_stmt 1 view .LVU450
 1373 004a 2246     		mov	r2, r4
 1374 004c 3146     		mov	r1, r6
 1375 004e 3846     		mov	r0, r7
 1376              	.LVL156:
1056:RTT/SEGGER_RTT.c ****     break;
 1377              		.loc 1 1056 5 is_stmt 0 view .LVU451
 1378 0050 FFF7FEFF 		bl	_WriteNoCheck
 1379              	.LVL157:
1057:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 1380              		.loc 1 1057 5 is_stmt 1 view .LVU452
 1381 0054 E4E7     		b	.L73
 1382              	.LVL158:
 1383              	.L75:
1062:RTT/SEGGER_RTT.c ****     break;
 1384              		.loc 1 1062 5 view .LVU453
1062:RTT/SEGGER_RTT.c ****     break;
 1385              		.loc 1 1062 14 is_stmt 0 view .LVU454
 1386 0056 3846     		mov	r0, r7
 1387 0058 FFF7FEFF 		bl	_WriteBlocking
 1388              	.LVL159:
1062:RTT/SEGGER_RTT.c ****     break;
 1389              		.loc 1 1062 14 view .LVU455
 1390 005c 0446     		mov	r4, r0
 1391              	.LVL160:
1063:RTT/SEGGER_RTT.c ****   default:
 1392              		.loc 1 1063 5 is_stmt 1 view .LVU456
 1393 005e DFE7     		b	.L73
 1394              	.L81:
 1395              		.align	2
 1396              	.L80:
 1397 0060 00000000 		.word	.LANCHOR1
 1398              		.cfi_endproc
 1399              	.LFE10:
 1401              		.section	.text.SEGGER_RTT_WriteNoLock,"ax",%progbits
 1402              		.align	1
 1403              		.global	SEGGER_RTT_WriteNoLock
 1404              		.syntax unified
 1405              		.thumb
 1406              		.thumb_func
 1408              	SEGGER_RTT_WriteNoLock:
 1409              	.LVL161:
 1410              	.LFB11:
1073:RTT/SEGGER_RTT.c **** 
1074:RTT/SEGGER_RTT.c **** /*********************************************************************
1075:RTT/SEGGER_RTT.c **** *
1076:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteNoLock
1077:RTT/SEGGER_RTT.c **** *
1078:RTT/SEGGER_RTT.c **** *  Function description
1079:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1080:RTT/SEGGER_RTT.c **** *    control block which is then read by the host.
1081:RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteNoLock does not lock the application.
1082:RTT/SEGGER_RTT.c **** *
1083:RTT/SEGGER_RTT.c **** *  Parameters
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 49


1084:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1085:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1086:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1087:RTT/SEGGER_RTT.c **** *
1088:RTT/SEGGER_RTT.c **** *  Return value
1089:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1090:RTT/SEGGER_RTT.c **** *
1091:RTT/SEGGER_RTT.c **** *  Notes
1092:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1093:RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1094:RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1095:RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1096:RTT/SEGGER_RTT.c **** */
1097:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1411              		.loc 1 1097 95 view -0
 1412              		.cfi_startproc
 1413              		@ args = 0, pretend = 0, frame = 0
 1414              		@ frame_needed = 0, uses_anonymous_args = 0
 1415              		.loc 1 1097 95 is_stmt 0 view .LVU458
 1416 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1417              	.LCFI12:
 1418              		.cfi_def_cfa_offset 24
 1419              		.cfi_offset 3, -24
 1420              		.cfi_offset 4, -20
 1421              		.cfi_offset 5, -16
 1422              		.cfi_offset 6, -12
 1423              		.cfi_offset 7, -8
 1424              		.cfi_offset 14, -4
 1425 0002 0F46     		mov	r7, r1
 1426 0004 1646     		mov	r6, r2
1098:RTT/SEGGER_RTT.c ****   unsigned              Status;
 1427              		.loc 1 1098 3 is_stmt 1 view .LVU459
1099:RTT/SEGGER_RTT.c ****   unsigned              Avail;
 1428              		.loc 1 1099 3 view .LVU460
1100:RTT/SEGGER_RTT.c ****   const char*           pData;
 1429              		.loc 1 1100 3 view .LVU461
1101:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1430              		.loc 1 1101 3 view .LVU462
1102:RTT/SEGGER_RTT.c ****   //
1103:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1104:RTT/SEGGER_RTT.c ****   //
1105:RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1431              		.loc 1 1105 3 view .LVU463
 1432              	.LVL162:
1106:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1433              		.loc 1 1106 3 view .LVU464
 1434              		.loc 1 1106 9 is_stmt 0 view .LVU465
 1435 0006 184B     		ldr	r3, .L89
 1436 0008 451C     		adds	r5, r0, #1
 1437 000a 05EB4505 		add	r5, r5, r5, lsl #1
 1438 000e 03EBC505 		add	r5, r3, r5, lsl #3
 1439              	.LVL163:
1107:RTT/SEGGER_RTT.c ****   //
1108:RTT/SEGGER_RTT.c ****   // How we output depends upon the mode...
1109:RTT/SEGGER_RTT.c ****   //
1110:RTT/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1440              		.loc 1 1110 3 is_stmt 1 view .LVU466
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 50


 1441              		.loc 1 1110 16 is_stmt 0 view .LVU467
 1442 0012 00EB4000 		add	r0, r0, r0, lsl #1
 1443              	.LVL164:
 1444              		.loc 1 1110 16 view .LVU468
 1445 0016 03EBC000 		add	r0, r3, r0, lsl #3
 1446 001a C46A     		ldr	r4, [r0, #44]
 1447              		.loc 1 1110 3 view .LVU469
 1448 001c 012C     		cmp	r4, #1
 1449 001e 11D0     		beq	.L83
 1450 0020 022C     		cmp	r4, #2
 1451 0022 1CD0     		beq	.L84
 1452 0024 14B1     		cbz	r4, .L88
 1453 0026 0024     		movs	r4, #0
 1454              	.LVL165:
1111:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1112:RTT/SEGGER_RTT.c ****     //
1113:RTT/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1114:RTT/SEGGER_RTT.c ****     // of this output, don't bother.
1115:RTT/SEGGER_RTT.c ****     //
1116:RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1117:RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
1118:RTT/SEGGER_RTT.c ****       Status = 0u;
1119:RTT/SEGGER_RTT.c ****     } else {
1120:RTT/SEGGER_RTT.c ****       Status = NumBytes;
1121:RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1122:RTT/SEGGER_RTT.c ****     }
1123:RTT/SEGGER_RTT.c ****     break;
1124:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1125:RTT/SEGGER_RTT.c ****     //
1126:RTT/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1127:RTT/SEGGER_RTT.c ****     //
1128:RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1129:RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
1130:RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
1131:RTT/SEGGER_RTT.c ****     break;
1132:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1133:RTT/SEGGER_RTT.c ****     //
1134:RTT/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1135:RTT/SEGGER_RTT.c ****     //
1136:RTT/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
1137:RTT/SEGGER_RTT.c ****     break;
1138:RTT/SEGGER_RTT.c ****   default:
1139:RTT/SEGGER_RTT.c ****     Status = 0u;
1140:RTT/SEGGER_RTT.c ****     break;
1141:RTT/SEGGER_RTT.c ****   }
1142:RTT/SEGGER_RTT.c ****   //
1143:RTT/SEGGER_RTT.c ****   // Finish up.
1144:RTT/SEGGER_RTT.c ****   //
1145:RTT/SEGGER_RTT.c ****   return Status;
 1455              		.loc 1 1145 3 is_stmt 1 view .LVU470
 1456              	.L82:
1146:RTT/SEGGER_RTT.c **** }
 1457              		.loc 1 1146 1 is_stmt 0 view .LVU471
 1458 0028 2046     		mov	r0, r4
 1459 002a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1460              	.LVL166:
 1461              	.L88:
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 51


1116:RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1462              		.loc 1 1116 5 is_stmt 1 view .LVU472
1116:RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1463              		.loc 1 1116 13 is_stmt 0 view .LVU473
 1464 002c 2846     		mov	r0, r5
 1465 002e FFF7FEFF 		bl	_GetAvailWriteSpace
 1466              	.LVL167:
1117:RTT/SEGGER_RTT.c ****       Status = 0u;
 1467              		.loc 1 1117 5 is_stmt 1 view .LVU474
1117:RTT/SEGGER_RTT.c ****       Status = 0u;
 1468              		.loc 1 1117 8 is_stmt 0 view .LVU475
 1469 0032 8642     		cmp	r6, r0
 1470 0034 F8D8     		bhi	.L82
1120:RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1471              		.loc 1 1120 7 is_stmt 1 view .LVU476
 1472              	.LVL168:
1121:RTT/SEGGER_RTT.c ****     }
 1473              		.loc 1 1121 7 view .LVU477
 1474 0036 3246     		mov	r2, r6
 1475 0038 3946     		mov	r1, r7
 1476 003a 2846     		mov	r0, r5
 1477              	.LVL169:
1121:RTT/SEGGER_RTT.c ****     }
 1478              		.loc 1 1121 7 is_stmt 0 view .LVU478
 1479 003c FFF7FEFF 		bl	_WriteNoCheck
 1480              	.LVL170:
1120:RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1481              		.loc 1 1120 14 view .LVU479
 1482 0040 3446     		mov	r4, r6
 1483 0042 F1E7     		b	.L82
 1484              	.LVL171:
 1485              	.L83:
1128:RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1486              		.loc 1 1128 5 is_stmt 1 view .LVU480
1128:RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1487              		.loc 1 1128 13 is_stmt 0 view .LVU481
 1488 0044 2846     		mov	r0, r5
 1489 0046 FFF7FEFF 		bl	_GetAvailWriteSpace
 1490              	.LVL172:
1129:RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1491              		.loc 1 1129 5 is_stmt 1 view .LVU482
1129:RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1492              		.loc 1 1129 12 is_stmt 0 view .LVU483
 1493 004a 3446     		mov	r4, r6
 1494 004c 8642     		cmp	r6, r0
 1495 004e 28BF     		it	cs
 1496 0050 0446     		movcs	r4, r0
 1497              	.LVL173:
1130:RTT/SEGGER_RTT.c ****     break;
 1498              		.loc 1 1130 5 is_stmt 1 view .LVU484
 1499 0052 2246     		mov	r2, r4
 1500 0054 3946     		mov	r1, r7
 1501 0056 2846     		mov	r0, r5
 1502              	.LVL174:
1130:RTT/SEGGER_RTT.c ****     break;
 1503              		.loc 1 1130 5 is_stmt 0 view .LVU485
 1504 0058 FFF7FEFF 		bl	_WriteNoCheck
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 52


 1505              	.LVL175:
1131:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 1506              		.loc 1 1131 5 is_stmt 1 view .LVU486
 1507 005c E4E7     		b	.L82
 1508              	.LVL176:
 1509              	.L84:
1136:RTT/SEGGER_RTT.c ****     break;
 1510              		.loc 1 1136 5 view .LVU487
1136:RTT/SEGGER_RTT.c ****     break;
 1511              		.loc 1 1136 14 is_stmt 0 view .LVU488
 1512 005e 2846     		mov	r0, r5
 1513 0060 FFF7FEFF 		bl	_WriteBlocking
 1514              	.LVL177:
1136:RTT/SEGGER_RTT.c ****     break;
 1515              		.loc 1 1136 14 view .LVU489
 1516 0064 0446     		mov	r4, r0
 1517              	.LVL178:
1137:RTT/SEGGER_RTT.c ****   default:
 1518              		.loc 1 1137 5 is_stmt 1 view .LVU490
 1519 0066 DFE7     		b	.L82
 1520              	.L90:
 1521              		.align	2
 1522              	.L89:
 1523 0068 00000000 		.word	.LANCHOR1
 1524              		.cfi_endproc
 1525              	.LFE11:
 1527              		.section	.text.SEGGER_RTT_WriteDownBuffer,"ax",%progbits
 1528              		.align	1
 1529              		.global	SEGGER_RTT_WriteDownBuffer
 1530              		.syntax unified
 1531              		.thumb
 1532              		.thumb_func
 1534              	SEGGER_RTT_WriteDownBuffer:
 1535              	.LVL179:
 1536              	.LFB12:
1147:RTT/SEGGER_RTT.c **** 
1148:RTT/SEGGER_RTT.c **** /*********************************************************************
1149:RTT/SEGGER_RTT.c **** *
1150:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBuffer
1151:RTT/SEGGER_RTT.c **** *
1152:RTT/SEGGER_RTT.c **** *  Function description
1153:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT control block in a <Down> buffer.
1154:RTT/SEGGER_RTT.c **** *
1155:RTT/SEGGER_RTT.c **** *  Parameters
1156:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1157:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1158:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1159:RTT/SEGGER_RTT.c **** *
1160:RTT/SEGGER_RTT.c **** *  Return value
1161:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
1162:RTT/SEGGER_RTT.c **** *
1163:RTT/SEGGER_RTT.c **** *  Notes
1164:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1165:RTT/SEGGER_RTT.c **** *
1166:RTT/SEGGER_RTT.c **** *  Additional information
1167:RTT/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1168:RTT/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 53


1169:RTT/SEGGER_RTT.c **** *    the write operation, writing from the application is also locked.
1170:RTT/SEGGER_RTT.c **** *    If only one consumer writes to the down buffer, 
1171:RTT/SEGGER_RTT.c **** *    call SEGGER_RTT_WriteDownBufferNoLock() instead.
1172:RTT/SEGGER_RTT.c **** */
1173:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1537              		.loc 1 1173 99 view -0
 1538              		.cfi_startproc
 1539              		@ args = 0, pretend = 0, frame = 0
 1540              		@ frame_needed = 0, uses_anonymous_args = 0
 1541              		.loc 1 1173 99 is_stmt 0 view .LVU492
 1542 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1543              	.LCFI13:
 1544              		.cfi_def_cfa_offset 24
 1545              		.cfi_offset 3, -24
 1546              		.cfi_offset 4, -20
 1547              		.cfi_offset 5, -16
 1548              		.cfi_offset 6, -12
 1549              		.cfi_offset 7, -8
 1550              		.cfi_offset 14, -4
 1551 0002 0446     		mov	r4, r0
 1552 0004 0D46     		mov	r5, r1
 1553 0006 1646     		mov	r6, r2
1174:RTT/SEGGER_RTT.c ****   unsigned Status;
 1554              		.loc 1 1174 3 is_stmt 1 view .LVU493
 1555              	.LBB8:
1175:RTT/SEGGER_RTT.c **** 
1176:RTT/SEGGER_RTT.c ****   INIT();
 1556              		.loc 1 1176 3 view .LVU494
 1557              		.loc 1 1176 3 view .LVU495
 1558              	.LVL180:
 1559              		.loc 1 1176 3 view .LVU496
 1560              		.loc 1 1176 3 view .LVU497
 1561 0008 094B     		ldr	r3, .L95
 1562 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1563 000c 6BB1     		cbz	r3, .L94
 1564              	.LVL181:
 1565              	.L92:
 1566              		.loc 1 1176 3 discriminator 3 view .LVU498
 1567              	.LBE8:
 1568              		.loc 1 1176 9 discriminator 3 view .LVU499
 1569              	.LBB9:
1177:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1570              		.loc 1 1177 3 discriminator 3 view .LVU500
 1571              		.loc 1 1177 3 discriminator 3 view .LVU501
 1572              		.syntax unified
 1573              	@ 1177 "RTT/SEGGER_RTT.c" 1
 1574 000e EFF31187 		mrs   r7, basepri  
 1575 0012 4FF02001 		mov   r1, #32       
 1576 0016 81F31188 		msr   basepri, r1  
 1577              		
 1578              	@ 0 "" 2
 1579              	.LVL182:
 1580              		.loc 1 1177 20 discriminator 3 view .LVU502
1178:RTT/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locki
 1581              		.loc 1 1178 3 discriminator 3 view .LVU503
 1582              		.loc 1 1178 12 is_stmt 0 discriminator 3 view .LVU504
 1583              		.thumb
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 54


 1584              		.syntax unified
 1585 001a 3246     		mov	r2, r6
 1586 001c 2946     		mov	r1, r5
 1587 001e 2046     		mov	r0, r4
 1588 0020 FFF7FEFF 		bl	SEGGER_RTT_WriteDownBufferNoLock
 1589              	.LVL183:
1179:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1590              		.loc 1 1179 3 is_stmt 1 discriminator 3 view .LVU505
 1591              		.syntax unified
 1592              	@ 1179 "RTT/SEGGER_RTT.c" 1
 1593 0024 87F31188 		msr   basepri, r7  
 1594              		
 1595              	@ 0 "" 2
 1596              		.thumb
 1597              		.syntax unified
 1598              	.LBE9:
 1599              		.loc 1 1179 22 discriminator 3 view .LVU506
1180:RTT/SEGGER_RTT.c ****   return Status;
 1600              		.loc 1 1180 3 discriminator 3 view .LVU507
1181:RTT/SEGGER_RTT.c **** }
 1601              		.loc 1 1181 1 is_stmt 0 discriminator 3 view .LVU508
 1602 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1603              	.LVL184:
 1604              	.L94:
 1605              	.LBB10:
1176:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1606              		.loc 1 1176 3 is_stmt 1 discriminator 1 view .LVU509
 1607 002a FFF7FEFF 		bl	_DoInit
 1608              	.LVL185:
1176:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1609              		.loc 1 1176 3 is_stmt 0 discriminator 1 view .LVU510
 1610 002e EEE7     		b	.L92
 1611              	.L96:
 1612              		.align	2
 1613              	.L95:
 1614 0030 00000000 		.word	.LANCHOR1
 1615              	.LBE10:
 1616              		.cfi_endproc
 1617              	.LFE12:
 1619              		.section	.text.SEGGER_RTT_Write,"ax",%progbits
 1620              		.align	1
 1621              		.global	SEGGER_RTT_Write
 1622              		.syntax unified
 1623              		.thumb
 1624              		.thumb_func
 1626              	SEGGER_RTT_Write:
 1627              	.LVL186:
 1628              	.LFB13:
1182:RTT/SEGGER_RTT.c **** 
1183:RTT/SEGGER_RTT.c **** /*********************************************************************
1184:RTT/SEGGER_RTT.c **** *
1185:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_Write
1186:RTT/SEGGER_RTT.c **** *
1187:RTT/SEGGER_RTT.c **** *  Function description
1188:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1189:RTT/SEGGER_RTT.c **** *    control block which is then read by the host.
1190:RTT/SEGGER_RTT.c **** *
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 55


1191:RTT/SEGGER_RTT.c **** *  Parameters
1192:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1193:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1194:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1195:RTT/SEGGER_RTT.c **** *
1196:RTT/SEGGER_RTT.c **** *  Return value
1197:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1198:RTT/SEGGER_RTT.c **** *
1199:RTT/SEGGER_RTT.c **** *  Notes
1200:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1201:RTT/SEGGER_RTT.c **** */
1202:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1629              		.loc 1 1202 89 is_stmt 1 view -0
 1630              		.cfi_startproc
 1631              		@ args = 0, pretend = 0, frame = 0
 1632              		@ frame_needed = 0, uses_anonymous_args = 0
 1633              		.loc 1 1202 89 is_stmt 0 view .LVU512
 1634 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1635              	.LCFI14:
 1636              		.cfi_def_cfa_offset 24
 1637              		.cfi_offset 3, -24
 1638              		.cfi_offset 4, -20
 1639              		.cfi_offset 5, -16
 1640              		.cfi_offset 6, -12
 1641              		.cfi_offset 7, -8
 1642              		.cfi_offset 14, -4
 1643 0002 0446     		mov	r4, r0
 1644 0004 0D46     		mov	r5, r1
 1645 0006 1646     		mov	r6, r2
1203:RTT/SEGGER_RTT.c ****   unsigned Status;
 1646              		.loc 1 1203 3 is_stmt 1 view .LVU513
 1647              	.LBB11:
1204:RTT/SEGGER_RTT.c **** 
1205:RTT/SEGGER_RTT.c ****   INIT();
 1648              		.loc 1 1205 3 view .LVU514
 1649              		.loc 1 1205 3 view .LVU515
 1650              	.LVL187:
 1651              		.loc 1 1205 3 view .LVU516
 1652              		.loc 1 1205 3 view .LVU517
 1653 0008 094B     		ldr	r3, .L101
 1654 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1655 000c 6BB1     		cbz	r3, .L100
 1656              	.LVL188:
 1657              	.L98:
 1658              		.loc 1 1205 3 discriminator 3 view .LVU518
 1659              	.LBE11:
 1660              		.loc 1 1205 9 discriminator 3 view .LVU519
 1661              	.LBB12:
1206:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1662              		.loc 1 1206 3 discriminator 3 view .LVU520
 1663              		.loc 1 1206 3 discriminator 3 view .LVU521
 1664              		.syntax unified
 1665              	@ 1206 "RTT/SEGGER_RTT.c" 1
 1666 000e EFF31187 		mrs   r7, basepri  
 1667 0012 4FF02001 		mov   r1, #32       
 1668 0016 81F31188 		msr   basepri, r1  
 1669              		
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 56


 1670              	@ 0 "" 2
 1671              	.LVL189:
 1672              		.loc 1 1206 20 discriminator 3 view .LVU522
1207:RTT/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write f
 1673              		.loc 1 1207 3 discriminator 3 view .LVU523
 1674              		.loc 1 1207 12 is_stmt 0 discriminator 3 view .LVU524
 1675              		.thumb
 1676              		.syntax unified
 1677 001a 3246     		mov	r2, r6
 1678 001c 2946     		mov	r1, r5
 1679 001e 2046     		mov	r0, r4
 1680 0020 FFF7FEFF 		bl	SEGGER_RTT_WriteNoLock
 1681              	.LVL190:
1208:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1682              		.loc 1 1208 3 is_stmt 1 discriminator 3 view .LVU525
 1683              		.syntax unified
 1684              	@ 1208 "RTT/SEGGER_RTT.c" 1
 1685 0024 87F31188 		msr   basepri, r7  
 1686              		
 1687              	@ 0 "" 2
 1688              		.thumb
 1689              		.syntax unified
 1690              	.LBE12:
 1691              		.loc 1 1208 22 discriminator 3 view .LVU526
1209:RTT/SEGGER_RTT.c ****   return Status;
 1692              		.loc 1 1209 3 discriminator 3 view .LVU527
1210:RTT/SEGGER_RTT.c **** }
 1693              		.loc 1 1210 1 is_stmt 0 discriminator 3 view .LVU528
 1694 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1695              	.LVL191:
 1696              	.L100:
 1697              	.LBB13:
1205:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1698              		.loc 1 1205 3 is_stmt 1 discriminator 1 view .LVU529
 1699 002a FFF7FEFF 		bl	_DoInit
 1700              	.LVL192:
1205:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1701              		.loc 1 1205 3 is_stmt 0 discriminator 1 view .LVU530
 1702 002e EEE7     		b	.L98
 1703              	.L102:
 1704              		.align	2
 1705              	.L101:
 1706 0030 00000000 		.word	.LANCHOR1
 1707              	.LBE13:
 1708              		.cfi_endproc
 1709              	.LFE13:
 1711              		.section	.text.SEGGER_RTT_WriteString,"ax",%progbits
 1712              		.align	1
 1713              		.global	SEGGER_RTT_WriteString
 1714              		.syntax unified
 1715              		.thumb
 1716              		.thumb_func
 1718              	SEGGER_RTT_WriteString:
 1719              	.LVL193:
 1720              	.LFB14:
1211:RTT/SEGGER_RTT.c **** 
1212:RTT/SEGGER_RTT.c **** /*********************************************************************
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 57


1213:RTT/SEGGER_RTT.c **** *
1214:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteString
1215:RTT/SEGGER_RTT.c **** *
1216:RTT/SEGGER_RTT.c **** *  Function description
1217:RTT/SEGGER_RTT.c **** *    Stores string in SEGGER RTT control block.
1218:RTT/SEGGER_RTT.c **** *    This data is read by the host.
1219:RTT/SEGGER_RTT.c **** *
1220:RTT/SEGGER_RTT.c **** *  Parameters
1221:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1222:RTT/SEGGER_RTT.c **** *    s            Pointer to string.
1223:RTT/SEGGER_RTT.c **** *
1224:RTT/SEGGER_RTT.c **** *  Return value
1225:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1226:RTT/SEGGER_RTT.c **** *
1227:RTT/SEGGER_RTT.c **** *  Notes
1228:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1229:RTT/SEGGER_RTT.c **** *    (2) String passed to this function has to be \0 terminated
1230:RTT/SEGGER_RTT.c **** *    (3) \0 termination character is *not* stored in RTT buffer
1231:RTT/SEGGER_RTT.c **** */
1232:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 1721              		.loc 1 1232 70 is_stmt 1 view -0
 1722              		.cfi_startproc
 1723              		@ args = 0, pretend = 0, frame = 0
 1724              		@ frame_needed = 0, uses_anonymous_args = 0
 1725              		.loc 1 1232 70 is_stmt 0 view .LVU532
 1726 0000 38B5     		push	{r3, r4, r5, lr}
 1727              	.LCFI15:
 1728              		.cfi_def_cfa_offset 16
 1729              		.cfi_offset 3, -16
 1730              		.cfi_offset 4, -12
 1731              		.cfi_offset 5, -8
 1732              		.cfi_offset 14, -4
 1733 0002 0546     		mov	r5, r0
 1734 0004 0C46     		mov	r4, r1
1233:RTT/SEGGER_RTT.c ****   unsigned Len;
 1735              		.loc 1 1233 3 is_stmt 1 view .LVU533
1234:RTT/SEGGER_RTT.c **** 
1235:RTT/SEGGER_RTT.c ****   Len = STRLEN(s);
 1736              		.loc 1 1235 3 view .LVU534
 1737              		.loc 1 1235 9 is_stmt 0 view .LVU535
 1738 0006 0846     		mov	r0, r1
 1739              	.LVL194:
 1740              		.loc 1 1235 9 view .LVU536
 1741 0008 FFF7FEFF 		bl	strlen
 1742              	.LVL195:
 1743              		.loc 1 1235 9 view .LVU537
 1744 000c 0246     		mov	r2, r0
 1745              	.LVL196:
1236:RTT/SEGGER_RTT.c ****   return SEGGER_RTT_Write(BufferIndex, s, Len);
 1746              		.loc 1 1236 3 is_stmt 1 view .LVU538
 1747              		.loc 1 1236 10 is_stmt 0 view .LVU539
 1748 000e 2146     		mov	r1, r4
 1749 0010 2846     		mov	r0, r5
 1750              	.LVL197:
 1751              		.loc 1 1236 10 view .LVU540
 1752 0012 FFF7FEFF 		bl	SEGGER_RTT_Write
 1753              	.LVL198:
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 58


1237:RTT/SEGGER_RTT.c **** }
 1754              		.loc 1 1237 1 view .LVU541
 1755 0016 38BD     		pop	{r3, r4, r5, pc}
 1756              		.loc 1 1237 1 view .LVU542
 1757              		.cfi_endproc
 1758              	.LFE14:
 1760              		.section	.text.SEGGER_RTT_PutCharSkipNoLock,"ax",%progbits
 1761              		.align	1
 1762              		.global	SEGGER_RTT_PutCharSkipNoLock
 1763              		.syntax unified
 1764              		.thumb
 1765              		.thumb_func
 1767              	SEGGER_RTT_PutCharSkipNoLock:
 1768              	.LVL199:
 1769              	.LFB15:
1238:RTT/SEGGER_RTT.c **** 
1239:RTT/SEGGER_RTT.c **** /*********************************************************************
1240:RTT/SEGGER_RTT.c **** *
1241:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkipNoLock
1242:RTT/SEGGER_RTT.c **** *
1243:RTT/SEGGER_RTT.c **** *  Function description
1244:RTT/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1245:RTT/SEGGER_RTT.c **** *    SEGGER_RTT_PutCharSkipNoLock does not lock the application and
1246:RTT/SEGGER_RTT.c **** *    skips the byte, if it does not fit into the buffer.
1247:RTT/SEGGER_RTT.c **** *
1248:RTT/SEGGER_RTT.c **** *  Parameters
1249:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1250:RTT/SEGGER_RTT.c **** *    c            Byte to be stored.
1251:RTT/SEGGER_RTT.c **** *
1252:RTT/SEGGER_RTT.c **** *  Return value
1253:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1254:RTT/SEGGER_RTT.c **** *
1255:RTT/SEGGER_RTT.c **** *  Notes
1256:RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1257:RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1258:RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1259:RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1260:RTT/SEGGER_RTT.c **** */
1261:RTT/SEGGER_RTT.c **** 
1262:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkipNoLock(unsigned BufferIndex, char c) {
 1770              		.loc 1 1262 69 is_stmt 1 view -0
 1771              		.cfi_startproc
 1772              		@ args = 0, pretend = 0, frame = 0
 1773              		@ frame_needed = 0, uses_anonymous_args = 0
 1774              		@ link register save eliminated.
 1775              		.loc 1 1262 69 is_stmt 0 view .LVU544
 1776 0000 30B4     		push	{r4, r5}
 1777              	.LCFI16:
 1778              		.cfi_def_cfa_offset 8
 1779              		.cfi_offset 4, -8
 1780              		.cfi_offset 5, -4
1263:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1781              		.loc 1 1263 3 is_stmt 1 view .LVU545
1264:RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 1782              		.loc 1 1264 3 view .LVU546
1265:RTT/SEGGER_RTT.c ****   unsigned              Status;
 1783              		.loc 1 1265 3 view .LVU547
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 59


1266:RTT/SEGGER_RTT.c ****   volatile char*        pDst;
 1784              		.loc 1 1266 3 view .LVU548
1267:RTT/SEGGER_RTT.c ****   //
1268:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1269:RTT/SEGGER_RTT.c ****   //
1270:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1785              		.loc 1 1270 3 view .LVU549
 1786              	.LVL200:
1271:RTT/SEGGER_RTT.c ****   //
1272:RTT/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1273:RTT/SEGGER_RTT.c ****   //
1274:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1787              		.loc 1 1274 3 view .LVU550
 1788              		.loc 1 1274 16 is_stmt 0 view .LVU551
 1789 0002 00EB4002 		add	r2, r0, r0, lsl #1
 1790 0006 114B     		ldr	r3, .L112
 1791 0008 03EBC203 		add	r3, r3, r2, lsl #3
 1792 000c 5D6A     		ldr	r5, [r3, #36]
 1793              		.loc 1 1274 9 view .LVU552
 1794 000e 6A1C     		adds	r2, r5, #1
 1795              	.LVL201:
1275:RTT/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1796              		.loc 1 1275 3 is_stmt 1 view .LVU553
 1797              		.loc 1 1275 21 is_stmt 0 view .LVU554
 1798 0010 1B6A     		ldr	r3, [r3, #32]
 1799              		.loc 1 1275 6 view .LVU555
 1800 0012 9342     		cmp	r3, r2
 1801 0014 16D0     		beq	.L111
 1802              	.LVL202:
 1803              	.L106:
1276:RTT/SEGGER_RTT.c ****     WrOff = 0;
1277:RTT/SEGGER_RTT.c ****   }
1278:RTT/SEGGER_RTT.c ****   //
1279:RTT/SEGGER_RTT.c ****   // Output byte if free space is available
1280:RTT/SEGGER_RTT.c ****   //
1281:RTT/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1804              		.loc 1 1281 3 is_stmt 1 view .LVU556
 1805              		.loc 1 1281 21 is_stmt 0 view .LVU557
 1806 0016 00EB4003 		add	r3, r0, r0, lsl #1
 1807 001a 0C4C     		ldr	r4, .L112
 1808 001c 04EBC303 		add	r3, r4, r3, lsl #3
 1809 0020 9B6A     		ldr	r3, [r3, #40]
 1810              		.loc 1 1281 6 view .LVU558
 1811 0022 9342     		cmp	r3, r2
 1812 0024 10D0     		beq	.L109
1282:RTT/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1813              		.loc 1 1282 5 is_stmt 1 view .LVU559
 1814              		.loc 1 1282 18 is_stmt 0 view .LVU560
 1815 0026 431C     		adds	r3, r0, #1
 1816 0028 03EB4303 		add	r3, r3, r3, lsl #1
 1817 002c 04EBC303 		add	r3, r4, r3, lsl #3
 1818 0030 5B68     		ldr	r3, [r3, #4]
 1819              	.LVL203:
1283:RTT/SEGGER_RTT.c ****     *pDst = c;
 1820              		.loc 1 1283 5 is_stmt 1 view .LVU561
 1821              		.loc 1 1283 11 is_stmt 0 view .LVU562
 1822 0032 5955     		strb	r1, [r3, r5]
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 60


1284:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 1823              		.loc 1 1284 15 is_stmt 1 view .LVU563
1285:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1824              		.loc 1 1285 5 view .LVU564
 1825              		.loc 1 1285 18 is_stmt 0 view .LVU565
 1826 0034 00EB4000 		add	r0, r0, r0, lsl #1
 1827              	.LVL204:
 1828              		.loc 1 1285 18 view .LVU566
 1829 0038 04EBC000 		add	r0, r4, r0, lsl #3
 1830 003c 4262     		str	r2, [r0, #36]
1286:RTT/SEGGER_RTT.c ****     Status = 1;
 1831              		.loc 1 1286 5 is_stmt 1 view .LVU567
 1832              	.LVL205:
 1833              		.loc 1 1286 12 is_stmt 0 view .LVU568
 1834 003e 0120     		movs	r0, #1
 1835              	.LVL206:
 1836              	.L105:
1287:RTT/SEGGER_RTT.c ****   } else {
1288:RTT/SEGGER_RTT.c ****     Status = 0;
1289:RTT/SEGGER_RTT.c ****   }
1290:RTT/SEGGER_RTT.c ****   //
1291:RTT/SEGGER_RTT.c ****   return Status;
1292:RTT/SEGGER_RTT.c **** }
 1837              		.loc 1 1292 1 view .LVU569
 1838 0040 30BC     		pop	{r4, r5}
 1839              	.LCFI17:
 1840              		.cfi_remember_state
 1841              		.cfi_restore 5
 1842              		.cfi_restore 4
 1843              		.cfi_def_cfa_offset 0
 1844 0042 7047     		bx	lr
 1845              	.LVL207:
 1846              	.L111:
 1847              	.LCFI18:
 1848              		.cfi_restore_state
1276:RTT/SEGGER_RTT.c ****   }
 1849              		.loc 1 1276 11 view .LVU570
 1850 0044 0022     		movs	r2, #0
 1851              	.LVL208:
1276:RTT/SEGGER_RTT.c ****   }
 1852              		.loc 1 1276 11 view .LVU571
 1853 0046 E6E7     		b	.L106
 1854              	.LVL209:
 1855              	.L109:
1288:RTT/SEGGER_RTT.c ****   }
 1856              		.loc 1 1288 12 view .LVU572
 1857 0048 0020     		movs	r0, #0
 1858              	.LVL210:
1291:RTT/SEGGER_RTT.c **** }
 1859              		.loc 1 1291 3 is_stmt 1 view .LVU573
1291:RTT/SEGGER_RTT.c **** }
 1860              		.loc 1 1291 10 is_stmt 0 view .LVU574
 1861 004a F9E7     		b	.L105
 1862              	.L113:
 1863              		.align	2
 1864              	.L112:
 1865 004c 00000000 		.word	.LANCHOR1
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 61


 1866              		.cfi_endproc
 1867              	.LFE15:
 1869              		.section	.text.SEGGER_RTT_PutCharSkip,"ax",%progbits
 1870              		.align	1
 1871              		.global	SEGGER_RTT_PutCharSkip
 1872              		.syntax unified
 1873              		.thumb
 1874              		.thumb_func
 1876              	SEGGER_RTT_PutCharSkip:
 1877              	.LVL211:
 1878              	.LFB16:
1293:RTT/SEGGER_RTT.c **** 
1294:RTT/SEGGER_RTT.c **** /*********************************************************************
1295:RTT/SEGGER_RTT.c **** *
1296:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkip
1297:RTT/SEGGER_RTT.c **** *
1298:RTT/SEGGER_RTT.c **** *  Function description
1299:RTT/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1300:RTT/SEGGER_RTT.c **** *
1301:RTT/SEGGER_RTT.c **** *  Parameters
1302:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1303:RTT/SEGGER_RTT.c **** *    c            Byte to be stored.
1304:RTT/SEGGER_RTT.c **** *
1305:RTT/SEGGER_RTT.c **** *  Return value
1306:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1307:RTT/SEGGER_RTT.c **** *
1308:RTT/SEGGER_RTT.c **** *  Notes
1309:RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1310:RTT/SEGGER_RTT.c **** */
1311:RTT/SEGGER_RTT.c **** 
1312:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkip(unsigned BufferIndex, char c) {
 1879              		.loc 1 1312 63 is_stmt 1 view -0
 1880              		.cfi_startproc
 1881              		@ args = 0, pretend = 0, frame = 0
 1882              		@ frame_needed = 0, uses_anonymous_args = 0
 1883              		.loc 1 1312 63 is_stmt 0 view .LVU576
 1884 0000 38B5     		push	{r3, r4, r5, lr}
 1885              	.LCFI19:
 1886              		.cfi_def_cfa_offset 16
 1887              		.cfi_offset 3, -16
 1888              		.cfi_offset 4, -12
 1889              		.cfi_offset 5, -8
 1890              		.cfi_offset 14, -4
 1891 0002 0446     		mov	r4, r0
 1892 0004 0D46     		mov	r5, r1
1313:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1893              		.loc 1 1313 3 is_stmt 1 view .LVU577
1314:RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 1894              		.loc 1 1314 3 view .LVU578
1315:RTT/SEGGER_RTT.c ****   unsigned              Status;
 1895              		.loc 1 1315 3 view .LVU579
1316:RTT/SEGGER_RTT.c ****   volatile char*        pDst;
 1896              		.loc 1 1316 3 view .LVU580
 1897              	.LBB14:
1317:RTT/SEGGER_RTT.c ****   //
1318:RTT/SEGGER_RTT.c ****   // Prepare
1319:RTT/SEGGER_RTT.c ****   //
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 62


1320:RTT/SEGGER_RTT.c ****   INIT();
 1898              		.loc 1 1320 3 view .LVU581
 1899              		.loc 1 1320 3 view .LVU582
 1900              	.LVL212:
 1901              		.loc 1 1320 3 view .LVU583
 1902              		.loc 1 1320 3 view .LVU584
 1903 0006 194B     		ldr	r3, .L123
 1904 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1905 000a 3BB3     		cbz	r3, .L121
 1906              	.LVL213:
 1907              	.L115:
 1908              		.loc 1 1320 3 discriminator 3 view .LVU585
 1909              	.LBE14:
 1910              		.loc 1 1320 9 discriminator 3 view .LVU586
 1911              	.LBB15:
1321:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1912              		.loc 1 1321 3 discriminator 3 view .LVU587
 1913              		.loc 1 1321 3 discriminator 3 view .LVU588
 1914              		.syntax unified
 1915              	@ 1321 "RTT/SEGGER_RTT.c" 1
 1916 000c EFF3118C 		mrs   ip, basepri  
 1917 0010 4FF02001 		mov   r1, #32       
 1918 0014 81F31188 		msr   basepri, r1  
 1919              		
 1920              	@ 0 "" 2
 1921              	.LVL214:
 1922              		.loc 1 1321 20 discriminator 3 view .LVU589
1322:RTT/SEGGER_RTT.c ****   //
1323:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1324:RTT/SEGGER_RTT.c ****   //
1325:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1923              		.loc 1 1325 3 discriminator 3 view .LVU590
1326:RTT/SEGGER_RTT.c ****   //
1327:RTT/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1328:RTT/SEGGER_RTT.c ****   //
1329:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1924              		.loc 1 1329 3 discriminator 3 view .LVU591
 1925              		.loc 1 1329 16 is_stmt 0 discriminator 3 view .LVU592
 1926              		.thumb
 1927              		.syntax unified
 1928 0018 04EB4403 		add	r3, r4, r4, lsl #1
 1929 001c 134A     		ldr	r2, .L123
 1930 001e 02EBC303 		add	r3, r2, r3, lsl #3
 1931 0022 586A     		ldr	r0, [r3, #36]
 1932              		.loc 1 1329 9 discriminator 3 view .LVU593
 1933 0024 421C     		adds	r2, r0, #1
 1934              	.LVL215:
1330:RTT/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1935              		.loc 1 1330 3 is_stmt 1 discriminator 3 view .LVU594
 1936              		.loc 1 1330 21 is_stmt 0 discriminator 3 view .LVU595
 1937 0026 1B6A     		ldr	r3, [r3, #32]
 1938              		.loc 1 1330 6 discriminator 3 view .LVU596
 1939 0028 9342     		cmp	r3, r2
 1940 002a 1AD0     		beq	.L122
 1941              	.LVL216:
 1942              	.L116:
1331:RTT/SEGGER_RTT.c ****     WrOff = 0;
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 63


1332:RTT/SEGGER_RTT.c ****   }
1333:RTT/SEGGER_RTT.c ****   //
1334:RTT/SEGGER_RTT.c ****   // Output byte if free space is available
1335:RTT/SEGGER_RTT.c ****   //
1336:RTT/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1943              		.loc 1 1336 3 is_stmt 1 view .LVU597
 1944              		.loc 1 1336 21 is_stmt 0 view .LVU598
 1945 002c 04EB4403 		add	r3, r4, r4, lsl #1
 1946 0030 0E49     		ldr	r1, .L123
 1947 0032 01EBC303 		add	r3, r1, r3, lsl #3
 1948 0036 9B6A     		ldr	r3, [r3, #40]
 1949              		.loc 1 1336 6 view .LVU599
 1950 0038 9342     		cmp	r3, r2
 1951 003a 14D0     		beq	.L119
1337:RTT/SEGGER_RTT.c ****     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1952              		.loc 1 1337 5 is_stmt 1 view .LVU600
 1953              		.loc 1 1337 19 is_stmt 0 view .LVU601
 1954 003c 631C     		adds	r3, r4, #1
 1955 003e 03EB4303 		add	r3, r3, r3, lsl #1
 1956 0042 01EBC303 		add	r3, r1, r3, lsl #3
 1957 0046 5B68     		ldr	r3, [r3, #4]
 1958              	.LVL217:
1338:RTT/SEGGER_RTT.c ****     *pDst = c;
 1959              		.loc 1 1338 5 is_stmt 1 view .LVU602
 1960              		.loc 1 1338 11 is_stmt 0 view .LVU603
 1961 0048 1D54     		strb	r5, [r3, r0]
1339:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 1962              		.loc 1 1339 15 is_stmt 1 view .LVU604
1340:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1963              		.loc 1 1340 5 view .LVU605
 1964              		.loc 1 1340 18 is_stmt 0 view .LVU606
 1965 004a 04EB4404 		add	r4, r4, r4, lsl #1
 1966              	.LVL218:
 1967              		.loc 1 1340 18 view .LVU607
 1968 004e 01EBC404 		add	r4, r1, r4, lsl #3
 1969 0052 6262     		str	r2, [r4, #36]
1341:RTT/SEGGER_RTT.c ****     Status = 1;
 1970              		.loc 1 1341 5 is_stmt 1 view .LVU608
 1971              	.LVL219:
 1972              		.loc 1 1341 12 is_stmt 0 view .LVU609
 1973 0054 0120     		movs	r0, #1
 1974              	.LVL220:
 1975              	.L117:
1342:RTT/SEGGER_RTT.c ****   } else {
1343:RTT/SEGGER_RTT.c ****     Status = 0;
1344:RTT/SEGGER_RTT.c ****   }
1345:RTT/SEGGER_RTT.c ****   //
1346:RTT/SEGGER_RTT.c ****   // Finish up.
1347:RTT/SEGGER_RTT.c ****   //
1348:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1976              		.loc 1 1348 3 is_stmt 1 view .LVU610
 1977              		.syntax unified
 1978              	@ 1348 "RTT/SEGGER_RTT.c" 1
 1979 0056 8CF31188 		msr   basepri, ip  
 1980              		
 1981              	@ 0 "" 2
 1982              		.thumb
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 64


 1983              		.syntax unified
 1984              	.LBE15:
 1985              		.loc 1 1348 22 view .LVU611
1349:RTT/SEGGER_RTT.c ****   //
1350:RTT/SEGGER_RTT.c ****   return Status;
 1986              		.loc 1 1350 3 view .LVU612
1351:RTT/SEGGER_RTT.c **** }
 1987              		.loc 1 1351 1 is_stmt 0 view .LVU613
 1988 005a 38BD     		pop	{r3, r4, r5, pc}
 1989              	.LVL221:
 1990              	.L121:
 1991              	.LBB16:
1320:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1992              		.loc 1 1320 3 is_stmt 1 discriminator 1 view .LVU614
 1993 005c FFF7FEFF 		bl	_DoInit
 1994              	.LVL222:
1320:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1995              		.loc 1 1320 3 is_stmt 0 discriminator 1 view .LVU615
 1996 0060 D4E7     		b	.L115
 1997              	.LVL223:
 1998              	.L122:
1320:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1999              		.loc 1 1320 3 discriminator 1 view .LVU616
 2000              	.LBE16:
 2001              	.LBB17:
1331:RTT/SEGGER_RTT.c ****   }
 2002              		.loc 1 1331 11 view .LVU617
 2003 0062 0022     		movs	r2, #0
 2004              	.LVL224:
1331:RTT/SEGGER_RTT.c ****   }
 2005              		.loc 1 1331 11 view .LVU618
 2006 0064 E2E7     		b	.L116
 2007              	.LVL225:
 2008              	.L119:
1343:RTT/SEGGER_RTT.c ****   }
 2009              		.loc 1 1343 12 view .LVU619
 2010 0066 0020     		movs	r0, #0
 2011 0068 F5E7     		b	.L117
 2012              	.L124:
 2013 006a 00BF     		.align	2
 2014              	.L123:
 2015 006c 00000000 		.word	.LANCHOR1
 2016              	.LBE17:
 2017              		.cfi_endproc
 2018              	.LFE16:
 2020              		.section	.text.SEGGER_RTT_PutChar,"ax",%progbits
 2021              		.align	1
 2022              		.global	SEGGER_RTT_PutChar
 2023              		.syntax unified
 2024              		.thumb
 2025              		.thumb_func
 2027              	SEGGER_RTT_PutChar:
 2028              	.LVL226:
 2029              	.LFB17:
1352:RTT/SEGGER_RTT.c **** 
1353:RTT/SEGGER_RTT.c ****  /*********************************************************************
1354:RTT/SEGGER_RTT.c **** *
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 65


1355:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_PutChar
1356:RTT/SEGGER_RTT.c **** *
1357:RTT/SEGGER_RTT.c **** *  Function description
1358:RTT/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1359:RTT/SEGGER_RTT.c **** *
1360:RTT/SEGGER_RTT.c **** *  Parameters
1361:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1362:RTT/SEGGER_RTT.c **** *    c            Byte to be stored.
1363:RTT/SEGGER_RTT.c **** *
1364:RTT/SEGGER_RTT.c **** *  Return value
1365:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1366:RTT/SEGGER_RTT.c **** *
1367:RTT/SEGGER_RTT.c **** *  Notes
1368:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1369:RTT/SEGGER_RTT.c **** */
1370:RTT/SEGGER_RTT.c **** 
1371:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutChar(unsigned BufferIndex, char c) {
 2030              		.loc 1 1371 59 is_stmt 1 view -0
 2031              		.cfi_startproc
 2032              		@ args = 0, pretend = 0, frame = 0
 2033              		@ frame_needed = 0, uses_anonymous_args = 0
 2034              		.loc 1 1371 59 is_stmt 0 view .LVU621
 2035 0000 38B5     		push	{r3, r4, r5, lr}
 2036              	.LCFI20:
 2037              		.cfi_def_cfa_offset 16
 2038              		.cfi_offset 3, -16
 2039              		.cfi_offset 4, -12
 2040              		.cfi_offset 5, -8
 2041              		.cfi_offset 14, -4
 2042 0002 0446     		mov	r4, r0
 2043 0004 0D46     		mov	r5, r1
1372:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2044              		.loc 1 1372 3 is_stmt 1 view .LVU622
1373:RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 2045              		.loc 1 1373 3 view .LVU623
1374:RTT/SEGGER_RTT.c ****   unsigned              Status;
 2046              		.loc 1 1374 3 view .LVU624
1375:RTT/SEGGER_RTT.c ****   volatile char*        pDst;
 2047              		.loc 1 1375 3 view .LVU625
 2048              	.LBB18:
1376:RTT/SEGGER_RTT.c ****   //
1377:RTT/SEGGER_RTT.c ****   // Prepare
1378:RTT/SEGGER_RTT.c ****   //
1379:RTT/SEGGER_RTT.c ****   INIT();
 2049              		.loc 1 1379 3 view .LVU626
 2050              		.loc 1 1379 3 view .LVU627
 2051              	.LVL227:
 2052              		.loc 1 1379 3 view .LVU628
 2053              		.loc 1 1379 3 view .LVU629
 2054 0006 214B     		ldr	r3, .L136
 2055 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2056 000a 7BB3     		cbz	r3, .L134
 2057              	.LVL228:
 2058              	.L126:
 2059              		.loc 1 1379 3 discriminator 3 view .LVU630
 2060              	.LBE18:
 2061              		.loc 1 1379 9 discriminator 3 view .LVU631
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 66


 2062              	.LBB19:
1380:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2063              		.loc 1 1380 3 discriminator 3 view .LVU632
 2064              		.loc 1 1380 3 discriminator 3 view .LVU633
 2065              		.syntax unified
 2066              	@ 1380 "RTT/SEGGER_RTT.c" 1
 2067 000c EFF3118C 		mrs   ip, basepri  
 2068 0010 4FF02001 		mov   r1, #32       
 2069 0014 81F31188 		msr   basepri, r1  
 2070              		
 2071              	@ 0 "" 2
 2072              	.LVL229:
 2073              		.loc 1 1380 20 discriminator 3 view .LVU634
1381:RTT/SEGGER_RTT.c ****   //
1382:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1383:RTT/SEGGER_RTT.c ****   //
1384:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 2074              		.loc 1 1384 3 discriminator 3 view .LVU635
1385:RTT/SEGGER_RTT.c ****   //
1386:RTT/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1387:RTT/SEGGER_RTT.c ****   //
1388:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 2075              		.loc 1 1388 3 discriminator 3 view .LVU636
 2076              		.loc 1 1388 16 is_stmt 0 discriminator 3 view .LVU637
 2077              		.thumb
 2078              		.syntax unified
 2079 0018 04EB4403 		add	r3, r4, r4, lsl #1
 2080 001c 1B4A     		ldr	r2, .L136
 2081 001e 02EBC303 		add	r3, r2, r3, lsl #3
 2082 0022 596A     		ldr	r1, [r3, #36]
 2083              		.loc 1 1388 9 discriminator 3 view .LVU638
 2084 0024 481C     		adds	r0, r1, #1
 2085              	.LVL230:
1389:RTT/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2086              		.loc 1 1389 3 is_stmt 1 discriminator 3 view .LVU639
 2087              		.loc 1 1389 21 is_stmt 0 discriminator 3 view .LVU640
 2088 0026 1B6A     		ldr	r3, [r3, #32]
 2089              		.loc 1 1389 6 discriminator 3 view .LVU641
 2090 0028 8342     		cmp	r3, r0
 2091 002a 22D0     		beq	.L135
 2092              	.LVL231:
 2093              	.L127:
1390:RTT/SEGGER_RTT.c ****     WrOff = 0;
1391:RTT/SEGGER_RTT.c ****   }
1392:RTT/SEGGER_RTT.c ****   //
1393:RTT/SEGGER_RTT.c ****   // Wait for free space if mode is set to blocking
1394:RTT/SEGGER_RTT.c ****   //
1395:RTT/SEGGER_RTT.c ****   if (pRing->Flags == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 2094              		.loc 1 1395 3 is_stmt 1 view .LVU642
 2095              		.loc 1 1395 12 is_stmt 0 view .LVU643
 2096 002c 04EB4403 		add	r3, r4, r4, lsl #1
 2097 0030 164A     		ldr	r2, .L136
 2098 0032 02EBC303 		add	r3, r2, r3, lsl #3
 2099 0036 DB6A     		ldr	r3, [r3, #44]
 2100              		.loc 1 1395 6 view .LVU644
 2101 0038 022B     		cmp	r3, #2
 2102 003a 1CD0     		beq	.L129
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 67


 2103              	.L128:
1396:RTT/SEGGER_RTT.c ****     while (WrOff == pRing->RdOff) {
1397:RTT/SEGGER_RTT.c ****       ;
1398:RTT/SEGGER_RTT.c ****     }
1399:RTT/SEGGER_RTT.c ****   }
1400:RTT/SEGGER_RTT.c ****   //
1401:RTT/SEGGER_RTT.c ****   // Output byte if free space is available
1402:RTT/SEGGER_RTT.c ****   //
1403:RTT/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 2104              		.loc 1 1403 3 is_stmt 1 view .LVU645
 2105              		.loc 1 1403 21 is_stmt 0 view .LVU646
 2106 003c 04EB4403 		add	r3, r4, r4, lsl #1
 2107 0040 124A     		ldr	r2, .L136
 2108 0042 02EBC303 		add	r3, r2, r3, lsl #3
 2109 0046 9B6A     		ldr	r3, [r3, #40]
 2110              		.loc 1 1403 6 view .LVU647
 2111 0048 8342     		cmp	r3, r0
 2112 004a 1DD0     		beq	.L132
1404:RTT/SEGGER_RTT.c ****     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 2113              		.loc 1 1404 5 is_stmt 1 view .LVU648
 2114              		.loc 1 1404 19 is_stmt 0 view .LVU649
 2115 004c 631C     		adds	r3, r4, #1
 2116 004e 03EB4303 		add	r3, r3, r3, lsl #1
 2117 0052 02EBC303 		add	r3, r2, r3, lsl #3
 2118 0056 5B68     		ldr	r3, [r3, #4]
 2119              	.LVL232:
1405:RTT/SEGGER_RTT.c ****     *pDst = c;
 2120              		.loc 1 1405 5 is_stmt 1 view .LVU650
 2121              		.loc 1 1405 11 is_stmt 0 view .LVU651
 2122 0058 5D54     		strb	r5, [r3, r1]
1406:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2123              		.loc 1 1406 15 is_stmt 1 view .LVU652
1407:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2124              		.loc 1 1407 5 view .LVU653
 2125              		.loc 1 1407 18 is_stmt 0 view .LVU654
 2126 005a 04EB4404 		add	r4, r4, r4, lsl #1
 2127              	.LVL233:
 2128              		.loc 1 1407 18 view .LVU655
 2129 005e 02EBC404 		add	r4, r2, r4, lsl #3
 2130 0062 6062     		str	r0, [r4, #36]
1408:RTT/SEGGER_RTT.c ****     Status = 1;
 2131              		.loc 1 1408 5 is_stmt 1 view .LVU656
 2132              	.LVL234:
 2133              		.loc 1 1408 12 is_stmt 0 view .LVU657
 2134 0064 0120     		movs	r0, #1
 2135              	.LVL235:
 2136              	.L130:
1409:RTT/SEGGER_RTT.c ****   } else {
1410:RTT/SEGGER_RTT.c ****     Status = 0;
1411:RTT/SEGGER_RTT.c ****   }
1412:RTT/SEGGER_RTT.c ****   //
1413:RTT/SEGGER_RTT.c ****   // Finish up.
1414:RTT/SEGGER_RTT.c ****   //
1415:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2137              		.loc 1 1415 3 is_stmt 1 view .LVU658
 2138              		.syntax unified
 2139              	@ 1415 "RTT/SEGGER_RTT.c" 1
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 68


 2140 0066 8CF31188 		msr   basepri, ip  
 2141              		
 2142              	@ 0 "" 2
 2143              		.thumb
 2144              		.syntax unified
 2145              	.LBE19:
 2146              		.loc 1 1415 22 view .LVU659
1416:RTT/SEGGER_RTT.c ****   return Status;
 2147              		.loc 1 1416 3 view .LVU660
1417:RTT/SEGGER_RTT.c **** }
 2148              		.loc 1 1417 1 is_stmt 0 view .LVU661
 2149 006a 38BD     		pop	{r3, r4, r5, pc}
 2150              	.LVL236:
 2151              	.L134:
 2152              	.LBB20:
1379:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2153              		.loc 1 1379 3 is_stmt 1 discriminator 1 view .LVU662
 2154 006c FFF7FEFF 		bl	_DoInit
 2155              	.LVL237:
1379:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2156              		.loc 1 1379 3 is_stmt 0 discriminator 1 view .LVU663
 2157 0070 CCE7     		b	.L126
 2158              	.LVL238:
 2159              	.L135:
1379:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2160              		.loc 1 1379 3 discriminator 1 view .LVU664
 2161              	.LBE20:
 2162              	.LBB21:
1390:RTT/SEGGER_RTT.c ****   }
 2163              		.loc 1 1390 11 view .LVU665
 2164 0072 0020     		movs	r0, #0
 2165              	.LVL239:
1390:RTT/SEGGER_RTT.c ****   }
 2166              		.loc 1 1390 11 view .LVU666
 2167 0074 DAE7     		b	.L127
 2168              	.LVL240:
 2169              	.L129:
1397:RTT/SEGGER_RTT.c ****     }
 2170              		.loc 1 1397 7 is_stmt 1 discriminator 1 view .LVU667
1396:RTT/SEGGER_RTT.c ****       ;
 2171              		.loc 1 1396 11 discriminator 1 view .LVU668
1396:RTT/SEGGER_RTT.c ****       ;
 2172              		.loc 1 1396 26 is_stmt 0 discriminator 1 view .LVU669
 2173 0076 04EB4403 		add	r3, r4, r4, lsl #1
 2174 007a 044A     		ldr	r2, .L136
 2175 007c 02EBC303 		add	r3, r2, r3, lsl #3
 2176 0080 9B6A     		ldr	r3, [r3, #40]
1396:RTT/SEGGER_RTT.c ****       ;
 2177              		.loc 1 1396 11 discriminator 1 view .LVU670
 2178 0082 8342     		cmp	r3, r0
 2179 0084 F7D0     		beq	.L129
 2180 0086 D9E7     		b	.L128
 2181              	.L132:
1410:RTT/SEGGER_RTT.c ****   }
 2182              		.loc 1 1410 12 view .LVU671
 2183 0088 0020     		movs	r0, #0
 2184              	.LVL241:
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 69


1410:RTT/SEGGER_RTT.c ****   }
 2185              		.loc 1 1410 12 view .LVU672
 2186 008a ECE7     		b	.L130
 2187              	.L137:
 2188              		.align	2
 2189              	.L136:
 2190 008c 00000000 		.word	.LANCHOR1
 2191              	.LBE21:
 2192              		.cfi_endproc
 2193              	.LFE17:
 2195              		.section	.text.SEGGER_RTT_GetKey,"ax",%progbits
 2196              		.align	1
 2197              		.global	SEGGER_RTT_GetKey
 2198              		.syntax unified
 2199              		.thumb
 2200              		.thumb_func
 2202              	SEGGER_RTT_GetKey:
 2203              	.LFB18:
1418:RTT/SEGGER_RTT.c **** 
1419:RTT/SEGGER_RTT.c **** /*********************************************************************
1420:RTT/SEGGER_RTT.c **** *
1421:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_GetKey
1422:RTT/SEGGER_RTT.c **** *
1423:RTT/SEGGER_RTT.c **** *  Function description
1424:RTT/SEGGER_RTT.c **** *    Reads one character from the SEGGER RTT buffer.
1425:RTT/SEGGER_RTT.c **** *    Host has previously stored data there.
1426:RTT/SEGGER_RTT.c **** *
1427:RTT/SEGGER_RTT.c **** *  Return value
1428:RTT/SEGGER_RTT.c **** *    <  0 -   No character available (buffer empty).
1429:RTT/SEGGER_RTT.c **** *    >= 0 -   Character which has been read. (Possible values: 0 - 255)
1430:RTT/SEGGER_RTT.c **** *
1431:RTT/SEGGER_RTT.c **** *  Notes
1432:RTT/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0.
1433:RTT/SEGGER_RTT.c **** */
1434:RTT/SEGGER_RTT.c **** int SEGGER_RTT_GetKey(void) {
 2204              		.loc 1 1434 29 is_stmt 1 view -0
 2205              		.cfi_startproc
 2206              		@ args = 0, pretend = 0, frame = 8
 2207              		@ frame_needed = 0, uses_anonymous_args = 0
 2208 0000 00B5     		push	{lr}
 2209              	.LCFI21:
 2210              		.cfi_def_cfa_offset 4
 2211              		.cfi_offset 14, -4
 2212 0002 83B0     		sub	sp, sp, #12
 2213              	.LCFI22:
 2214              		.cfi_def_cfa_offset 16
1435:RTT/SEGGER_RTT.c ****   char c;
 2215              		.loc 1 1435 3 view .LVU674
1436:RTT/SEGGER_RTT.c ****   int r;
 2216              		.loc 1 1436 3 view .LVU675
1437:RTT/SEGGER_RTT.c **** 
1438:RTT/SEGGER_RTT.c ****   r = (int)SEGGER_RTT_Read(0u, &c, 1u);
 2217              		.loc 1 1438 3 view .LVU676
 2218              		.loc 1 1438 12 is_stmt 0 view .LVU677
 2219 0004 0122     		movs	r2, #1
 2220 0006 0DF10701 		add	r1, sp, #7
 2221 000a 0020     		movs	r0, #0
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 70


 2222 000c FFF7FEFF 		bl	SEGGER_RTT_Read
 2223              	.LVL242:
1439:RTT/SEGGER_RTT.c ****   if (r == 1) {
 2224              		.loc 1 1439 3 is_stmt 1 view .LVU678
 2225              		.loc 1 1439 6 is_stmt 0 view .LVU679
 2226 0010 0128     		cmp	r0, #1
 2227 0012 04D1     		bne	.L140
1440:RTT/SEGGER_RTT.c ****     r = (int)(unsigned char)c;
 2228              		.loc 1 1440 5 is_stmt 1 view .LVU680
 2229              		.loc 1 1440 9 is_stmt 0 view .LVU681
 2230 0014 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2231              	.LVL243:
 2232              	.L138:
1441:RTT/SEGGER_RTT.c ****   } else {
1442:RTT/SEGGER_RTT.c ****     r = -1;
1443:RTT/SEGGER_RTT.c ****   }
1444:RTT/SEGGER_RTT.c ****   return r;
1445:RTT/SEGGER_RTT.c **** }
 2233              		.loc 1 1445 1 view .LVU682
 2234 0018 03B0     		add	sp, sp, #12
 2235              	.LCFI23:
 2236              		.cfi_remember_state
 2237              		.cfi_def_cfa_offset 4
 2238              		@ sp needed
 2239 001a 5DF804FB 		ldr	pc, [sp], #4
 2240              	.LVL244:
 2241              	.L140:
 2242              	.LCFI24:
 2243              		.cfi_restore_state
1442:RTT/SEGGER_RTT.c ****   }
 2244              		.loc 1 1442 7 view .LVU683
 2245 001e 4FF0FF30 		mov	r0, #-1
 2246              	.LVL245:
1444:RTT/SEGGER_RTT.c **** }
 2247              		.loc 1 1444 3 is_stmt 1 view .LVU684
1444:RTT/SEGGER_RTT.c **** }
 2248              		.loc 1 1444 10 is_stmt 0 view .LVU685
 2249 0022 F9E7     		b	.L138
 2250              		.cfi_endproc
 2251              	.LFE18:
 2253              		.section	.text.SEGGER_RTT_WaitKey,"ax",%progbits
 2254              		.align	1
 2255              		.global	SEGGER_RTT_WaitKey
 2256              		.syntax unified
 2257              		.thumb
 2258              		.thumb_func
 2260              	SEGGER_RTT_WaitKey:
 2261              	.LFB19:
1446:RTT/SEGGER_RTT.c **** 
1447:RTT/SEGGER_RTT.c **** /*********************************************************************
1448:RTT/SEGGER_RTT.c **** *
1449:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WaitKey
1450:RTT/SEGGER_RTT.c **** *
1451:RTT/SEGGER_RTT.c **** *  Function description
1452:RTT/SEGGER_RTT.c **** *    Waits until at least one character is avaible in the SEGGER RTT buffer.
1453:RTT/SEGGER_RTT.c **** *    Once a character is available, it is read and this function returns.
1454:RTT/SEGGER_RTT.c **** *
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 71


1455:RTT/SEGGER_RTT.c **** *  Return value
1456:RTT/SEGGER_RTT.c **** *    >=0 -   Character which has been read.
1457:RTT/SEGGER_RTT.c **** *
1458:RTT/SEGGER_RTT.c **** *  Notes
1459:RTT/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1460:RTT/SEGGER_RTT.c **** *    (2) This function is blocking if no character is present in RTT buffer
1461:RTT/SEGGER_RTT.c **** */
1462:RTT/SEGGER_RTT.c **** int SEGGER_RTT_WaitKey(void) {
 2262              		.loc 1 1462 30 is_stmt 1 view -0
 2263              		.cfi_startproc
 2264              		@ args = 0, pretend = 0, frame = 0
 2265              		@ frame_needed = 0, uses_anonymous_args = 0
 2266 0000 08B5     		push	{r3, lr}
 2267              	.LCFI25:
 2268              		.cfi_def_cfa_offset 8
 2269              		.cfi_offset 3, -8
 2270              		.cfi_offset 14, -4
 2271              	.L143:
1463:RTT/SEGGER_RTT.c ****   int r;
 2272              		.loc 1 1463 3 discriminator 1 view .LVU687
1464:RTT/SEGGER_RTT.c **** 
1465:RTT/SEGGER_RTT.c ****   do {
 2273              		.loc 1 1465 3 discriminator 1 view .LVU688
1466:RTT/SEGGER_RTT.c ****     r = SEGGER_RTT_GetKey();
 2274              		.loc 1 1466 5 discriminator 1 view .LVU689
 2275              		.loc 1 1466 9 is_stmt 0 discriminator 1 view .LVU690
 2276 0002 FFF7FEFF 		bl	SEGGER_RTT_GetKey
 2277              	.LVL246:
1467:RTT/SEGGER_RTT.c ****   } while (r < 0);
 2278              		.loc 1 1467 11 is_stmt 1 discriminator 1 view .LVU691
 2279              		.loc 1 1467 3 is_stmt 0 discriminator 1 view .LVU692
 2280 0006 0028     		cmp	r0, #0
 2281              		.loc 1 1467 3 discriminator 1 view .LVU693
 2282 0008 FBDB     		blt	.L143
1468:RTT/SEGGER_RTT.c ****   return r;
 2283              		.loc 1 1468 3 is_stmt 1 view .LVU694
1469:RTT/SEGGER_RTT.c **** }
 2284              		.loc 1 1469 1 is_stmt 0 view .LVU695
 2285 000a 08BD     		pop	{r3, pc}
 2286              		.cfi_endproc
 2287              	.LFE19:
 2289              		.section	.text.SEGGER_RTT_HasKey,"ax",%progbits
 2290              		.align	1
 2291              		.global	SEGGER_RTT_HasKey
 2292              		.syntax unified
 2293              		.thumb
 2294              		.thumb_func
 2296              	SEGGER_RTT_HasKey:
 2297              	.LFB20:
1470:RTT/SEGGER_RTT.c **** 
1471:RTT/SEGGER_RTT.c **** /*********************************************************************
1472:RTT/SEGGER_RTT.c **** *
1473:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_HasKey
1474:RTT/SEGGER_RTT.c **** *
1475:RTT/SEGGER_RTT.c **** *  Function description
1476:RTT/SEGGER_RTT.c **** *    Checks if at least one character for reading is available in the SEGGER RTT buffer.
1477:RTT/SEGGER_RTT.c **** *
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 72


1478:RTT/SEGGER_RTT.c **** *  Return value
1479:RTT/SEGGER_RTT.c **** *    == 0 -     No characters are available to read.
1480:RTT/SEGGER_RTT.c **** *    == 1 -     At least one character is available.
1481:RTT/SEGGER_RTT.c **** *
1482:RTT/SEGGER_RTT.c **** *  Notes
1483:RTT/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1484:RTT/SEGGER_RTT.c **** */
1485:RTT/SEGGER_RTT.c **** int SEGGER_RTT_HasKey(void) {
 2298              		.loc 1 1485 29 is_stmt 1 view -0
 2299              		.cfi_startproc
 2300              		@ args = 0, pretend = 0, frame = 0
 2301              		@ frame_needed = 0, uses_anonymous_args = 0
 2302 0000 08B5     		push	{r3, lr}
 2303              	.LCFI26:
 2304              		.cfi_def_cfa_offset 8
 2305              		.cfi_offset 3, -8
 2306              		.cfi_offset 14, -4
1486:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 2307              		.loc 1 1486 3 view .LVU697
1487:RTT/SEGGER_RTT.c ****   unsigned RdOff;
 2308              		.loc 1 1487 3 view .LVU698
1488:RTT/SEGGER_RTT.c ****   int r;
 2309              		.loc 1 1488 3 view .LVU699
 2310              	.LBB22:
1489:RTT/SEGGER_RTT.c **** 
1490:RTT/SEGGER_RTT.c ****   INIT();
 2311              		.loc 1 1490 3 view .LVU700
 2312              		.loc 1 1490 3 view .LVU701
 2313              	.LVL247:
 2314              		.loc 1 1490 3 view .LVU702
 2315              		.loc 1 1490 3 view .LVU703
 2316 0002 074B     		ldr	r3, .L151
 2317 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2318 0006 33B1     		cbz	r3, .L150
 2319              	.L146:
 2320              		.loc 1 1490 3 discriminator 3 view .LVU704
 2321              	.LBE22:
 2322              		.loc 1 1490 9 discriminator 3 view .LVU705
1491:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  // Ac
 2323              		.loc 1 1491 3 discriminator 3 view .LVU706
 2324              	.LVL248:
1492:RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 2325              		.loc 1 1492 3 discriminator 3 view .LVU707
 2326              		.loc 1 1492 9 is_stmt 0 discriminator 3 view .LVU708
 2327 0008 054B     		ldr	r3, .L151
 2328 000a 1A6F     		ldr	r2, [r3, #112]
 2329              	.LVL249:
1493:RTT/SEGGER_RTT.c ****   if (RdOff != pRing->WrOff) {
 2330              		.loc 1 1493 3 is_stmt 1 discriminator 3 view .LVU709
 2331              		.loc 1 1493 21 is_stmt 0 discriminator 3 view .LVU710
 2332 000c DB6E     		ldr	r3, [r3, #108]
 2333              		.loc 1 1493 6 discriminator 3 view .LVU711
 2334 000e 9342     		cmp	r3, r2
 2335 0010 04D0     		beq	.L148
1494:RTT/SEGGER_RTT.c ****     r = 1;
 2336              		.loc 1 1494 7 view .LVU712
 2337 0012 0120     		movs	r0, #1
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 73


 2338              	.L145:
1495:RTT/SEGGER_RTT.c ****   } else {
1496:RTT/SEGGER_RTT.c ****     r = 0;
1497:RTT/SEGGER_RTT.c ****   }
1498:RTT/SEGGER_RTT.c ****   return r;
1499:RTT/SEGGER_RTT.c **** }
 2339              		.loc 1 1499 1 view .LVU713
 2340 0014 08BD     		pop	{r3, pc}
 2341              	.LVL250:
 2342              	.L150:
 2343              	.LBB23:
1490:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  // Ac
 2344              		.loc 1 1490 3 is_stmt 1 discriminator 1 view .LVU714
 2345 0016 FFF7FEFF 		bl	_DoInit
 2346              	.LVL251:
 2347 001a F5E7     		b	.L146
 2348              	.LVL252:
 2349              	.L148:
1490:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  // Ac
 2350              		.loc 1 1490 3 is_stmt 0 discriminator 1 view .LVU715
 2351              	.LBE23:
1496:RTT/SEGGER_RTT.c ****   }
 2352              		.loc 1 1496 7 view .LVU716
 2353 001c 0020     		movs	r0, #0
 2354              	.LVL253:
1498:RTT/SEGGER_RTT.c **** }
 2355              		.loc 1 1498 3 is_stmt 1 view .LVU717
1498:RTT/SEGGER_RTT.c **** }
 2356              		.loc 1 1498 10 is_stmt 0 view .LVU718
 2357 001e F9E7     		b	.L145
 2358              	.L152:
 2359              		.align	2
 2360              	.L151:
 2361 0020 00000000 		.word	.LANCHOR1
 2362              		.cfi_endproc
 2363              	.LFE20:
 2365              		.section	.text.SEGGER_RTT_HasData,"ax",%progbits
 2366              		.align	1
 2367              		.global	SEGGER_RTT_HasData
 2368              		.syntax unified
 2369              		.thumb
 2370              		.thumb_func
 2372              	SEGGER_RTT_HasData:
 2373              	.LVL254:
 2374              	.LFB21:
1500:RTT/SEGGER_RTT.c **** 
1501:RTT/SEGGER_RTT.c **** /*********************************************************************
1502:RTT/SEGGER_RTT.c **** *
1503:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_HasData
1504:RTT/SEGGER_RTT.c **** *
1505:RTT/SEGGER_RTT.c **** *  Function description
1506:RTT/SEGGER_RTT.c **** *    Check if there is data from the host in the given buffer.
1507:RTT/SEGGER_RTT.c **** *
1508:RTT/SEGGER_RTT.c **** *  Return value:
1509:RTT/SEGGER_RTT.c **** *  ==0:  No data
1510:RTT/SEGGER_RTT.c **** *  !=0:  Data in buffer
1511:RTT/SEGGER_RTT.c **** *
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 74


1512:RTT/SEGGER_RTT.c **** */
1513:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasData(unsigned BufferIndex) {
 2375              		.loc 1 1513 51 is_stmt 1 view -0
 2376              		.cfi_startproc
 2377              		@ args = 0, pretend = 0, frame = 0
 2378              		@ frame_needed = 0, uses_anonymous_args = 0
 2379              		@ link register save eliminated.
1514:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 2380              		.loc 1 1514 3 view .LVU720
1515:RTT/SEGGER_RTT.c ****   unsigned                v;
 2381              		.loc 1 1515 3 view .LVU721
1516:RTT/SEGGER_RTT.c **** 
1517:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 2382              		.loc 1 1517 3 view .LVU722
1518:RTT/SEGGER_RTT.c ****   v = pRing->WrOff;
 2383              		.loc 1 1518 3 view .LVU723
 2384              		.loc 1 1518 5 is_stmt 0 view .LVU724
 2385 0000 064B     		ldr	r3, .L154
 2386 0002 00EB4002 		add	r2, r0, r0, lsl #1
 2387 0006 03EBC202 		add	r2, r3, r2, lsl #3
 2388 000a D26E     		ldr	r2, [r2, #108]
 2389              	.LVL255:
1519:RTT/SEGGER_RTT.c ****   return v - pRing->RdOff;
 2390              		.loc 1 1519 3 is_stmt 1 view .LVU725
 2391              		.loc 1 1519 19 is_stmt 0 view .LVU726
 2392 000c 00EB4000 		add	r0, r0, r0, lsl #1
 2393              	.LVL256:
 2394              		.loc 1 1519 19 view .LVU727
 2395 0010 03EBC000 		add	r0, r3, r0, lsl #3
 2396 0014 006F     		ldr	r0, [r0, #112]
1520:RTT/SEGGER_RTT.c **** }
 2397              		.loc 1 1520 1 view .LVU728
 2398 0016 101A     		subs	r0, r2, r0
 2399 0018 7047     		bx	lr
 2400              	.L155:
 2401 001a 00BF     		.align	2
 2402              	.L154:
 2403 001c 00000000 		.word	.LANCHOR1
 2404              		.cfi_endproc
 2405              	.LFE21:
 2407              		.section	.text.SEGGER_RTT_HasDataUp,"ax",%progbits
 2408              		.align	1
 2409              		.global	SEGGER_RTT_HasDataUp
 2410              		.syntax unified
 2411              		.thumb
 2412              		.thumb_func
 2414              	SEGGER_RTT_HasDataUp:
 2415              	.LVL257:
 2416              	.LFB22:
1521:RTT/SEGGER_RTT.c **** 
1522:RTT/SEGGER_RTT.c **** /*********************************************************************
1523:RTT/SEGGER_RTT.c **** *
1524:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_HasDataUp
1525:RTT/SEGGER_RTT.c **** *
1526:RTT/SEGGER_RTT.c **** *  Function description
1527:RTT/SEGGER_RTT.c **** *    Check if there is data remaining to be sent in the given buffer.
1528:RTT/SEGGER_RTT.c **** *
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 75


1529:RTT/SEGGER_RTT.c **** *  Return value:
1530:RTT/SEGGER_RTT.c **** *  ==0:  No data
1531:RTT/SEGGER_RTT.c **** *  !=0:  Data in buffer
1532:RTT/SEGGER_RTT.c **** *
1533:RTT/SEGGER_RTT.c **** */
1534:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
 2417              		.loc 1 1534 53 is_stmt 1 view -0
 2418              		.cfi_startproc
 2419              		@ args = 0, pretend = 0, frame = 0
 2420              		@ frame_needed = 0, uses_anonymous_args = 0
 2421              		@ link register save eliminated.
1535:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2422              		.loc 1 1535 3 view .LVU730
1536:RTT/SEGGER_RTT.c ****   unsigned                v;
 2423              		.loc 1 1536 3 view .LVU731
1537:RTT/SEGGER_RTT.c **** 
1538:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 2424              		.loc 1 1538 3 view .LVU732
1539:RTT/SEGGER_RTT.c ****   v = pRing->RdOff;
 2425              		.loc 1 1539 3 view .LVU733
 2426              		.loc 1 1539 5 is_stmt 0 view .LVU734
 2427 0000 064B     		ldr	r3, .L157
 2428 0002 00EB4002 		add	r2, r0, r0, lsl #1
 2429 0006 03EBC202 		add	r2, r3, r2, lsl #3
 2430 000a 926A     		ldr	r2, [r2, #40]
 2431              	.LVL258:
1540:RTT/SEGGER_RTT.c ****   return pRing->WrOff - v;
 2432              		.loc 1 1540 3 is_stmt 1 view .LVU735
 2433              		.loc 1 1540 15 is_stmt 0 view .LVU736
 2434 000c 00EB4000 		add	r0, r0, r0, lsl #1
 2435              	.LVL259:
 2436              		.loc 1 1540 15 view .LVU737
 2437 0010 03EBC000 		add	r0, r3, r0, lsl #3
 2438 0014 406A     		ldr	r0, [r0, #36]
1541:RTT/SEGGER_RTT.c **** }
 2439              		.loc 1 1541 1 view .LVU738
 2440 0016 801A     		subs	r0, r0, r2
 2441 0018 7047     		bx	lr
 2442              	.L158:
 2443 001a 00BF     		.align	2
 2444              	.L157:
 2445 001c 00000000 		.word	.LANCHOR1
 2446              		.cfi_endproc
 2447              	.LFE22:
 2449              		.section	.text.SEGGER_RTT_AllocDownBuffer,"ax",%progbits
 2450              		.align	1
 2451              		.global	SEGGER_RTT_AllocDownBuffer
 2452              		.syntax unified
 2453              		.thumb
 2454              		.thumb_func
 2456              	SEGGER_RTT_AllocDownBuffer:
 2457              	.LVL260:
 2458              	.LFB23:
1542:RTT/SEGGER_RTT.c **** 
1543:RTT/SEGGER_RTT.c **** /*********************************************************************
1544:RTT/SEGGER_RTT.c **** *
1545:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_AllocDownBuffer
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 76


1546:RTT/SEGGER_RTT.c **** *
1547:RTT/SEGGER_RTT.c **** *  Function description
1548:RTT/SEGGER_RTT.c **** *    Run-time configuration of the next down-buffer (H->T).
1549:RTT/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1550:RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1551:RTT/SEGGER_RTT.c **** *
1552:RTT/SEGGER_RTT.c **** *  Parameters
1553:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1554:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1555:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1556:RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1557:RTT/SEGGER_RTT.c **** *
1558:RTT/SEGGER_RTT.c **** *  Return value
1559:RTT/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1560:RTT/SEGGER_RTT.c **** *     < 0 - Error
1561:RTT/SEGGER_RTT.c **** */
1562:RTT/SEGGER_RTT.c **** int SEGGER_RTT_AllocDownBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flag
 2459              		.loc 1 1562 103 is_stmt 1 view -0
 2460              		.cfi_startproc
 2461              		@ args = 0, pretend = 0, frame = 0
 2462              		@ frame_needed = 0, uses_anonymous_args = 0
 2463              		.loc 1 1562 103 is_stmt 0 view .LVU740
 2464 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2465              	.LCFI27:
 2466              		.cfi_def_cfa_offset 24
 2467              		.cfi_offset 4, -24
 2468              		.cfi_offset 5, -20
 2469              		.cfi_offset 6, -16
 2470              		.cfi_offset 7, -12
 2471              		.cfi_offset 8, -8
 2472              		.cfi_offset 14, -4
 2473 0004 8046     		mov	r8, r0
 2474 0006 0F46     		mov	r7, r1
 2475 0008 1646     		mov	r6, r2
 2476 000a 1D46     		mov	r5, r3
1563:RTT/SEGGER_RTT.c ****   int BufferIndex;
 2477              		.loc 1 1563 3 is_stmt 1 view .LVU741
1564:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2478              		.loc 1 1564 3 view .LVU742
 2479              	.LBB24:
1565:RTT/SEGGER_RTT.c **** 
1566:RTT/SEGGER_RTT.c ****   INIT();
 2480              		.loc 1 1566 3 view .LVU743
 2481              		.loc 1 1566 3 view .LVU744
 2482              	.LVL261:
 2483              		.loc 1 1566 3 view .LVU745
 2484              		.loc 1 1566 3 view .LVU746
 2485 000c 184B     		ldr	r3, .L167
 2486              	.LVL262:
 2487              		.loc 1 1566 3 is_stmt 0 view .LVU747
 2488 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2489 0010 3BB3     		cbz	r3, .L166
 2490              	.LVL263:
 2491              	.L160:
 2492              		.loc 1 1566 3 is_stmt 1 discriminator 3 view .LVU748
 2493              	.LBE24:
 2494              		.loc 1 1566 9 discriminator 3 view .LVU749
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 77


 2495              	.LBB25:
1567:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2496              		.loc 1 1567 3 discriminator 3 view .LVU750
 2497              		.loc 1 1567 3 discriminator 3 view .LVU751
 2498              		.syntax unified
 2499              	@ 1567 "RTT/SEGGER_RTT.c" 1
 2500 0012 EFF31182 		mrs   r2, basepri  
 2501 0016 4FF02001 		mov   r1, #32       
 2502 001a 81F31188 		msr   basepri, r1  
 2503              		
 2504              	@ 0 "" 2
 2505              	.LVL264:
 2506              		.loc 1 1567 20 discriminator 3 view .LVU752
1568:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2507              		.loc 1 1568 3 discriminator 3 view .LVU753
1569:RTT/SEGGER_RTT.c ****   BufferIndex = 0;
 2508              		.loc 1 1569 3 discriminator 3 view .LVU754
 2509              		.loc 1 1569 15 is_stmt 0 discriminator 3 view .LVU755
 2510              		.thumb
 2511              		.syntax unified
 2512 001e 0020     		movs	r0, #0
 2513              	.LVL265:
 2514              	.L162:
1570:RTT/SEGGER_RTT.c ****   do {
 2515              		.loc 1 1570 3 is_stmt 1 view .LVU756
1571:RTT/SEGGER_RTT.c ****     if (pRTTCB->aDown[BufferIndex].pBuffer == NULL) {
 2516              		.loc 1 1571 5 view .LVU757
 2517              		.loc 1 1571 35 is_stmt 0 view .LVU758
 2518 0020 00EB400C 		add	ip, r0, r0, lsl #1
 2519 0024 124C     		ldr	r4, .L167
 2520 0026 04EBCC0C 		add	ip, r4, ip, lsl #3
 2521 002a DCF86430 		ldr	r3, [ip, #100]
 2522              		.loc 1 1571 8 view .LVU759
 2523 002e 1BB1     		cbz	r3, .L161
1572:RTT/SEGGER_RTT.c ****       break;
1573:RTT/SEGGER_RTT.c ****     }
1574:RTT/SEGGER_RTT.c ****     BufferIndex++;
 2524              		.loc 1 1574 5 is_stmt 1 view .LVU760
 2525              		.loc 1 1574 16 is_stmt 0 view .LVU761
 2526 0030 0130     		adds	r0, r0, #1
 2527              	.LVL266:
1575:RTT/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumDownBuffers);
 2528              		.loc 1 1575 11 is_stmt 1 view .LVU762
 2529              		.loc 1 1575 32 is_stmt 0 view .LVU763
 2530 0032 6369     		ldr	r3, [r4, #20]
 2531              		.loc 1 1575 3 view .LVU764
 2532 0034 8342     		cmp	r3, r0
 2533 0036 F3DC     		bgt	.L162
 2534              	.L161:
1576:RTT/SEGGER_RTT.c ****   if (BufferIndex < pRTTCB->MaxNumDownBuffers) {
 2535              		.loc 1 1576 3 is_stmt 1 view .LVU765
 2536              		.loc 1 1576 27 is_stmt 0 view .LVU766
 2537 0038 0D4B     		ldr	r3, .L167
 2538 003a 5B69     		ldr	r3, [r3, #20]
 2539              		.loc 1 1576 6 view .LVU767
 2540 003c 8342     		cmp	r3, r0
 2541 003e 13DD     		ble	.L164
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 78


1577:RTT/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].sName        = sName;
 2542              		.loc 1 1577 5 is_stmt 1 view .LVU768
 2543              		.loc 1 1577 45 is_stmt 0 view .LVU769
 2544 0040 00EB4003 		add	r3, r0, r0, lsl #1
 2545 0044 0A49     		ldr	r1, .L167
 2546 0046 01EBC303 		add	r3, r1, r3, lsl #3
 2547 004a C3F86080 		str	r8, [r3, #96]
1578:RTT/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2548              		.loc 1 1578 5 is_stmt 1 view .LVU770
 2549              		.loc 1 1578 45 is_stmt 0 view .LVU771
 2550 004e 5F66     		str	r7, [r3, #100]
1579:RTT/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 2551              		.loc 1 1579 5 is_stmt 1 view .LVU772
 2552              		.loc 1 1579 45 is_stmt 0 view .LVU773
 2553 0050 9E66     		str	r6, [r3, #104]
1580:RTT/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 2554              		.loc 1 1580 5 is_stmt 1 view .LVU774
 2555              		.loc 1 1580 45 is_stmt 0 view .LVU775
 2556 0052 0021     		movs	r1, #0
 2557 0054 1967     		str	r1, [r3, #112]
1581:RTT/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 2558              		.loc 1 1581 5 is_stmt 1 view .LVU776
 2559              		.loc 1 1581 45 is_stmt 0 view .LVU777
 2560 0056 D966     		str	r1, [r3, #108]
1582:RTT/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].Flags        = Flags;
 2561              		.loc 1 1582 5 is_stmt 1 view .LVU778
 2562              		.loc 1 1582 45 is_stmt 0 view .LVU779
 2563 0058 5D67     		str	r5, [r3, #116]
1583:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2564              		.loc 1 1583 15 is_stmt 1 view .LVU780
 2565              	.LVL267:
 2566              	.L163:
1584:RTT/SEGGER_RTT.c ****   } else {
1585:RTT/SEGGER_RTT.c ****     BufferIndex = -1;
1586:RTT/SEGGER_RTT.c ****   }
1587:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2567              		.loc 1 1587 3 view .LVU781
 2568              		.syntax unified
 2569              	@ 1587 "RTT/SEGGER_RTT.c" 1
 2570 005a 82F31188 		msr   basepri, r2  
 2571              		
 2572              	@ 0 "" 2
 2573              		.thumb
 2574              		.syntax unified
 2575              	.LBE25:
 2576              		.loc 1 1587 22 view .LVU782
1588:RTT/SEGGER_RTT.c ****   return BufferIndex;
 2577              		.loc 1 1588 3 view .LVU783
1589:RTT/SEGGER_RTT.c **** }
 2578              		.loc 1 1589 1 is_stmt 0 view .LVU784
 2579 005e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2580              	.LVL268:
 2581              	.L166:
 2582              	.LBB26:
1566:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2583              		.loc 1 1566 3 is_stmt 1 discriminator 1 view .LVU785
 2584 0062 FFF7FEFF 		bl	_DoInit
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 79


 2585              	.LVL269:
1566:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2586              		.loc 1 1566 3 is_stmt 0 discriminator 1 view .LVU786
 2587 0066 D4E7     		b	.L160
 2588              	.LVL270:
 2589              	.L164:
1566:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2590              		.loc 1 1566 3 discriminator 1 view .LVU787
 2591              	.LBE26:
 2592              	.LBB27:
1585:RTT/SEGGER_RTT.c ****   }
 2593              		.loc 1 1585 17 view .LVU788
 2594 0068 4FF0FF30 		mov	r0, #-1
 2595              	.LVL271:
1585:RTT/SEGGER_RTT.c ****   }
 2596              		.loc 1 1585 17 view .LVU789
 2597 006c F5E7     		b	.L163
 2598              	.L168:
 2599 006e 00BF     		.align	2
 2600              	.L167:
 2601 0070 00000000 		.word	.LANCHOR1
 2602              	.LBE27:
 2603              		.cfi_endproc
 2604              	.LFE23:
 2606              		.section	.text.SEGGER_RTT_AllocUpBuffer,"ax",%progbits
 2607              		.align	1
 2608              		.global	SEGGER_RTT_AllocUpBuffer
 2609              		.syntax unified
 2610              		.thumb
 2611              		.thumb_func
 2613              	SEGGER_RTT_AllocUpBuffer:
 2614              	.LVL272:
 2615              	.LFB24:
1590:RTT/SEGGER_RTT.c **** 
1591:RTT/SEGGER_RTT.c **** /*********************************************************************
1592:RTT/SEGGER_RTT.c **** *
1593:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_AllocUpBuffer
1594:RTT/SEGGER_RTT.c **** *
1595:RTT/SEGGER_RTT.c **** *  Function description
1596:RTT/SEGGER_RTT.c **** *    Run-time configuration of the next up-buffer (T->H).
1597:RTT/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1598:RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1599:RTT/SEGGER_RTT.c **** *
1600:RTT/SEGGER_RTT.c **** *  Parameters
1601:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1602:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1603:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1604:RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1605:RTT/SEGGER_RTT.c **** *
1606:RTT/SEGGER_RTT.c **** *  Return value
1607:RTT/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1608:RTT/SEGGER_RTT.c **** *     < 0 - Error
1609:RTT/SEGGER_RTT.c **** */
1610:RTT/SEGGER_RTT.c **** int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags)
 2616              		.loc 1 1610 101 is_stmt 1 view -0
 2617              		.cfi_startproc
 2618              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 80


 2619              		@ frame_needed = 0, uses_anonymous_args = 0
 2620              		.loc 1 1610 101 is_stmt 0 view .LVU791
 2621 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2622              	.LCFI28:
 2623              		.cfi_def_cfa_offset 24
 2624              		.cfi_offset 3, -24
 2625              		.cfi_offset 4, -20
 2626              		.cfi_offset 5, -16
 2627              		.cfi_offset 6, -12
 2628              		.cfi_offset 7, -8
 2629              		.cfi_offset 14, -4
 2630 0002 0746     		mov	r7, r0
 2631 0004 0E46     		mov	r6, r1
 2632 0006 1546     		mov	r5, r2
 2633 0008 1C46     		mov	r4, r3
1611:RTT/SEGGER_RTT.c ****   int BufferIndex;
 2634              		.loc 1 1611 3 is_stmt 1 view .LVU792
1612:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2635              		.loc 1 1612 3 view .LVU793
 2636              	.LBB28:
1613:RTT/SEGGER_RTT.c **** 
1614:RTT/SEGGER_RTT.c ****   INIT();
 2637              		.loc 1 1614 3 view .LVU794
 2638              		.loc 1 1614 3 view .LVU795
 2639              	.LVL273:
 2640              		.loc 1 1614 3 view .LVU796
 2641              		.loc 1 1614 3 view .LVU797
 2642 000a 1E4B     		ldr	r3, .L177
 2643              	.LVL274:
 2644              		.loc 1 1614 3 is_stmt 0 view .LVU798
 2645 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2646 000e 002B     		cmp	r3, #0
 2647 0010 32D0     		beq	.L176
 2648              	.LVL275:
 2649              	.L170:
 2650              		.loc 1 1614 3 is_stmt 1 discriminator 3 view .LVU799
 2651              	.LBE28:
 2652              		.loc 1 1614 9 discriminator 3 view .LVU800
 2653              	.LBB29:
1615:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2654              		.loc 1 1615 3 discriminator 3 view .LVU801
 2655              		.loc 1 1615 3 discriminator 3 view .LVU802
 2656              		.syntax unified
 2657              	@ 1615 "RTT/SEGGER_RTT.c" 1
 2658 0012 EFF31182 		mrs   r2, basepri  
 2659 0016 4FF02001 		mov   r1, #32       
 2660 001a 81F31188 		msr   basepri, r1  
 2661              		
 2662              	@ 0 "" 2
 2663              	.LVL276:
 2664              		.loc 1 1615 20 discriminator 3 view .LVU803
1616:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2665              		.loc 1 1616 3 discriminator 3 view .LVU804
1617:RTT/SEGGER_RTT.c ****   BufferIndex = 0;
 2666              		.loc 1 1617 3 discriminator 3 view .LVU805
 2667              		.loc 1 1617 15 is_stmt 0 discriminator 3 view .LVU806
 2668              		.thumb
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 81


 2669              		.syntax unified
 2670 001e 0020     		movs	r0, #0
 2671              	.LVL277:
 2672              	.L172:
1618:RTT/SEGGER_RTT.c ****   do {
 2673              		.loc 1 1618 3 is_stmt 1 view .LVU807
1619:RTT/SEGGER_RTT.c ****     if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 2674              		.loc 1 1619 5 view .LVU808
 2675              		.loc 1 1619 33 is_stmt 0 view .LVU809
 2676 0020 00F1010C 		add	ip, r0, #1
 2677 0024 0CEB4C0C 		add	ip, ip, ip, lsl #1
 2678 0028 164B     		ldr	r3, .L177
 2679 002a 03EBCC0C 		add	ip, r3, ip, lsl #3
 2680 002e DCF80430 		ldr	r3, [ip, #4]
 2681              		.loc 1 1619 8 view .LVU810
 2682 0032 23B1     		cbz	r3, .L171
1620:RTT/SEGGER_RTT.c ****       break;
1621:RTT/SEGGER_RTT.c ****     }
1622:RTT/SEGGER_RTT.c ****     BufferIndex++;
 2683              		.loc 1 1622 5 is_stmt 1 view .LVU811
 2684              		.loc 1 1622 16 is_stmt 0 view .LVU812
 2685 0034 0130     		adds	r0, r0, #1
 2686              	.LVL278:
1623:RTT/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 2687              		.loc 1 1623 11 is_stmt 1 view .LVU813
 2688              		.loc 1 1623 32 is_stmt 0 view .LVU814
 2689 0036 134B     		ldr	r3, .L177
 2690 0038 1B69     		ldr	r3, [r3, #16]
 2691              		.loc 1 1623 3 view .LVU815
 2692 003a 8342     		cmp	r3, r0
 2693 003c F0DC     		bgt	.L172
 2694              	.L171:
1624:RTT/SEGGER_RTT.c ****   if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 2695              		.loc 1 1624 3 is_stmt 1 view .LVU816
 2696              		.loc 1 1624 27 is_stmt 0 view .LVU817
 2697 003e 114B     		ldr	r3, .L177
 2698 0040 1B69     		ldr	r3, [r3, #16]
 2699              		.loc 1 1624 6 view .LVU818
 2700 0042 8342     		cmp	r3, r0
 2701 0044 1BDD     		ble	.L174
1625:RTT/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].sName        = sName;
 2702              		.loc 1 1625 5 is_stmt 1 view .LVU819
 2703              		.loc 1 1625 43 is_stmt 0 view .LVU820
 2704 0046 0F4B     		ldr	r3, .L177
 2705 0048 411C     		adds	r1, r0, #1
 2706 004a 01EB410C 		add	ip, r1, r1, lsl #1
 2707 004e 4FEACC0C 		lsl	ip, ip, #3
 2708 0052 43F80C70 		str	r7, [r3, ip]
1626:RTT/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 2709              		.loc 1 1626 5 is_stmt 1 view .LVU821
 2710              		.loc 1 1626 43 is_stmt 0 view .LVU822
 2711 0056 01EB4101 		add	r1, r1, r1, lsl #1
 2712 005a 03EBC101 		add	r1, r3, r1, lsl #3
 2713 005e 4E60     		str	r6, [r1, #4]
1627:RTT/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 2714              		.loc 1 1627 5 is_stmt 1 view .LVU823
 2715              		.loc 1 1627 43 is_stmt 0 view .LVU824
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 82


 2716 0060 00EB4001 		add	r1, r0, r0, lsl #1
 2717 0064 03EBC103 		add	r3, r3, r1, lsl #3
 2718 0068 1D62     		str	r5, [r3, #32]
1628:RTT/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 2719              		.loc 1 1628 5 is_stmt 1 view .LVU825
 2720              		.loc 1 1628 43 is_stmt 0 view .LVU826
 2721 006a 0021     		movs	r1, #0
 2722 006c 9962     		str	r1, [r3, #40]
1629:RTT/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 2723              		.loc 1 1629 5 is_stmt 1 view .LVU827
 2724              		.loc 1 1629 43 is_stmt 0 view .LVU828
 2725 006e 5962     		str	r1, [r3, #36]
1630:RTT/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].Flags        = Flags;
 2726              		.loc 1 1630 5 is_stmt 1 view .LVU829
 2727              		.loc 1 1630 43 is_stmt 0 view .LVU830
 2728 0070 DC62     		str	r4, [r3, #44]
1631:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2729              		.loc 1 1631 15 is_stmt 1 view .LVU831
 2730              	.LVL279:
 2731              	.L173:
1632:RTT/SEGGER_RTT.c ****   } else {
1633:RTT/SEGGER_RTT.c ****     BufferIndex = -1;
1634:RTT/SEGGER_RTT.c ****   }
1635:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2732              		.loc 1 1635 3 view .LVU832
 2733              		.syntax unified
 2734              	@ 1635 "RTT/SEGGER_RTT.c" 1
 2735 0072 82F31188 		msr   basepri, r2  
 2736              		
 2737              	@ 0 "" 2
 2738              		.thumb
 2739              		.syntax unified
 2740              	.LBE29:
 2741              		.loc 1 1635 22 view .LVU833
1636:RTT/SEGGER_RTT.c ****   return BufferIndex;
 2742              		.loc 1 1636 3 view .LVU834
1637:RTT/SEGGER_RTT.c **** }
 2743              		.loc 1 1637 1 is_stmt 0 view .LVU835
 2744 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2745              	.LVL280:
 2746              	.L176:
 2747              	.LBB30:
1614:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2748              		.loc 1 1614 3 is_stmt 1 discriminator 1 view .LVU836
 2749 0078 FFF7FEFF 		bl	_DoInit
 2750              	.LVL281:
1614:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2751              		.loc 1 1614 3 is_stmt 0 discriminator 1 view .LVU837
 2752 007c C9E7     		b	.L170
 2753              	.LVL282:
 2754              	.L174:
1614:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2755              		.loc 1 1614 3 discriminator 1 view .LVU838
 2756              	.LBE30:
 2757              	.LBB31:
1633:RTT/SEGGER_RTT.c ****   }
 2758              		.loc 1 1633 17 view .LVU839
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 83


 2759 007e 4FF0FF30 		mov	r0, #-1
 2760              	.LVL283:
1633:RTT/SEGGER_RTT.c ****   }
 2761              		.loc 1 1633 17 view .LVU840
 2762 0082 F6E7     		b	.L173
 2763              	.L178:
 2764              		.align	2
 2765              	.L177:
 2766 0084 00000000 		.word	.LANCHOR1
 2767              	.LBE31:
 2768              		.cfi_endproc
 2769              	.LFE24:
 2771              		.section	.text.SEGGER_RTT_ConfigUpBuffer,"ax",%progbits
 2772              		.align	1
 2773              		.global	SEGGER_RTT_ConfigUpBuffer
 2774              		.syntax unified
 2775              		.thumb
 2776              		.thumb_func
 2778              	SEGGER_RTT_ConfigUpBuffer:
 2779              	.LVL284:
 2780              	.LFB25:
1638:RTT/SEGGER_RTT.c **** 
1639:RTT/SEGGER_RTT.c **** /*********************************************************************
1640:RTT/SEGGER_RTT.c **** *
1641:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigUpBuffer
1642:RTT/SEGGER_RTT.c **** *
1643:RTT/SEGGER_RTT.c **** *  Function description
1644:RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer (T->H).
1645:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1646:RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1647:RTT/SEGGER_RTT.c **** *
1648:RTT/SEGGER_RTT.c **** *  Parameters
1649:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1650:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1651:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1652:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1653:RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1654:RTT/SEGGER_RTT.c **** *
1655:RTT/SEGGER_RTT.c **** *  Return value
1656:RTT/SEGGER_RTT.c **** *    >= 0 - O.K.
1657:RTT/SEGGER_RTT.c **** *     < 0 - Error
1658:RTT/SEGGER_RTT.c **** *
1659:RTT/SEGGER_RTT.c **** *  Additional information
1660:RTT/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1661:RTT/SEGGER_RTT.c **** *    May only be called once per buffer.
1662:RTT/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1663:RTT/SEGGER_RTT.c **** */
1664:RTT/SEGGER_RTT.c **** int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Buff
 2781              		.loc 1 1664 124 is_stmt 1 view -0
 2782              		.cfi_startproc
 2783              		@ args = 4, pretend = 0, frame = 0
 2784              		@ frame_needed = 0, uses_anonymous_args = 0
 2785              		.loc 1 1664 124 is_stmt 0 view .LVU842
 2786 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2787              	.LCFI29:
 2788              		.cfi_def_cfa_offset 24
 2789              		.cfi_offset 4, -24
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 84


 2790              		.cfi_offset 5, -20
 2791              		.cfi_offset 6, -16
 2792              		.cfi_offset 7, -12
 2793              		.cfi_offset 8, -8
 2794              		.cfi_offset 14, -4
 2795 0004 0446     		mov	r4, r0
 2796 0006 8846     		mov	r8, r1
 2797 0008 1746     		mov	r7, r2
 2798 000a 1E46     		mov	r6, r3
1665:RTT/SEGGER_RTT.c ****   int r;
 2799              		.loc 1 1665 3 is_stmt 1 view .LVU843
1666:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2800              		.loc 1 1666 3 view .LVU844
1667:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
 2801              		.loc 1 1667 3 view .LVU845
 2802              	.LBB32:
1668:RTT/SEGGER_RTT.c **** 
1669:RTT/SEGGER_RTT.c ****   INIT();
 2803              		.loc 1 1669 3 view .LVU846
 2804              		.loc 1 1669 3 view .LVU847
 2805              	.LVL285:
 2806              		.loc 1 1669 3 view .LVU848
 2807              		.loc 1 1669 3 view .LVU849
 2808 000c 184B     		ldr	r3, .L186
 2809              	.LVL286:
 2810              		.loc 1 1669 3 is_stmt 0 view .LVU850
 2811 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2812 0010 43B3     		cbz	r3, .L185
 2813              	.LVL287:
 2814              	.L180:
 2815              		.loc 1 1669 3 is_stmt 1 discriminator 3 view .LVU851
 2816              	.LBE32:
 2817              		.loc 1 1669 9 discriminator 3 view .LVU852
1670:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2818              		.loc 1 1670 3 discriminator 3 view .LVU853
1671:RTT/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 2819              		.loc 1 1671 3 discriminator 3 view .LVU854
 2820              		.loc 1 1671 6 is_stmt 0 discriminator 3 view .LVU855
 2821 0012 022C     		cmp	r4, #2
 2822 0014 29D8     		bhi	.L183
 2823              	.LBB33:
1672:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2824              		.loc 1 1672 5 is_stmt 1 view .LVU856
 2825              		.loc 1 1672 5 view .LVU857
 2826              		.syntax unified
 2827              	@ 1672 "RTT/SEGGER_RTT.c" 1
 2828 0016 EFF31183 		mrs   r3, basepri  
 2829 001a 4FF02001 		mov   r1, #32       
 2830 001e 81F31188 		msr   basepri, r1  
 2831              		
 2832              	@ 0 "" 2
 2833              	.LVL288:
 2834              		.loc 1 1672 22 view .LVU858
1673:RTT/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 2835              		.loc 1 1673 5 view .LVU859
1674:RTT/SEGGER_RTT.c ****     if (BufferIndex) {
 2836              		.loc 1 1674 5 view .LVU860
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 85


 2837              		.loc 1 1674 8 is_stmt 0 view .LVU861
 2838              		.thumb
 2839              		.syntax unified
 2840 0022 9CB1     		cbz	r4, .L182
1675:RTT/SEGGER_RTT.c ****       pUp->sName        = sName;
 2841              		.loc 1 1675 7 is_stmt 1 view .LVU862
 2842              		.loc 1 1675 25 is_stmt 0 view .LVU863
 2843 0024 124D     		ldr	r5, .L186
 2844 0026 601C     		adds	r0, r4, #1
 2845 0028 00EB4002 		add	r2, r0, r0, lsl #1
 2846 002c D200     		lsls	r2, r2, #3
 2847 002e 45F80280 		str	r8, [r5, r2]
1676:RTT/SEGGER_RTT.c ****       pUp->pBuffer      = (char*)pBuffer;
 2848              		.loc 1 1676 7 is_stmt 1 view .LVU864
 2849              		.loc 1 1676 25 is_stmt 0 view .LVU865
 2850 0032 00EB4000 		add	r0, r0, r0, lsl #1
 2851 0036 05EBC000 		add	r0, r5, r0, lsl #3
 2852 003a 4760     		str	r7, [r0, #4]
1677:RTT/SEGGER_RTT.c ****       pUp->SizeOfBuffer = BufferSize;
 2853              		.loc 1 1677 7 is_stmt 1 view .LVU866
 2854              		.loc 1 1677 25 is_stmt 0 view .LVU867
 2855 003c 04EB4402 		add	r2, r4, r4, lsl #1
 2856 0040 05EBC202 		add	r2, r5, r2, lsl #3
 2857 0044 1662     		str	r6, [r2, #32]
1678:RTT/SEGGER_RTT.c ****       pUp->RdOff        = 0u;
 2858              		.loc 1 1678 7 is_stmt 1 view .LVU868
 2859              		.loc 1 1678 25 is_stmt 0 view .LVU869
 2860 0046 0021     		movs	r1, #0
 2861 0048 9162     		str	r1, [r2, #40]
1679:RTT/SEGGER_RTT.c ****       pUp->WrOff        = 0u;
 2862              		.loc 1 1679 7 is_stmt 1 view .LVU870
 2863              		.loc 1 1679 25 is_stmt 0 view .LVU871
 2864 004a 5162     		str	r1, [r2, #36]
 2865              	.L182:
1680:RTT/SEGGER_RTT.c ****     }
1681:RTT/SEGGER_RTT.c ****     pUp->Flags          = Flags;
 2866              		.loc 1 1681 5 is_stmt 1 view .LVU872
 2867              		.loc 1 1681 25 is_stmt 0 view .LVU873
 2868 004c 04EB4404 		add	r4, r4, r4, lsl #1
 2869              	.LVL289:
 2870              		.loc 1 1681 25 view .LVU874
 2871 0050 0748     		ldr	r0, .L186
 2872 0052 00EBC404 		add	r4, r0, r4, lsl #3
 2873 0056 069A     		ldr	r2, [sp, #24]
 2874 0058 E262     		str	r2, [r4, #44]
1682:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2875              		.loc 1 1682 5 is_stmt 1 view .LVU875
 2876              		.syntax unified
 2877              	@ 1682 "RTT/SEGGER_RTT.c" 1
 2878 005a 83F31188 		msr   basepri, r3  
 2879              		
 2880              	@ 0 "" 2
 2881              		.thumb
 2882              		.syntax unified
 2883              	.LBE33:
 2884              		.loc 1 1682 24 view .LVU876
1683:RTT/SEGGER_RTT.c ****     r =  0;
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 86


 2885              		.loc 1 1683 5 view .LVU877
 2886              	.LVL290:
 2887              		.loc 1 1683 7 is_stmt 0 view .LVU878
 2888 005e 0020     		movs	r0, #0
 2889              	.LVL291:
 2890              	.L179:
1684:RTT/SEGGER_RTT.c ****   } else {
1685:RTT/SEGGER_RTT.c ****     r = -1;
1686:RTT/SEGGER_RTT.c ****   }
1687:RTT/SEGGER_RTT.c ****   return r;
1688:RTT/SEGGER_RTT.c **** }
 2891              		.loc 1 1688 1 view .LVU879
 2892 0060 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2893              	.LVL292:
 2894              	.L185:
 2895              	.LBB34:
1669:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2896              		.loc 1 1669 3 is_stmt 1 discriminator 1 view .LVU880
 2897 0064 FFF7FEFF 		bl	_DoInit
 2898              	.LVL293:
1669:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2899              		.loc 1 1669 3 is_stmt 0 discriminator 1 view .LVU881
 2900 0068 D3E7     		b	.L180
 2901              	.LVL294:
 2902              	.L183:
1669:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2903              		.loc 1 1669 3 discriminator 1 view .LVU882
 2904              	.LBE34:
1685:RTT/SEGGER_RTT.c ****   }
 2905              		.loc 1 1685 7 view .LVU883
 2906 006a 4FF0FF30 		mov	r0, #-1
 2907              	.LVL295:
1687:RTT/SEGGER_RTT.c **** }
 2908              		.loc 1 1687 3 is_stmt 1 view .LVU884
1687:RTT/SEGGER_RTT.c **** }
 2909              		.loc 1 1687 10 is_stmt 0 view .LVU885
 2910 006e F7E7     		b	.L179
 2911              	.L187:
 2912              		.align	2
 2913              	.L186:
 2914 0070 00000000 		.word	.LANCHOR1
 2915              		.cfi_endproc
 2916              	.LFE25:
 2918              		.section	.text.SEGGER_RTT_ConfigDownBuffer,"ax",%progbits
 2919              		.align	1
 2920              		.global	SEGGER_RTT_ConfigDownBuffer
 2921              		.syntax unified
 2922              		.thumb
 2923              		.thumb_func
 2925              	SEGGER_RTT_ConfigDownBuffer:
 2926              	.LVL296:
 2927              	.LFB26:
1689:RTT/SEGGER_RTT.c **** 
1690:RTT/SEGGER_RTT.c **** /*********************************************************************
1691:RTT/SEGGER_RTT.c **** *
1692:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigDownBuffer
1693:RTT/SEGGER_RTT.c **** *
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 87


1694:RTT/SEGGER_RTT.c **** *  Function description
1695:RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific down-buffer (H->T).
1696:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1697:RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1698:RTT/SEGGER_RTT.c **** *
1699:RTT/SEGGER_RTT.c **** *  Parameters
1700:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1701:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1702:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1703:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1704:RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1705:RTT/SEGGER_RTT.c **** *
1706:RTT/SEGGER_RTT.c **** *  Return value
1707:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1708:RTT/SEGGER_RTT.c **** *     < 0  Error
1709:RTT/SEGGER_RTT.c **** *
1710:RTT/SEGGER_RTT.c **** *  Additional information
1711:RTT/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1712:RTT/SEGGER_RTT.c **** *    May only be called once per buffer.
1713:RTT/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1714:RTT/SEGGER_RTT.c **** */
1715:RTT/SEGGER_RTT.c **** int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Bu
 2928              		.loc 1 1715 126 is_stmt 1 view -0
 2929              		.cfi_startproc
 2930              		@ args = 4, pretend = 0, frame = 0
 2931              		@ frame_needed = 0, uses_anonymous_args = 0
 2932              		.loc 1 1715 126 is_stmt 0 view .LVU887
 2933 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2934              	.LCFI30:
 2935              		.cfi_def_cfa_offset 24
 2936              		.cfi_offset 4, -24
 2937              		.cfi_offset 5, -20
 2938              		.cfi_offset 6, -16
 2939              		.cfi_offset 7, -12
 2940              		.cfi_offset 8, -8
 2941              		.cfi_offset 14, -4
 2942 0004 0446     		mov	r4, r0
 2943 0006 0F46     		mov	r7, r1
 2944 0008 1646     		mov	r6, r2
 2945 000a 9846     		mov	r8, r3
1716:RTT/SEGGER_RTT.c ****   int r;
 2946              		.loc 1 1716 3 is_stmt 1 view .LVU888
1717:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2947              		.loc 1 1717 3 view .LVU889
1718:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
 2948              		.loc 1 1718 3 view .LVU890
 2949              	.LBB35:
1719:RTT/SEGGER_RTT.c **** 
1720:RTT/SEGGER_RTT.c ****   INIT();
 2950              		.loc 1 1720 3 view .LVU891
 2951              		.loc 1 1720 3 view .LVU892
 2952              	.LVL297:
 2953              		.loc 1 1720 3 view .LVU893
 2954              		.loc 1 1720 3 view .LVU894
 2955 000c 1448     		ldr	r0, .L195
 2956              	.LVL298:
 2957              		.loc 1 1720 3 is_stmt 0 view .LVU895
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 88


 2958 000e 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 2959 0010 00B3     		cbz	r0, .L194
 2960              	.LVL299:
 2961              	.L189:
 2962              		.loc 1 1720 3 is_stmt 1 discriminator 3 view .LVU896
 2963              	.LBE35:
 2964              		.loc 1 1720 9 discriminator 3 view .LVU897
1721:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2965              		.loc 1 1721 3 discriminator 3 view .LVU898
1722:RTT/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 2966              		.loc 1 1722 3 discriminator 3 view .LVU899
 2967              		.loc 1 1722 6 is_stmt 0 discriminator 3 view .LVU900
 2968 0012 022C     		cmp	r4, #2
 2969 0014 21D8     		bhi	.L192
 2970              	.LBB36:
1723:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2971              		.loc 1 1723 5 is_stmt 1 view .LVU901
 2972              		.loc 1 1723 5 view .LVU902
 2973              		.syntax unified
 2974              	@ 1723 "RTT/SEGGER_RTT.c" 1
 2975 0016 EFF31183 		mrs   r3, basepri  
 2976 001a 4FF02001 		mov   r1, #32       
 2977 001e 81F31188 		msr   basepri, r1  
 2978              		
 2979              	@ 0 "" 2
 2980              	.LVL300:
 2981              		.loc 1 1723 22 view .LVU903
1724:RTT/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 2982              		.loc 1 1724 5 view .LVU904
1725:RTT/SEGGER_RTT.c ****     if (BufferIndex) {
 2983              		.loc 1 1725 5 view .LVU905
 2984              		.loc 1 1725 8 is_stmt 0 view .LVU906
 2985              		.thumb
 2986              		.syntax unified
 2987 0022 5CB1     		cbz	r4, .L191
1726:RTT/SEGGER_RTT.c ****       pDown->sName        = sName;
 2988              		.loc 1 1726 7 is_stmt 1 view .LVU907
 2989              		.loc 1 1726 27 is_stmt 0 view .LVU908
 2990 0024 04EB4400 		add	r0, r4, r4, lsl #1
 2991 0028 0D4D     		ldr	r5, .L195
 2992 002a 05EBC000 		add	r0, r5, r0, lsl #3
 2993 002e 0766     		str	r7, [r0, #96]
1727:RTT/SEGGER_RTT.c ****       pDown->pBuffer      = (char*)pBuffer;
 2994              		.loc 1 1727 7 is_stmt 1 view .LVU909
 2995              		.loc 1 1727 27 is_stmt 0 view .LVU910
 2996 0030 4666     		str	r6, [r0, #100]
1728:RTT/SEGGER_RTT.c ****       pDown->SizeOfBuffer = BufferSize;
 2997              		.loc 1 1728 7 is_stmt 1 view .LVU911
 2998              		.loc 1 1728 27 is_stmt 0 view .LVU912
 2999 0032 C0F86880 		str	r8, [r0, #104]
1729:RTT/SEGGER_RTT.c ****       pDown->RdOff        = 0u;
 3000              		.loc 1 1729 7 is_stmt 1 view .LVU913
 3001              		.loc 1 1729 27 is_stmt 0 view .LVU914
 3002 0036 0022     		movs	r2, #0
 3003 0038 0267     		str	r2, [r0, #112]
1730:RTT/SEGGER_RTT.c ****       pDown->WrOff        = 0u;
 3004              		.loc 1 1730 7 is_stmt 1 view .LVU915
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 89


 3005              		.loc 1 1730 27 is_stmt 0 view .LVU916
 3006 003a C266     		str	r2, [r0, #108]
 3007              	.L191:
1731:RTT/SEGGER_RTT.c ****     }
1732:RTT/SEGGER_RTT.c ****     pDown->Flags          = Flags;
 3008              		.loc 1 1732 5 is_stmt 1 view .LVU917
 3009              		.loc 1 1732 27 is_stmt 0 view .LVU918
 3010 003c 04EB4404 		add	r4, r4, r4, lsl #1
 3011              	.LVL301:
 3012              		.loc 1 1732 27 view .LVU919
 3013 0040 0748     		ldr	r0, .L195
 3014 0042 00EBC404 		add	r4, r0, r4, lsl #3
 3015 0046 069A     		ldr	r2, [sp, #24]
 3016 0048 6267     		str	r2, [r4, #116]
1733:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 3017              		.loc 1 1733 15 is_stmt 1 view .LVU920
1734:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3018              		.loc 1 1734 5 view .LVU921
 3019              		.syntax unified
 3020              	@ 1734 "RTT/SEGGER_RTT.c" 1
 3021 004a 83F31188 		msr   basepri, r3  
 3022              		
 3023              	@ 0 "" 2
 3024              		.thumb
 3025              		.syntax unified
 3026              	.LBE36:
 3027              		.loc 1 1734 24 view .LVU922
1735:RTT/SEGGER_RTT.c ****     r =  0;
 3028              		.loc 1 1735 5 view .LVU923
 3029              	.LVL302:
 3030              		.loc 1 1735 7 is_stmt 0 view .LVU924
 3031 004e 0020     		movs	r0, #0
 3032              	.LVL303:
 3033              	.L188:
1736:RTT/SEGGER_RTT.c ****   } else {
1737:RTT/SEGGER_RTT.c ****     r = -1;
1738:RTT/SEGGER_RTT.c ****   }
1739:RTT/SEGGER_RTT.c ****   return r;
1740:RTT/SEGGER_RTT.c **** }
 3034              		.loc 1 1740 1 view .LVU925
 3035 0050 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3036              	.LVL304:
 3037              	.L194:
 3038              	.LBB37:
1720:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3039              		.loc 1 1720 3 is_stmt 1 discriminator 1 view .LVU926
 3040 0054 FFF7FEFF 		bl	_DoInit
 3041              	.LVL305:
1720:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3042              		.loc 1 1720 3 is_stmt 0 discriminator 1 view .LVU927
 3043 0058 DBE7     		b	.L189
 3044              	.LVL306:
 3045              	.L192:
1720:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3046              		.loc 1 1720 3 discriminator 1 view .LVU928
 3047              	.LBE37:
1737:RTT/SEGGER_RTT.c ****   }
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 90


 3048              		.loc 1 1737 7 view .LVU929
 3049 005a 4FF0FF30 		mov	r0, #-1
 3050              	.LVL307:
1739:RTT/SEGGER_RTT.c **** }
 3051              		.loc 1 1739 3 is_stmt 1 view .LVU930
1739:RTT/SEGGER_RTT.c **** }
 3052              		.loc 1 1739 10 is_stmt 0 view .LVU931
 3053 005e F7E7     		b	.L188
 3054              	.L196:
 3055              		.align	2
 3056              	.L195:
 3057 0060 00000000 		.word	.LANCHOR1
 3058              		.cfi_endproc
 3059              	.LFE26:
 3061              		.section	.text.SEGGER_RTT_SetNameUpBuffer,"ax",%progbits
 3062              		.align	1
 3063              		.global	SEGGER_RTT_SetNameUpBuffer
 3064              		.syntax unified
 3065              		.thumb
 3066              		.thumb_func
 3068              	SEGGER_RTT_SetNameUpBuffer:
 3069              	.LVL308:
 3070              	.LFB27:
1741:RTT/SEGGER_RTT.c **** 
1742:RTT/SEGGER_RTT.c **** /*********************************************************************
1743:RTT/SEGGER_RTT.c **** *
1744:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameUpBuffer
1745:RTT/SEGGER_RTT.c **** *
1746:RTT/SEGGER_RTT.c **** *  Function description
1747:RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer name (T->H).
1748:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1749:RTT/SEGGER_RTT.c **** *
1750:RTT/SEGGER_RTT.c **** *  Parameters
1751:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1752:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1753:RTT/SEGGER_RTT.c **** *
1754:RTT/SEGGER_RTT.c **** *  Return value
1755:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1756:RTT/SEGGER_RTT.c **** *     < 0  Error
1757:RTT/SEGGER_RTT.c **** */
1758:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetNameUpBuffer(unsigned BufferIndex, const char* sName) {
 3071              		.loc 1 1758 73 is_stmt 1 view -0
 3072              		.cfi_startproc
 3073              		@ args = 0, pretend = 0, frame = 0
 3074              		@ frame_needed = 0, uses_anonymous_args = 0
 3075              		.loc 1 1758 73 is_stmt 0 view .LVU933
 3076 0000 38B5     		push	{r3, r4, r5, lr}
 3077              	.LCFI31:
 3078              		.cfi_def_cfa_offset 16
 3079              		.cfi_offset 3, -16
 3080              		.cfi_offset 4, -12
 3081              		.cfi_offset 5, -8
 3082              		.cfi_offset 14, -4
 3083 0002 0446     		mov	r4, r0
 3084 0004 0D46     		mov	r5, r1
1759:RTT/SEGGER_RTT.c ****   int r;
 3085              		.loc 1 1759 3 is_stmt 1 view .LVU934
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 91


1760:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3086              		.loc 1 1760 3 view .LVU935
1761:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
 3087              		.loc 1 1761 3 view .LVU936
 3088              	.LBB38:
1762:RTT/SEGGER_RTT.c **** 
1763:RTT/SEGGER_RTT.c ****   INIT();
 3089              		.loc 1 1763 3 view .LVU937
 3090              		.loc 1 1763 3 view .LVU938
 3091              	.LVL309:
 3092              		.loc 1 1763 3 view .LVU939
 3093              		.loc 1 1763 3 view .LVU940
 3094 0006 0D4B     		ldr	r3, .L203
 3095 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3096 000a 8BB1     		cbz	r3, .L202
 3097              	.LVL310:
 3098              	.L198:
 3099              		.loc 1 1763 3 discriminator 3 view .LVU941
 3100              	.LBE38:
 3101              		.loc 1 1763 9 discriminator 3 view .LVU942
1764:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3102              		.loc 1 1764 3 discriminator 3 view .LVU943
1765:RTT/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3103              		.loc 1 1765 3 discriminator 3 view .LVU944
 3104              		.loc 1 1765 6 is_stmt 0 discriminator 3 view .LVU945
 3105 000c 022C     		cmp	r4, #2
 3106 000e 12D8     		bhi	.L200
 3107              	.LBB39:
1766:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3108              		.loc 1 1766 5 is_stmt 1 view .LVU946
 3109              		.loc 1 1766 5 view .LVU947
 3110              		.syntax unified
 3111              	@ 1766 "RTT/SEGGER_RTT.c" 1
 3112 0010 EFF31183 		mrs   r3, basepri  
 3113 0014 4FF02001 		mov   r1, #32       
 3114 0018 81F31188 		msr   basepri, r1  
 3115              		
 3116              	@ 0 "" 2
 3117              	.LVL311:
 3118              		.loc 1 1766 22 view .LVU948
1767:RTT/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3119              		.loc 1 1767 5 view .LVU949
1768:RTT/SEGGER_RTT.c ****     pUp->sName = sName;
 3120              		.loc 1 1768 5 view .LVU950
 3121              		.loc 1 1768 16 is_stmt 0 view .LVU951
 3122              		.thumb
 3123              		.syntax unified
 3124 001c 0134     		adds	r4, r4, #1
 3125              	.LVL312:
 3126              		.loc 1 1768 16 view .LVU952
 3127 001e 04EB4404 		add	r4, r4, r4, lsl #1
 3128              	.LVL313:
 3129              		.loc 1 1768 16 view .LVU953
 3130 0022 E400     		lsls	r4, r4, #3
 3131 0024 054A     		ldr	r2, .L203
 3132 0026 1551     		str	r5, [r2, r4]
1769:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 92


 3133              		.loc 1 1769 5 is_stmt 1 view .LVU954
 3134              		.syntax unified
 3135              	@ 1769 "RTT/SEGGER_RTT.c" 1
 3136 0028 83F31188 		msr   basepri, r3  
 3137              		
 3138              	@ 0 "" 2
 3139              		.thumb
 3140              		.syntax unified
 3141              	.LBE39:
 3142              		.loc 1 1769 24 view .LVU955
1770:RTT/SEGGER_RTT.c ****     r =  0;
 3143              		.loc 1 1770 5 view .LVU956
 3144              	.LVL314:
 3145              		.loc 1 1770 7 is_stmt 0 view .LVU957
 3146 002c 0020     		movs	r0, #0
 3147              	.LVL315:
 3148              	.L197:
1771:RTT/SEGGER_RTT.c ****   } else {
1772:RTT/SEGGER_RTT.c ****     r = -1;
1773:RTT/SEGGER_RTT.c ****   }
1774:RTT/SEGGER_RTT.c ****   return r;
1775:RTT/SEGGER_RTT.c **** }
 3149              		.loc 1 1775 1 view .LVU958
 3150 002e 38BD     		pop	{r3, r4, r5, pc}
 3151              	.LVL316:
 3152              	.L202:
 3153              	.LBB40:
1763:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3154              		.loc 1 1763 3 is_stmt 1 discriminator 1 view .LVU959
 3155 0030 FFF7FEFF 		bl	_DoInit
 3156              	.LVL317:
1763:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3157              		.loc 1 1763 3 is_stmt 0 discriminator 1 view .LVU960
 3158 0034 EAE7     		b	.L198
 3159              	.LVL318:
 3160              	.L200:
1763:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3161              		.loc 1 1763 3 discriminator 1 view .LVU961
 3162              	.LBE40:
1772:RTT/SEGGER_RTT.c ****   }
 3163              		.loc 1 1772 7 view .LVU962
 3164 0036 4FF0FF30 		mov	r0, #-1
 3165              	.LVL319:
1774:RTT/SEGGER_RTT.c **** }
 3166              		.loc 1 1774 3 is_stmt 1 view .LVU963
1774:RTT/SEGGER_RTT.c **** }
 3167              		.loc 1 1774 10 is_stmt 0 view .LVU964
 3168 003a F8E7     		b	.L197
 3169              	.L204:
 3170              		.align	2
 3171              	.L203:
 3172 003c 00000000 		.word	.LANCHOR1
 3173              		.cfi_endproc
 3174              	.LFE27:
 3176              		.section	.text.SEGGER_RTT_SetNameDownBuffer,"ax",%progbits
 3177              		.align	1
 3178              		.global	SEGGER_RTT_SetNameDownBuffer
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 93


 3179              		.syntax unified
 3180              		.thumb
 3181              		.thumb_func
 3183              	SEGGER_RTT_SetNameDownBuffer:
 3184              	.LVL320:
 3185              	.LFB28:
1776:RTT/SEGGER_RTT.c **** 
1777:RTT/SEGGER_RTT.c **** /*********************************************************************
1778:RTT/SEGGER_RTT.c **** *
1779:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameDownBuffer
1780:RTT/SEGGER_RTT.c **** *
1781:RTT/SEGGER_RTT.c **** *  Function description
1782:RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific Down-buffer name (T->H).
1783:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1784:RTT/SEGGER_RTT.c **** *
1785:RTT/SEGGER_RTT.c **** *  Parameters
1786:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1787:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1788:RTT/SEGGER_RTT.c **** *
1789:RTT/SEGGER_RTT.c **** *  Return value
1790:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1791:RTT/SEGGER_RTT.c **** *     < 0  Error
1792:RTT/SEGGER_RTT.c **** */
1793:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetNameDownBuffer(unsigned BufferIndex, const char* sName) {
 3186              		.loc 1 1793 75 is_stmt 1 view -0
 3187              		.cfi_startproc
 3188              		@ args = 0, pretend = 0, frame = 0
 3189              		@ frame_needed = 0, uses_anonymous_args = 0
 3190              		.loc 1 1793 75 is_stmt 0 view .LVU966
 3191 0000 38B5     		push	{r3, r4, r5, lr}
 3192              	.LCFI32:
 3193              		.cfi_def_cfa_offset 16
 3194              		.cfi_offset 3, -16
 3195              		.cfi_offset 4, -12
 3196              		.cfi_offset 5, -8
 3197              		.cfi_offset 14, -4
 3198 0002 0446     		mov	r4, r0
 3199 0004 0D46     		mov	r5, r1
1794:RTT/SEGGER_RTT.c ****   int r;
 3200              		.loc 1 1794 3 is_stmt 1 view .LVU967
1795:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3201              		.loc 1 1795 3 view .LVU968
1796:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
 3202              		.loc 1 1796 3 view .LVU969
 3203              	.LBB41:
1797:RTT/SEGGER_RTT.c **** 
1798:RTT/SEGGER_RTT.c ****   INIT();
 3204              		.loc 1 1798 3 view .LVU970
 3205              		.loc 1 1798 3 view .LVU971
 3206              	.LVL321:
 3207              		.loc 1 1798 3 view .LVU972
 3208              		.loc 1 1798 3 view .LVU973
 3209 0006 0D4B     		ldr	r3, .L211
 3210 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3211 000a 8BB1     		cbz	r3, .L210
 3212              	.LVL322:
 3213              	.L206:
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 94


 3214              		.loc 1 1798 3 discriminator 3 view .LVU974
 3215              	.LBE41:
 3216              		.loc 1 1798 9 discriminator 3 view .LVU975
1799:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3217              		.loc 1 1799 3 discriminator 3 view .LVU976
1800:RTT/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3218              		.loc 1 1800 3 discriminator 3 view .LVU977
 3219              		.loc 1 1800 6 is_stmt 0 discriminator 3 view .LVU978
 3220 000c 022C     		cmp	r4, #2
 3221 000e 12D8     		bhi	.L208
 3222              	.LBB42:
1801:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3223              		.loc 1 1801 5 is_stmt 1 view .LVU979
 3224              		.loc 1 1801 5 view .LVU980
 3225              		.syntax unified
 3226              	@ 1801 "RTT/SEGGER_RTT.c" 1
 3227 0010 EFF31183 		mrs   r3, basepri  
 3228 0014 4FF02001 		mov   r1, #32       
 3229 0018 81F31188 		msr   basepri, r1  
 3230              		
 3231              	@ 0 "" 2
 3232              	.LVL323:
 3233              		.loc 1 1801 22 view .LVU981
1802:RTT/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3234              		.loc 1 1802 5 view .LVU982
1803:RTT/SEGGER_RTT.c ****     pDown->sName = sName;
 3235              		.loc 1 1803 5 view .LVU983
 3236              		.loc 1 1803 18 is_stmt 0 view .LVU984
 3237              		.thumb
 3238              		.syntax unified
 3239 001c 04EB4404 		add	r4, r4, r4, lsl #1
 3240              	.LVL324:
 3241              		.loc 1 1803 18 view .LVU985
 3242 0020 0648     		ldr	r0, .L211
 3243 0022 00EBC404 		add	r4, r0, r4, lsl #3
 3244 0026 2566     		str	r5, [r4, #96]
1804:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3245              		.loc 1 1804 5 is_stmt 1 view .LVU986
 3246              		.syntax unified
 3247              	@ 1804 "RTT/SEGGER_RTT.c" 1
 3248 0028 83F31188 		msr   basepri, r3  
 3249              		
 3250              	@ 0 "" 2
 3251              		.thumb
 3252              		.syntax unified
 3253              	.LBE42:
 3254              		.loc 1 1804 24 view .LVU987
1805:RTT/SEGGER_RTT.c ****     r =  0;
 3255              		.loc 1 1805 5 view .LVU988
 3256              	.LVL325:
 3257              		.loc 1 1805 7 is_stmt 0 view .LVU989
 3258 002c 0020     		movs	r0, #0
 3259              	.LVL326:
 3260              	.L205:
1806:RTT/SEGGER_RTT.c ****   } else {
1807:RTT/SEGGER_RTT.c ****     r = -1;
1808:RTT/SEGGER_RTT.c ****   }
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 95


1809:RTT/SEGGER_RTT.c ****   return r;
1810:RTT/SEGGER_RTT.c **** }
 3261              		.loc 1 1810 1 view .LVU990
 3262 002e 38BD     		pop	{r3, r4, r5, pc}
 3263              	.LVL327:
 3264              	.L210:
 3265              	.LBB43:
1798:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3266              		.loc 1 1798 3 is_stmt 1 discriminator 1 view .LVU991
 3267 0030 FFF7FEFF 		bl	_DoInit
 3268              	.LVL328:
1798:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3269              		.loc 1 1798 3 is_stmt 0 discriminator 1 view .LVU992
 3270 0034 EAE7     		b	.L206
 3271              	.LVL329:
 3272              	.L208:
1798:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3273              		.loc 1 1798 3 discriminator 1 view .LVU993
 3274              	.LBE43:
1807:RTT/SEGGER_RTT.c ****   }
 3275              		.loc 1 1807 7 view .LVU994
 3276 0036 4FF0FF30 		mov	r0, #-1
 3277              	.LVL330:
1809:RTT/SEGGER_RTT.c **** }
 3278              		.loc 1 1809 3 is_stmt 1 view .LVU995
1809:RTT/SEGGER_RTT.c **** }
 3279              		.loc 1 1809 10 is_stmt 0 view .LVU996
 3280 003a F8E7     		b	.L205
 3281              	.L212:
 3282              		.align	2
 3283              	.L211:
 3284 003c 00000000 		.word	.LANCHOR1
 3285              		.cfi_endproc
 3286              	.LFE28:
 3288              		.section	.text.SEGGER_RTT_SetFlagsUpBuffer,"ax",%progbits
 3289              		.align	1
 3290              		.global	SEGGER_RTT_SetFlagsUpBuffer
 3291              		.syntax unified
 3292              		.thumb
 3293              		.thumb_func
 3295              	SEGGER_RTT_SetFlagsUpBuffer:
 3296              	.LVL331:
 3297              	.LFB29:
1811:RTT/SEGGER_RTT.c **** 
1812:RTT/SEGGER_RTT.c **** /*********************************************************************
1813:RTT/SEGGER_RTT.c **** *
1814:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsUpBuffer
1815:RTT/SEGGER_RTT.c **** *
1816:RTT/SEGGER_RTT.c **** *  Function description
1817:RTT/SEGGER_RTT.c **** *    Run-time configuration of specific up-buffer flags (T->H).
1818:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1819:RTT/SEGGER_RTT.c **** *
1820:RTT/SEGGER_RTT.c **** *  Parameters
1821:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer.
1822:RTT/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1823:RTT/SEGGER_RTT.c **** *
1824:RTT/SEGGER_RTT.c **** *  Return value
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 96


1825:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1826:RTT/SEGGER_RTT.c **** *     < 0  Error
1827:RTT/SEGGER_RTT.c **** */
1828:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsUpBuffer(unsigned BufferIndex, unsigned Flags) {
 3298              		.loc 1 1828 71 is_stmt 1 view -0
 3299              		.cfi_startproc
 3300              		@ args = 0, pretend = 0, frame = 0
 3301              		@ frame_needed = 0, uses_anonymous_args = 0
 3302              		.loc 1 1828 71 is_stmt 0 view .LVU998
 3303 0000 38B5     		push	{r3, r4, r5, lr}
 3304              	.LCFI33:
 3305              		.cfi_def_cfa_offset 16
 3306              		.cfi_offset 3, -16
 3307              		.cfi_offset 4, -12
 3308              		.cfi_offset 5, -8
 3309              		.cfi_offset 14, -4
 3310 0002 0446     		mov	r4, r0
 3311 0004 0D46     		mov	r5, r1
1829:RTT/SEGGER_RTT.c ****   int r;
 3312              		.loc 1 1829 3 is_stmt 1 view .LVU999
1830:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3313              		.loc 1 1830 3 view .LVU1000
1831:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
 3314              		.loc 1 1831 3 view .LVU1001
 3315              	.LBB44:
1832:RTT/SEGGER_RTT.c **** 
1833:RTT/SEGGER_RTT.c ****   INIT();
 3316              		.loc 1 1833 3 view .LVU1002
 3317              		.loc 1 1833 3 view .LVU1003
 3318              	.LVL332:
 3319              		.loc 1 1833 3 view .LVU1004
 3320              		.loc 1 1833 3 view .LVU1005
 3321 0006 0D4B     		ldr	r3, .L219
 3322 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3323 000a 8BB1     		cbz	r3, .L218
 3324              	.LVL333:
 3325              	.L214:
 3326              		.loc 1 1833 3 discriminator 3 view .LVU1006
 3327              	.LBE44:
 3328              		.loc 1 1833 9 discriminator 3 view .LVU1007
1834:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3329              		.loc 1 1834 3 discriminator 3 view .LVU1008
1835:RTT/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3330              		.loc 1 1835 3 discriminator 3 view .LVU1009
 3331              		.loc 1 1835 6 is_stmt 0 discriminator 3 view .LVU1010
 3332 000c 022C     		cmp	r4, #2
 3333 000e 12D8     		bhi	.L216
 3334              	.LBB45:
1836:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3335              		.loc 1 1836 5 is_stmt 1 view .LVU1011
 3336              		.loc 1 1836 5 view .LVU1012
 3337              		.syntax unified
 3338              	@ 1836 "RTT/SEGGER_RTT.c" 1
 3339 0010 EFF31183 		mrs   r3, basepri  
 3340 0014 4FF02001 		mov   r1, #32       
 3341 0018 81F31188 		msr   basepri, r1  
 3342              		
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 97


 3343              	@ 0 "" 2
 3344              	.LVL334:
 3345              		.loc 1 1836 22 view .LVU1013
1837:RTT/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3346              		.loc 1 1837 5 view .LVU1014
1838:RTT/SEGGER_RTT.c ****     pUp->Flags = Flags;
 3347              		.loc 1 1838 5 view .LVU1015
 3348              		.loc 1 1838 16 is_stmt 0 view .LVU1016
 3349              		.thumb
 3350              		.syntax unified
 3351 001c 04EB4404 		add	r4, r4, r4, lsl #1
 3352              	.LVL335:
 3353              		.loc 1 1838 16 view .LVU1017
 3354 0020 0648     		ldr	r0, .L219
 3355 0022 00EBC404 		add	r4, r0, r4, lsl #3
 3356 0026 E562     		str	r5, [r4, #44]
1839:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3357              		.loc 1 1839 5 is_stmt 1 view .LVU1018
 3358              		.syntax unified
 3359              	@ 1839 "RTT/SEGGER_RTT.c" 1
 3360 0028 83F31188 		msr   basepri, r3  
 3361              		
 3362              	@ 0 "" 2
 3363              		.thumb
 3364              		.syntax unified
 3365              	.LBE45:
 3366              		.loc 1 1839 24 view .LVU1019
1840:RTT/SEGGER_RTT.c ****     r =  0;
 3367              		.loc 1 1840 5 view .LVU1020
 3368              	.LVL336:
 3369              		.loc 1 1840 7 is_stmt 0 view .LVU1021
 3370 002c 0020     		movs	r0, #0
 3371              	.LVL337:
 3372              	.L213:
1841:RTT/SEGGER_RTT.c ****   } else {
1842:RTT/SEGGER_RTT.c ****     r = -1;
1843:RTT/SEGGER_RTT.c ****   }
1844:RTT/SEGGER_RTT.c ****   return r;
1845:RTT/SEGGER_RTT.c **** }
 3373              		.loc 1 1845 1 view .LVU1022
 3374 002e 38BD     		pop	{r3, r4, r5, pc}
 3375              	.LVL338:
 3376              	.L218:
 3377              	.LBB46:
1833:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3378              		.loc 1 1833 3 is_stmt 1 discriminator 1 view .LVU1023
 3379 0030 FFF7FEFF 		bl	_DoInit
 3380              	.LVL339:
1833:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3381              		.loc 1 1833 3 is_stmt 0 discriminator 1 view .LVU1024
 3382 0034 EAE7     		b	.L214
 3383              	.LVL340:
 3384              	.L216:
1833:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3385              		.loc 1 1833 3 discriminator 1 view .LVU1025
 3386              	.LBE46:
1842:RTT/SEGGER_RTT.c ****   }
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 98


 3387              		.loc 1 1842 7 view .LVU1026
 3388 0036 4FF0FF30 		mov	r0, #-1
 3389              	.LVL341:
1844:RTT/SEGGER_RTT.c **** }
 3390              		.loc 1 1844 3 is_stmt 1 view .LVU1027
1844:RTT/SEGGER_RTT.c **** }
 3391              		.loc 1 1844 10 is_stmt 0 view .LVU1028
 3392 003a F8E7     		b	.L213
 3393              	.L220:
 3394              		.align	2
 3395              	.L219:
 3396 003c 00000000 		.word	.LANCHOR1
 3397              		.cfi_endproc
 3398              	.LFE29:
 3400              		.section	.text.SEGGER_RTT_SetFlagsDownBuffer,"ax",%progbits
 3401              		.align	1
 3402              		.global	SEGGER_RTT_SetFlagsDownBuffer
 3403              		.syntax unified
 3404              		.thumb
 3405              		.thumb_func
 3407              	SEGGER_RTT_SetFlagsDownBuffer:
 3408              	.LVL342:
 3409              	.LFB30:
1846:RTT/SEGGER_RTT.c **** 
1847:RTT/SEGGER_RTT.c **** /*********************************************************************
1848:RTT/SEGGER_RTT.c **** *
1849:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsDownBuffer
1850:RTT/SEGGER_RTT.c **** *
1851:RTT/SEGGER_RTT.c **** *  Function description
1852:RTT/SEGGER_RTT.c **** *    Run-time configuration of specific Down-buffer flags (T->H).
1853:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1854:RTT/SEGGER_RTT.c **** *
1855:RTT/SEGGER_RTT.c **** *  Parameters
1856:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1857:RTT/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1858:RTT/SEGGER_RTT.c **** *
1859:RTT/SEGGER_RTT.c **** *  Return value
1860:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1861:RTT/SEGGER_RTT.c **** *     < 0  Error
1862:RTT/SEGGER_RTT.c **** */
1863:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsDownBuffer(unsigned BufferIndex, unsigned Flags) {
 3410              		.loc 1 1863 73 is_stmt 1 view -0
 3411              		.cfi_startproc
 3412              		@ args = 0, pretend = 0, frame = 0
 3413              		@ frame_needed = 0, uses_anonymous_args = 0
 3414              		.loc 1 1863 73 is_stmt 0 view .LVU1030
 3415 0000 38B5     		push	{r3, r4, r5, lr}
 3416              	.LCFI34:
 3417              		.cfi_def_cfa_offset 16
 3418              		.cfi_offset 3, -16
 3419              		.cfi_offset 4, -12
 3420              		.cfi_offset 5, -8
 3421              		.cfi_offset 14, -4
 3422 0002 0446     		mov	r4, r0
 3423 0004 0D46     		mov	r5, r1
1864:RTT/SEGGER_RTT.c ****   int r;
 3424              		.loc 1 1864 3 is_stmt 1 view .LVU1031
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 99


1865:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3425              		.loc 1 1865 3 view .LVU1032
1866:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
 3426              		.loc 1 1866 3 view .LVU1033
 3427              	.LBB47:
1867:RTT/SEGGER_RTT.c **** 
1868:RTT/SEGGER_RTT.c ****   INIT();
 3428              		.loc 1 1868 3 view .LVU1034
 3429              		.loc 1 1868 3 view .LVU1035
 3430              	.LVL343:
 3431              		.loc 1 1868 3 view .LVU1036
 3432              		.loc 1 1868 3 view .LVU1037
 3433 0006 0D4B     		ldr	r3, .L227
 3434 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3435 000a 8BB1     		cbz	r3, .L226
 3436              	.LVL344:
 3437              	.L222:
 3438              		.loc 1 1868 3 discriminator 3 view .LVU1038
 3439              	.LBE47:
 3440              		.loc 1 1868 9 discriminator 3 view .LVU1039
1869:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3441              		.loc 1 1869 3 discriminator 3 view .LVU1040
1870:RTT/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3442              		.loc 1 1870 3 discriminator 3 view .LVU1041
 3443              		.loc 1 1870 6 is_stmt 0 discriminator 3 view .LVU1042
 3444 000c 022C     		cmp	r4, #2
 3445 000e 12D8     		bhi	.L224
 3446              	.LBB48:
1871:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3447              		.loc 1 1871 5 is_stmt 1 view .LVU1043
 3448              		.loc 1 1871 5 view .LVU1044
 3449              		.syntax unified
 3450              	@ 1871 "RTT/SEGGER_RTT.c" 1
 3451 0010 EFF31183 		mrs   r3, basepri  
 3452 0014 4FF02001 		mov   r1, #32       
 3453 0018 81F31188 		msr   basepri, r1  
 3454              		
 3455              	@ 0 "" 2
 3456              	.LVL345:
 3457              		.loc 1 1871 22 view .LVU1045
1872:RTT/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3458              		.loc 1 1872 5 view .LVU1046
1873:RTT/SEGGER_RTT.c ****     pDown->Flags = Flags;
 3459              		.loc 1 1873 5 view .LVU1047
 3460              		.loc 1 1873 18 is_stmt 0 view .LVU1048
 3461              		.thumb
 3462              		.syntax unified
 3463 001c 04EB4404 		add	r4, r4, r4, lsl #1
 3464              	.LVL346:
 3465              		.loc 1 1873 18 view .LVU1049
 3466 0020 0648     		ldr	r0, .L227
 3467 0022 00EBC404 		add	r4, r0, r4, lsl #3
 3468 0026 6567     		str	r5, [r4, #116]
1874:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3469              		.loc 1 1874 5 is_stmt 1 view .LVU1050
 3470              		.syntax unified
 3471              	@ 1874 "RTT/SEGGER_RTT.c" 1
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 100


 3472 0028 83F31188 		msr   basepri, r3  
 3473              		
 3474              	@ 0 "" 2
 3475              		.thumb
 3476              		.syntax unified
 3477              	.LBE48:
 3478              		.loc 1 1874 24 view .LVU1051
1875:RTT/SEGGER_RTT.c ****     r =  0;
 3479              		.loc 1 1875 5 view .LVU1052
 3480              	.LVL347:
 3481              		.loc 1 1875 7 is_stmt 0 view .LVU1053
 3482 002c 0020     		movs	r0, #0
 3483              	.LVL348:
 3484              	.L221:
1876:RTT/SEGGER_RTT.c ****   } else {
1877:RTT/SEGGER_RTT.c ****     r = -1;
1878:RTT/SEGGER_RTT.c ****   }
1879:RTT/SEGGER_RTT.c ****   return r;
1880:RTT/SEGGER_RTT.c **** }
 3485              		.loc 1 1880 1 view .LVU1054
 3486 002e 38BD     		pop	{r3, r4, r5, pc}
 3487              	.LVL349:
 3488              	.L226:
 3489              	.LBB49:
1868:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3490              		.loc 1 1868 3 is_stmt 1 discriminator 1 view .LVU1055
 3491 0030 FFF7FEFF 		bl	_DoInit
 3492              	.LVL350:
1868:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3493              		.loc 1 1868 3 is_stmt 0 discriminator 1 view .LVU1056
 3494 0034 EAE7     		b	.L222
 3495              	.LVL351:
 3496              	.L224:
1868:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3497              		.loc 1 1868 3 discriminator 1 view .LVU1057
 3498              	.LBE49:
1877:RTT/SEGGER_RTT.c ****   }
 3499              		.loc 1 1877 7 view .LVU1058
 3500 0036 4FF0FF30 		mov	r0, #-1
 3501              	.LVL352:
1879:RTT/SEGGER_RTT.c **** }
 3502              		.loc 1 1879 3 is_stmt 1 view .LVU1059
1879:RTT/SEGGER_RTT.c **** }
 3503              		.loc 1 1879 10 is_stmt 0 view .LVU1060
 3504 003a F8E7     		b	.L221
 3505              	.L228:
 3506              		.align	2
 3507              	.L227:
 3508 003c 00000000 		.word	.LANCHOR1
 3509              		.cfi_endproc
 3510              	.LFE30:
 3512              		.section	.text.SEGGER_RTT_Init,"ax",%progbits
 3513              		.align	1
 3514              		.global	SEGGER_RTT_Init
 3515              		.syntax unified
 3516              		.thumb
 3517              		.thumb_func
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 101


 3519              	SEGGER_RTT_Init:
 3520              	.LFB31:
1881:RTT/SEGGER_RTT.c **** 
1882:RTT/SEGGER_RTT.c **** /*********************************************************************
1883:RTT/SEGGER_RTT.c **** *
1884:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_Init
1885:RTT/SEGGER_RTT.c **** *
1886:RTT/SEGGER_RTT.c **** *  Function description
1887:RTT/SEGGER_RTT.c **** *    Initializes the RTT Control Block.
1888:RTT/SEGGER_RTT.c **** *    Should be used in RAM targets, at start of the application.
1889:RTT/SEGGER_RTT.c **** *
1890:RTT/SEGGER_RTT.c **** */
1891:RTT/SEGGER_RTT.c **** void SEGGER_RTT_Init (void) {
 3521              		.loc 1 1891 29 is_stmt 1 view -0
 3522              		.cfi_startproc
 3523              		@ args = 0, pretend = 0, frame = 0
 3524              		@ frame_needed = 0, uses_anonymous_args = 0
 3525 0000 08B5     		push	{r3, lr}
 3526              	.LCFI35:
 3527              		.cfi_def_cfa_offset 8
 3528              		.cfi_offset 3, -8
 3529              		.cfi_offset 14, -4
1892:RTT/SEGGER_RTT.c ****   _DoInit();
 3530              		.loc 1 1892 3 view .LVU1062
 3531 0002 FFF7FEFF 		bl	_DoInit
 3532              	.LVL353:
1893:RTT/SEGGER_RTT.c **** }
 3533              		.loc 1 1893 1 is_stmt 0 view .LVU1063
 3534 0006 08BD     		pop	{r3, pc}
 3535              		.cfi_endproc
 3536              	.LFE31:
 3538              		.section	.text.SEGGER_RTT_SetTerminal,"ax",%progbits
 3539              		.align	1
 3540              		.global	SEGGER_RTT_SetTerminal
 3541              		.syntax unified
 3542              		.thumb
 3543              		.thumb_func
 3545              	SEGGER_RTT_SetTerminal:
 3546              	.LVL354:
 3547              	.LFB32:
1894:RTT/SEGGER_RTT.c **** 
1895:RTT/SEGGER_RTT.c **** /*********************************************************************
1896:RTT/SEGGER_RTT.c **** *
1897:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetTerminal
1898:RTT/SEGGER_RTT.c **** *
1899:RTT/SEGGER_RTT.c **** *  Function description
1900:RTT/SEGGER_RTT.c **** *    Sets the terminal to be used for output on channel 0.
1901:RTT/SEGGER_RTT.c **** *
1902:RTT/SEGGER_RTT.c **** *  Parameters
1903:RTT/SEGGER_RTT.c **** *    TerminalId  Index of the terminal.
1904:RTT/SEGGER_RTT.c **** *
1905:RTT/SEGGER_RTT.c **** *  Return value
1906:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1907:RTT/SEGGER_RTT.c **** *     < 0  Error (e.g. if RTT is configured for non-blocking mode and there was no space in the buf
1908:RTT/SEGGER_RTT.c **** *
1909:RTT/SEGGER_RTT.c **** *  Notes
1910:RTT/SEGGER_RTT.c **** *    (1) Buffer 0 is always reserved for terminal I/O, so we can use index 0 here, fixed
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 102


1911:RTT/SEGGER_RTT.c **** */
1912:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetTerminal (unsigned char TerminalId) {
 3548              		.loc 1 1912 55 is_stmt 1 view -0
 3549              		.cfi_startproc
 3550              		@ args = 0, pretend = 0, frame = 8
 3551              		@ frame_needed = 0, uses_anonymous_args = 0
 3552              		.loc 1 1912 55 is_stmt 0 view .LVU1065
 3553 0000 30B5     		push	{r4, r5, lr}
 3554              	.LCFI36:
 3555              		.cfi_def_cfa_offset 12
 3556              		.cfi_offset 4, -12
 3557              		.cfi_offset 5, -8
 3558              		.cfi_offset 14, -4
 3559 0002 83B0     		sub	sp, sp, #12
 3560              	.LCFI37:
 3561              		.cfi_def_cfa_offset 24
 3562 0004 0446     		mov	r4, r0
1913:RTT/SEGGER_RTT.c ****   unsigned char         ac[2];
 3563              		.loc 1 1913 3 is_stmt 1 view .LVU1066
1914:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 3564              		.loc 1 1914 3 view .LVU1067
1915:RTT/SEGGER_RTT.c ****   unsigned Avail;
 3565              		.loc 1 1915 3 view .LVU1068
1916:RTT/SEGGER_RTT.c ****   int r;
 3566              		.loc 1 1916 3 view .LVU1069
 3567              	.LBB50:
1917:RTT/SEGGER_RTT.c **** 
1918:RTT/SEGGER_RTT.c ****   INIT();
 3568              		.loc 1 1918 3 view .LVU1070
 3569              		.loc 1 1918 3 view .LVU1071
 3570              	.LVL355:
 3571              		.loc 1 1918 3 view .LVU1072
 3572              		.loc 1 1918 3 view .LVU1073
 3573 0006 1D4B     		ldr	r3, .L242
 3574 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3575 000a FBB1     		cbz	r3, .L239
 3576              	.LVL356:
 3577              	.L232:
 3578              		.loc 1 1918 3 discriminator 3 view .LVU1074
 3579              	.LBE50:
 3580              		.loc 1 1918 9 discriminator 3 view .LVU1075
1919:RTT/SEGGER_RTT.c ****   r = 0;
 3581              		.loc 1 1919 3 discriminator 3 view .LVU1076
1920:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3582              		.loc 1 1920 3 discriminator 3 view .LVU1077
 3583              		.loc 1 1920 9 is_stmt 0 discriminator 3 view .LVU1078
 3584 000c FF23     		movs	r3, #255
 3585 000e 8DF80430 		strb	r3, [sp, #4]
1921:RTT/SEGGER_RTT.c ****   if (TerminalId < sizeof(_aTerminalId)) { // We only support a certain number of channels
 3586              		.loc 1 1921 3 is_stmt 1 discriminator 3 view .LVU1079
 3587              		.loc 1 1921 6 is_stmt 0 discriminator 3 view .LVU1080
 3588 0012 0F2C     		cmp	r4, #15
 3589 0014 2FD8     		bhi	.L236
1922:RTT/SEGGER_RTT.c ****     ac[1] = _aTerminalId[TerminalId];
 3590              		.loc 1 1922 5 is_stmt 1 view .LVU1081
 3591              		.loc 1 1922 25 is_stmt 0 view .LVU1082
 3592 0016 1A4B     		ldr	r3, .L242+4
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 103


 3593 0018 1B5D     		ldrb	r3, [r3, r4]	@ zero_extendqisi2
 3594              		.loc 1 1922 11 view .LVU1083
 3595 001a 8DF80530 		strb	r3, [sp, #5]
1923:RTT/SEGGER_RTT.c ****     pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Acce
 3596              		.loc 1 1923 5 is_stmt 1 view .LVU1084
 3597              	.LVL357:
 3598              	.LBB51:
1924:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();                     // Lock to make sure that no other task is writing into 
 3599              		.loc 1 1924 5 view .LVU1085
 3600              		.loc 1 1924 5 view .LVU1086
 3601              		.syntax unified
 3602              	@ 1924 "RTT/SEGGER_RTT.c" 1
 3603 001e EFF31185 		mrs   r5, basepri  
 3604 0022 4FF02001 		mov   r1, #32       
 3605 0026 81F31188 		msr   basepri, r1  
 3606              		
 3607              	@ 0 "" 2
 3608              	.LVL358:
 3609              		.loc 1 1924 22 view .LVU1087
1925:RTT/SEGGER_RTT.c ****     if ((pRing->Flags & SEGGER_RTT_MODE_MASK) == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 3610              		.loc 1 1925 5 view .LVU1088
 3611              		.loc 1 1925 15 is_stmt 0 view .LVU1089
 3612              		.thumb
 3613              		.syntax unified
 3614 002a 144B     		ldr	r3, .L242
 3615 002c DB6A     		ldr	r3, [r3, #44]
 3616              		.loc 1 1925 23 view .LVU1090
 3617 002e 03F00303 		and	r3, r3, #3
 3618              		.loc 1 1925 8 view .LVU1091
 3619 0032 022B     		cmp	r3, #2
 3620 0034 0DD0     		beq	.L240
1926:RTT/SEGGER_RTT.c ****       _ActiveTerminal = TerminalId;
1927:RTT/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
1928:RTT/SEGGER_RTT.c ****     } else {                                                                            // Skipping
1929:RTT/SEGGER_RTT.c ****       Avail = _GetAvailWriteSpace(pRing);
 3621              		.loc 1 1929 7 is_stmt 1 view .LVU1092
 3622              		.loc 1 1929 15 is_stmt 0 view .LVU1093
 3623 0036 1348     		ldr	r0, .L242+8
 3624 0038 FFF7FEFF 		bl	_GetAvailWriteSpace
 3625              	.LVL359:
1930:RTT/SEGGER_RTT.c ****       if (Avail >= 2) {
 3626              		.loc 1 1930 7 is_stmt 1 view .LVU1094
 3627              		.loc 1 1930 10 is_stmt 0 view .LVU1095
 3628 003c 0128     		cmp	r0, #1
 3629 003e 11D8     		bhi	.L241
1931:RTT/SEGGER_RTT.c ****         _ActiveTerminal = TerminalId;    // Only change active terminal in case of success
1932:RTT/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
1933:RTT/SEGGER_RTT.c ****       } else {
1934:RTT/SEGGER_RTT.c ****         r = -1;
 3630              		.loc 1 1934 11 view .LVU1096
 3631 0040 4FF0FF30 		mov	r0, #-1
 3632              	.LVL360:
 3633              	.L235:
1935:RTT/SEGGER_RTT.c ****       }
1936:RTT/SEGGER_RTT.c ****     }
1937:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3634              		.loc 1 1937 5 is_stmt 1 view .LVU1097
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 104


 3635              		.syntax unified
 3636              	@ 1937 "RTT/SEGGER_RTT.c" 1
 3637 0044 85F31188 		msr   basepri, r5  
 3638              		
 3639              	@ 0 "" 2
 3640              		.thumb
 3641              		.syntax unified
 3642              	.LBE51:
 3643              		.loc 1 1937 24 view .LVU1098
 3644              	.LVL361:
 3645              	.L231:
1938:RTT/SEGGER_RTT.c ****   } else {
1939:RTT/SEGGER_RTT.c ****     r = -1;
1940:RTT/SEGGER_RTT.c ****   }
1941:RTT/SEGGER_RTT.c ****   return r;
1942:RTT/SEGGER_RTT.c **** }
 3646              		.loc 1 1942 1 is_stmt 0 view .LVU1099
 3647 0048 03B0     		add	sp, sp, #12
 3648              	.LCFI38:
 3649              		.cfi_remember_state
 3650              		.cfi_def_cfa_offset 12
 3651              		@ sp needed
 3652 004a 30BD     		pop	{r4, r5, pc}
 3653              	.LVL362:
 3654              	.L239:
 3655              	.LCFI39:
 3656              		.cfi_restore_state
 3657              	.LBB52:
1918:RTT/SEGGER_RTT.c ****   r = 0;
 3658              		.loc 1 1918 3 is_stmt 1 discriminator 1 view .LVU1100
 3659 004c FFF7FEFF 		bl	_DoInit
 3660              	.LVL363:
1918:RTT/SEGGER_RTT.c ****   r = 0;
 3661              		.loc 1 1918 3 is_stmt 0 discriminator 1 view .LVU1101
 3662 0050 DCE7     		b	.L232
 3663              	.LVL364:
 3664              	.L240:
1918:RTT/SEGGER_RTT.c ****   r = 0;
 3665              		.loc 1 1918 3 discriminator 1 view .LVU1102
 3666              	.LBE52:
 3667              	.LBB53:
1926:RTT/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 3668              		.loc 1 1926 7 is_stmt 1 view .LVU1103
1926:RTT/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 3669              		.loc 1 1926 23 is_stmt 0 view .LVU1104
 3670 0052 0D4B     		ldr	r3, .L242+12
 3671 0054 1C70     		strb	r4, [r3]
1927:RTT/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 3672              		.loc 1 1927 7 is_stmt 1 view .LVU1105
 3673 0056 0222     		movs	r2, #2
 3674 0058 01A9     		add	r1, sp, #4
 3675 005a 0A48     		ldr	r0, .L242+8
 3676 005c FFF7FEFF 		bl	_WriteBlocking
 3677              	.LVL365:
 3678              	.LBE53:
1919:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3679              		.loc 1 1919 5 is_stmt 0 view .LVU1106
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 105


 3680 0060 0020     		movs	r0, #0
 3681              	.LBB54:
 3682 0062 EFE7     		b	.L235
 3683              	.LVL366:
 3684              	.L241:
1931:RTT/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3685              		.loc 1 1931 9 is_stmt 1 view .LVU1107
1931:RTT/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3686              		.loc 1 1931 25 is_stmt 0 view .LVU1108
 3687 0064 084B     		ldr	r3, .L242+12
 3688 0066 1C70     		strb	r4, [r3]
1932:RTT/SEGGER_RTT.c ****       } else {
 3689              		.loc 1 1932 9 is_stmt 1 view .LVU1109
 3690 0068 0222     		movs	r2, #2
 3691 006a 01A9     		add	r1, sp, #4
 3692 006c 0548     		ldr	r0, .L242+8
 3693              	.LVL367:
1932:RTT/SEGGER_RTT.c ****       } else {
 3694              		.loc 1 1932 9 is_stmt 0 view .LVU1110
 3695 006e FFF7FEFF 		bl	_WriteNoCheck
 3696              	.LVL368:
 3697              	.LBE54:
1919:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3698              		.loc 1 1919 5 view .LVU1111
 3699 0072 0020     		movs	r0, #0
 3700              	.LBB55:
 3701 0074 E6E7     		b	.L235
 3702              	.LVL369:
 3703              	.L236:
1919:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3704              		.loc 1 1919 5 view .LVU1112
 3705              	.LBE55:
1939:RTT/SEGGER_RTT.c ****   }
 3706              		.loc 1 1939 7 view .LVU1113
 3707 0076 4FF0FF30 		mov	r0, #-1
 3708              	.LVL370:
1941:RTT/SEGGER_RTT.c **** }
 3709              		.loc 1 1941 3 is_stmt 1 view .LVU1114
1941:RTT/SEGGER_RTT.c **** }
 3710              		.loc 1 1941 10 is_stmt 0 view .LVU1115
 3711 007a E5E7     		b	.L231
 3712              	.L243:
 3713              		.align	2
 3714              	.L242:
 3715 007c 00000000 		.word	.LANCHOR1
 3716 0080 00000000 		.word	.LANCHOR0
 3717 0084 18000000 		.word	.LANCHOR1+24
 3718 0088 00000000 		.word	.LANCHOR5
 3719              		.cfi_endproc
 3720              	.LFE32:
 3722              		.section	.text.SEGGER_RTT_TerminalOut,"ax",%progbits
 3723              		.align	1
 3724              		.global	SEGGER_RTT_TerminalOut
 3725              		.syntax unified
 3726              		.thumb
 3727              		.thumb_func
 3729              	SEGGER_RTT_TerminalOut:
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 106


 3730              	.LVL371:
 3731              	.LFB33:
1943:RTT/SEGGER_RTT.c **** 
1944:RTT/SEGGER_RTT.c **** /*********************************************************************
1945:RTT/SEGGER_RTT.c **** *
1946:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_TerminalOut
1947:RTT/SEGGER_RTT.c **** *
1948:RTT/SEGGER_RTT.c **** *  Function description
1949:RTT/SEGGER_RTT.c **** *    Writes a string to the given terminal
1950:RTT/SEGGER_RTT.c **** *     without changing the terminal for channel 0.
1951:RTT/SEGGER_RTT.c **** *
1952:RTT/SEGGER_RTT.c **** *  Parameters
1953:RTT/SEGGER_RTT.c **** *    TerminalId   Index of the terminal.
1954:RTT/SEGGER_RTT.c **** *    s            String to be printed on the terminal.
1955:RTT/SEGGER_RTT.c **** *
1956:RTT/SEGGER_RTT.c **** *  Return value
1957:RTT/SEGGER_RTT.c **** *    >= 0 - Number of bytes written.
1958:RTT/SEGGER_RTT.c **** *     < 0 - Error.
1959:RTT/SEGGER_RTT.c **** *
1960:RTT/SEGGER_RTT.c **** */
1961:RTT/SEGGER_RTT.c **** int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
 3732              		.loc 1 1961 70 is_stmt 1 view -0
 3733              		.cfi_startproc
 3734              		@ args = 0, pretend = 0, frame = 0
 3735              		@ frame_needed = 0, uses_anonymous_args = 0
 3736              		.loc 1 1961 70 is_stmt 0 view .LVU1117
 3737 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3738              	.LCFI40:
 3739              		.cfi_def_cfa_offset 32
 3740              		.cfi_offset 3, -32
 3741              		.cfi_offset 4, -28
 3742              		.cfi_offset 5, -24
 3743              		.cfi_offset 6, -20
 3744              		.cfi_offset 7, -16
 3745              		.cfi_offset 8, -12
 3746              		.cfi_offset 9, -8
 3747              		.cfi_offset 14, -4
 3748 0004 0446     		mov	r4, r0
 3749 0006 0D46     		mov	r5, r1
1962:RTT/SEGGER_RTT.c ****   int                   Status;
 3750              		.loc 1 1962 3 is_stmt 1 view .LVU1118
1963:RTT/SEGGER_RTT.c ****   unsigned              FragLen;
 3751              		.loc 1 1963 3 view .LVU1119
1964:RTT/SEGGER_RTT.c ****   unsigned              Avail;
 3752              		.loc 1 1964 3 view .LVU1120
1965:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 3753              		.loc 1 1965 3 view .LVU1121
 3754              	.LBB56:
1966:RTT/SEGGER_RTT.c ****   //
1967:RTT/SEGGER_RTT.c ****   INIT();
 3755              		.loc 1 1967 3 view .LVU1122
 3756              		.loc 1 1967 3 view .LVU1123
 3757              	.LVL372:
 3758              		.loc 1 1967 3 view .LVU1124
 3759              		.loc 1 1967 3 view .LVU1125
 3760 0008 354B     		ldr	r3, .L259
 3761 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 107


 3762 000c 03B3     		cbz	r3, .L255
 3763              	.LVL373:
 3764              	.L245:
 3765              		.loc 1 1967 3 discriminator 3 view .LVU1126
 3766              	.LBE56:
 3767              		.loc 1 1967 9 discriminator 3 view .LVU1127
1968:RTT/SEGGER_RTT.c ****   //
1969:RTT/SEGGER_RTT.c ****   // Validate terminal ID.
1970:RTT/SEGGER_RTT.c ****   //
1971:RTT/SEGGER_RTT.c ****   if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
 3768              		.loc 1 1971 3 discriminator 3 view .LVU1128
 3769              		.loc 1 1971 6 is_stmt 0 discriminator 3 view .LVU1129
 3770 000e 0F2C     		cmp	r4, #15
 3771 0010 63D8     		bhi	.L250
1972:RTT/SEGGER_RTT.c ****     //
1973:RTT/SEGGER_RTT.c ****     // Get "to-host" ring buffer.
1974:RTT/SEGGER_RTT.c ****     //
1975:RTT/SEGGER_RTT.c ****     pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Acce
 3772              		.loc 1 1975 5 is_stmt 1 view .LVU1130
 3773              	.LVL374:
1976:RTT/SEGGER_RTT.c ****     //
1977:RTT/SEGGER_RTT.c ****     // Need to be able to change terminal, write data, change back.
1978:RTT/SEGGER_RTT.c ****     // Compute the fixed and variable sizes.
1979:RTT/SEGGER_RTT.c ****     //
1980:RTT/SEGGER_RTT.c ****     FragLen = STRLEN(s);
 3774              		.loc 1 1980 5 view .LVU1131
 3775              		.loc 1 1980 15 is_stmt 0 view .LVU1132
 3776 0012 2846     		mov	r0, r5
 3777 0014 FFF7FEFF 		bl	strlen
 3778              	.LVL375:
 3779 0018 8046     		mov	r8, r0
 3780              	.LVL376:
 3781              	.LBB57:
1981:RTT/SEGGER_RTT.c ****     //
1982:RTT/SEGGER_RTT.c ****     // How we output depends upon the mode...
1983:RTT/SEGGER_RTT.c ****     //
1984:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3782              		.loc 1 1984 5 is_stmt 1 view .LVU1133
 3783              		.loc 1 1984 5 view .LVU1134
 3784              		.syntax unified
 3785              	@ 1984 "RTT/SEGGER_RTT.c" 1
 3786 001a EFF31186 		mrs   r6, basepri  
 3787 001e 4FF02001 		mov   r1, #32       
 3788 0022 81F31188 		msr   basepri, r1  
 3789              		
 3790              	@ 0 "" 2
 3791              	.LVL377:
 3792              		.loc 1 1984 22 view .LVU1135
1985:RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 3793              		.loc 1 1985 5 view .LVU1136
 3794              		.loc 1 1985 13 is_stmt 0 view .LVU1137
 3795              		.thumb
 3796              		.syntax unified
 3797 0026 2E4F     		ldr	r7, .L259
 3798 0028 07F11800 		add	r0, r7, #24
 3799              	.LVL378:
 3800              		.loc 1 1985 13 view .LVU1138
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 108


 3801 002c FFF7FEFF 		bl	_GetAvailWriteSpace
 3802              	.LVL379:
 3803 0030 8146     		mov	r9, r0
 3804              	.LVL380:
1986:RTT/SEGGER_RTT.c ****     switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
 3805              		.loc 1 1986 5 is_stmt 1 view .LVU1139
 3806              		.loc 1 1986 18 is_stmt 0 view .LVU1140
 3807 0032 FB6A     		ldr	r3, [r7, #44]
 3808              		.loc 1 1986 26 view .LVU1141
 3809 0034 03F00303 		and	r3, r3, #3
 3810              		.loc 1 1986 5 view .LVU1142
 3811 0038 012B     		cmp	r3, #1
 3812 003a 23D0     		beq	.L247
 3813 003c 022B     		cmp	r3, #2
 3814 003e 3BD0     		beq	.L248
 3815 0040 4BB1     		cbz	r3, .L256
 3816 0042 4FF0FF34 		mov	r4, #-1
 3817              	.LVL381:
 3818              	.L249:
1987:RTT/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1988:RTT/SEGGER_RTT.c ****       //
1989:RTT/SEGGER_RTT.c ****       // If we are in skip mode and there is no space for the whole
1990:RTT/SEGGER_RTT.c ****       // of this output, don't bother switching terminals at all.
1991:RTT/SEGGER_RTT.c ****       //
1992:RTT/SEGGER_RTT.c ****       if (Avail < (FragLen + 4u)) {
1993:RTT/SEGGER_RTT.c ****         Status = 0;
1994:RTT/SEGGER_RTT.c ****       } else {
1995:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
1996:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
1997:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
1998:RTT/SEGGER_RTT.c ****       }
1999:RTT/SEGGER_RTT.c ****       break;
2000:RTT/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
2001:RTT/SEGGER_RTT.c ****       //
2002:RTT/SEGGER_RTT.c ****       // If we are in trim mode and there is not enough space for everything,
2003:RTT/SEGGER_RTT.c ****       // trim the output but always include the terminal switch.  If no room
2004:RTT/SEGGER_RTT.c ****       // for terminal switch, skip that totally.
2005:RTT/SEGGER_RTT.c ****       //
2006:RTT/SEGGER_RTT.c ****       if (Avail < 4u) {
2007:RTT/SEGGER_RTT.c ****         Status = -1;
2008:RTT/SEGGER_RTT.c ****       } else {
2009:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
2010:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
2011:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
2012:RTT/SEGGER_RTT.c ****       }
2013:RTT/SEGGER_RTT.c ****       break;
2014:RTT/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
2015:RTT/SEGGER_RTT.c ****       //
2016:RTT/SEGGER_RTT.c ****       // If we are in blocking mode, output everything.
2017:RTT/SEGGER_RTT.c ****       //
2018:RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, TerminalId);
2019:RTT/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
2020:RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
2021:RTT/SEGGER_RTT.c ****       break;
2022:RTT/SEGGER_RTT.c ****     default:
2023:RTT/SEGGER_RTT.c ****       Status = -1;
2024:RTT/SEGGER_RTT.c ****       break;
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 109


2025:RTT/SEGGER_RTT.c ****     }
2026:RTT/SEGGER_RTT.c ****     //
2027:RTT/SEGGER_RTT.c ****     // Finish up.
2028:RTT/SEGGER_RTT.c ****     //
2029:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3819              		.loc 1 2029 5 is_stmt 1 view .LVU1143
 3820              		.syntax unified
 3821              	@ 2029 "RTT/SEGGER_RTT.c" 1
 3822 0046 86F31188 		msr   basepri, r6  
 3823              		
 3824              	@ 0 "" 2
 3825              		.thumb
 3826              		.syntax unified
 3827              	.LBE57:
 3828              		.loc 1 2029 24 view .LVU1144
 3829              	.LVL382:
 3830              	.L244:
2030:RTT/SEGGER_RTT.c ****   } else {
2031:RTT/SEGGER_RTT.c ****     Status = -1;
2032:RTT/SEGGER_RTT.c ****   }
2033:RTT/SEGGER_RTT.c ****   return Status;
2034:RTT/SEGGER_RTT.c **** }
 3831              		.loc 1 2034 1 is_stmt 0 view .LVU1145
 3832 004a 2046     		mov	r0, r4
 3833 004c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3834              	.LVL383:
 3835              	.L255:
 3836              	.LBB58:
1967:RTT/SEGGER_RTT.c ****   //
 3837              		.loc 1 1967 3 is_stmt 1 discriminator 1 view .LVU1146
 3838 0050 FFF7FEFF 		bl	_DoInit
 3839              	.LVL384:
1967:RTT/SEGGER_RTT.c ****   //
 3840              		.loc 1 1967 3 is_stmt 0 discriminator 1 view .LVU1147
 3841 0054 DBE7     		b	.L245
 3842              	.LVL385:
 3843              	.L256:
1967:RTT/SEGGER_RTT.c ****   //
 3844              		.loc 1 1967 3 discriminator 1 view .LVU1148
 3845              	.LBE58:
 3846              	.LBB59:
1992:RTT/SEGGER_RTT.c ****         Status = 0;
 3847              		.loc 1 1992 7 is_stmt 1 view .LVU1149
1992:RTT/SEGGER_RTT.c ****         Status = 0;
 3848              		.loc 1 1992 28 is_stmt 0 view .LVU1150
 3849 0056 08F10403 		add	r3, r8, #4
1992:RTT/SEGGER_RTT.c ****         Status = 0;
 3850              		.loc 1 1992 10 view .LVU1151
 3851 005a 8342     		cmp	r3, r0
 3852 005c 01D9     		bls	.L257
1993:RTT/SEGGER_RTT.c ****       } else {
 3853              		.loc 1 1993 16 view .LVU1152
 3854 005e 0024     		movs	r4, #0
 3855 0060 F1E7     		b	.L249
 3856              	.L257:
1995:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 3857              		.loc 1 1995 9 is_stmt 1 view .LVU1153
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 110


 3858 0062 1837     		adds	r7, r7, #24
 3859 0064 2146     		mov	r1, r4
 3860 0066 3846     		mov	r0, r7
 3861              	.LVL386:
1995:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 3862              		.loc 1 1995 9 is_stmt 0 view .LVU1154
 3863 0068 FFF7FEFF 		bl	_PostTerminalSwitch
 3864              	.LVL387:
1996:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3865              		.loc 1 1996 9 is_stmt 1 view .LVU1155
1996:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3866              		.loc 1 1996 23 is_stmt 0 view .LVU1156
 3867 006c 4246     		mov	r2, r8
 3868 006e 2946     		mov	r1, r5
 3869 0070 3846     		mov	r0, r7
 3870 0072 FFF7FEFF 		bl	_WriteBlocking
 3871              	.LVL388:
 3872 0076 0446     		mov	r4, r0
 3873              	.LVL389:
1997:RTT/SEGGER_RTT.c ****       }
 3874              		.loc 1 1997 9 is_stmt 1 view .LVU1157
 3875 0078 1A4B     		ldr	r3, .L259+4
 3876 007a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3877 007c 3846     		mov	r0, r7
 3878              	.LVL390:
1997:RTT/SEGGER_RTT.c ****       }
 3879              		.loc 1 1997 9 is_stmt 0 view .LVU1158
 3880 007e FFF7FEFF 		bl	_PostTerminalSwitch
 3881              	.LVL391:
 3882 0082 E0E7     		b	.L249
 3883              	.LVL392:
 3884              	.L247:
2006:RTT/SEGGER_RTT.c ****         Status = -1;
 3885              		.loc 1 2006 7 is_stmt 1 view .LVU1159
2006:RTT/SEGGER_RTT.c ****         Status = -1;
 3886              		.loc 1 2006 10 is_stmt 0 view .LVU1160
 3887 0084 0328     		cmp	r0, #3
 3888 0086 02D8     		bhi	.L258
2007:RTT/SEGGER_RTT.c ****       } else {
 3889              		.loc 1 2007 16 view .LVU1161
 3890 0088 4FF0FF34 		mov	r4, #-1
 3891 008c DBE7     		b	.L249
 3892              	.L258:
2009:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 3893              		.loc 1 2009 9 is_stmt 1 view .LVU1162
 3894 008e 164F     		ldr	r7, .L259+8
 3895 0090 2146     		mov	r1, r4
 3896 0092 3846     		mov	r0, r7
 3897              	.LVL393:
2009:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 3898              		.loc 1 2009 9 is_stmt 0 view .LVU1163
 3899 0094 FFF7FEFF 		bl	_PostTerminalSwitch
 3900              	.LVL394:
2010:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3901              		.loc 1 2010 9 is_stmt 1 view .LVU1164
2010:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3902              		.loc 1 2010 66 is_stmt 0 view .LVU1165
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 111


 3903 0098 A9F10402 		sub	r2, r9, #4
2010:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3904              		.loc 1 2010 23 view .LVU1166
 3905 009c 4245     		cmp	r2, r8
 3906 009e 28BF     		it	cs
 3907 00a0 4246     		movcs	r2, r8
 3908 00a2 2946     		mov	r1, r5
 3909 00a4 3846     		mov	r0, r7
 3910 00a6 FFF7FEFF 		bl	_WriteBlocking
 3911              	.LVL395:
 3912 00aa 0446     		mov	r4, r0
 3913              	.LVL396:
2011:RTT/SEGGER_RTT.c ****       }
 3914              		.loc 1 2011 9 is_stmt 1 view .LVU1167
 3915 00ac 0D4B     		ldr	r3, .L259+4
 3916 00ae 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3917 00b0 3846     		mov	r0, r7
 3918              	.LVL397:
2011:RTT/SEGGER_RTT.c ****       }
 3919              		.loc 1 2011 9 is_stmt 0 view .LVU1168
 3920 00b2 FFF7FEFF 		bl	_PostTerminalSwitch
 3921              	.LVL398:
 3922 00b6 C6E7     		b	.L249
 3923              	.LVL399:
 3924              	.L248:
2018:RTT/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 3925              		.loc 1 2018 7 is_stmt 1 view .LVU1169
 3926 00b8 0B4F     		ldr	r7, .L259+8
 3927 00ba 2146     		mov	r1, r4
 3928 00bc 3846     		mov	r0, r7
 3929              	.LVL400:
2018:RTT/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 3930              		.loc 1 2018 7 is_stmt 0 view .LVU1170
 3931 00be FFF7FEFF 		bl	_PostTerminalSwitch
 3932              	.LVL401:
2019:RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 3933              		.loc 1 2019 7 is_stmt 1 view .LVU1171
2019:RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 3934              		.loc 1 2019 21 is_stmt 0 view .LVU1172
 3935 00c2 4246     		mov	r2, r8
 3936 00c4 2946     		mov	r1, r5
 3937 00c6 3846     		mov	r0, r7
 3938 00c8 FFF7FEFF 		bl	_WriteBlocking
 3939              	.LVL402:
 3940 00cc 0446     		mov	r4, r0
 3941              	.LVL403:
2020:RTT/SEGGER_RTT.c ****       break;
 3942              		.loc 1 2020 7 is_stmt 1 view .LVU1173
 3943 00ce 054B     		ldr	r3, .L259+4
 3944 00d0 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3945 00d2 3846     		mov	r0, r7
 3946              	.LVL404:
2020:RTT/SEGGER_RTT.c ****       break;
 3947              		.loc 1 2020 7 is_stmt 0 view .LVU1174
 3948 00d4 FFF7FEFF 		bl	_PostTerminalSwitch
 3949              	.LVL405:
2021:RTT/SEGGER_RTT.c ****     default:
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 112


 3950              		.loc 1 2021 7 is_stmt 1 view .LVU1175
 3951 00d8 B5E7     		b	.L249
 3952              	.LVL406:
 3953              	.L250:
2021:RTT/SEGGER_RTT.c ****     default:
 3954              		.loc 1 2021 7 is_stmt 0 view .LVU1176
 3955              	.LBE59:
2031:RTT/SEGGER_RTT.c ****   }
 3956              		.loc 1 2031 12 view .LVU1177
 3957 00da 4FF0FF34 		mov	r4, #-1
 3958              	.LVL407:
2033:RTT/SEGGER_RTT.c **** }
 3959              		.loc 1 2033 3 is_stmt 1 view .LVU1178
2033:RTT/SEGGER_RTT.c **** }
 3960              		.loc 1 2033 10 is_stmt 0 view .LVU1179
 3961 00de B4E7     		b	.L244
 3962              	.L260:
 3963              		.align	2
 3964              	.L259:
 3965 00e0 00000000 		.word	.LANCHOR1
 3966 00e4 00000000 		.word	.LANCHOR5
 3967 00e8 18000000 		.word	.LANCHOR1+24
 3968              		.cfi_endproc
 3969              	.LFE33:
 3971              		.section	.text.SEGGER_RTT_GetAvailWriteSpace,"ax",%progbits
 3972              		.align	1
 3973              		.global	SEGGER_RTT_GetAvailWriteSpace
 3974              		.syntax unified
 3975              		.thumb
 3976              		.thumb_func
 3978              	SEGGER_RTT_GetAvailWriteSpace:
 3979              	.LVL408:
 3980              	.LFB34:
2035:RTT/SEGGER_RTT.c **** 
2036:RTT/SEGGER_RTT.c **** /*********************************************************************
2037:RTT/SEGGER_RTT.c **** *
2038:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_GetAvailWriteSpace
2039:RTT/SEGGER_RTT.c **** *
2040:RTT/SEGGER_RTT.c **** *  Function description
2041:RTT/SEGGER_RTT.c **** *    Returns the number of bytes available in the ring buffer.
2042:RTT/SEGGER_RTT.c **** *
2043:RTT/SEGGER_RTT.c **** *  Parameters
2044:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
2045:RTT/SEGGER_RTT.c **** *
2046:RTT/SEGGER_RTT.c **** *  Return value
2047:RTT/SEGGER_RTT.c **** *    Number of bytes that are free in the selected up buffer.
2048:RTT/SEGGER_RTT.c **** */
2049:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetAvailWriteSpace (unsigned BufferIndex) {
 3981              		.loc 1 2049 63 is_stmt 1 view -0
 3982              		.cfi_startproc
 3983              		@ args = 0, pretend = 0, frame = 0
 3984              		@ frame_needed = 0, uses_anonymous_args = 0
 3985              		.loc 1 2049 63 is_stmt 0 view .LVU1181
 3986 0000 08B5     		push	{r3, lr}
 3987              	.LCFI41:
 3988              		.cfi_def_cfa_offset 8
 3989              		.cfi_offset 3, -8
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 113


 3990              		.cfi_offset 14, -4
2050:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 3991              		.loc 1 2050 3 is_stmt 1 view .LVU1182
2051:RTT/SEGGER_RTT.c **** 
2052:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 3992              		.loc 1 2052 3 view .LVU1183
 3993              		.loc 1 2052 9 is_stmt 0 view .LVU1184
 3994 0002 0130     		adds	r0, r0, #1
 3995              	.LVL409:
 3996              		.loc 1 2052 9 view .LVU1185
 3997 0004 00EB4000 		add	r0, r0, r0, lsl #1
 3998              	.LVL410:
2053:RTT/SEGGER_RTT.c ****   return _GetAvailWriteSpace(pRing);
 3999              		.loc 1 2053 3 is_stmt 1 view .LVU1186
 4000              		.loc 1 2053 10 is_stmt 0 view .LVU1187
 4001 0008 024B     		ldr	r3, .L263
 4002 000a 03EBC000 		add	r0, r3, r0, lsl #3
 4003              	.LVL411:
 4004              		.loc 1 2053 10 view .LVU1188
 4005 000e FFF7FEFF 		bl	_GetAvailWriteSpace
 4006              	.LVL412:
2054:RTT/SEGGER_RTT.c **** }
 4007              		.loc 1 2054 1 view .LVU1189
 4008 0012 08BD     		pop	{r3, pc}
 4009              	.L264:
 4010              		.align	2
 4011              	.L263:
 4012 0014 00000000 		.word	.LANCHOR1
 4013              		.cfi_endproc
 4014              	.LFE34:
 4016              		.section	.text.SEGGER_RTT_GetBytesInBuffer,"ax",%progbits
 4017              		.align	1
 4018              		.global	SEGGER_RTT_GetBytesInBuffer
 4019              		.syntax unified
 4020              		.thumb
 4021              		.thumb_func
 4023              	SEGGER_RTT_GetBytesInBuffer:
 4024              	.LVL413:
 4025              	.LFB35:
2055:RTT/SEGGER_RTT.c **** 
2056:RTT/SEGGER_RTT.c **** 
2057:RTT/SEGGER_RTT.c **** /*********************************************************************
2058:RTT/SEGGER_RTT.c **** *
2059:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_GetBytesInBuffer()
2060:RTT/SEGGER_RTT.c **** *
2061:RTT/SEGGER_RTT.c **** *  Function description
2062:RTT/SEGGER_RTT.c **** *    Returns the number of bytes currently used in the up buffer.
2063:RTT/SEGGER_RTT.c **** *
2064:RTT/SEGGER_RTT.c **** *  Parameters
2065:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
2066:RTT/SEGGER_RTT.c **** *
2067:RTT/SEGGER_RTT.c **** *  Return value
2068:RTT/SEGGER_RTT.c **** *    Number of bytes that are used in the buffer.
2069:RTT/SEGGER_RTT.c **** */
2070:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetBytesInBuffer(unsigned BufferIndex) {
 4026              		.loc 1 2070 60 is_stmt 1 view -0
 4027              		.cfi_startproc
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 114


 4028              		@ args = 0, pretend = 0, frame = 0
 4029              		@ frame_needed = 0, uses_anonymous_args = 0
 4030              		@ link register save eliminated.
2071:RTT/SEGGER_RTT.c ****   unsigned RdOff;
 4031              		.loc 1 2071 3 view .LVU1191
2072:RTT/SEGGER_RTT.c ****   unsigned WrOff;
 4032              		.loc 1 2072 3 view .LVU1192
2073:RTT/SEGGER_RTT.c ****   unsigned r;
 4033              		.loc 1 2073 3 view .LVU1193
2074:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 4034              		.loc 1 2074 3 view .LVU1194
2075:RTT/SEGGER_RTT.c ****   //
2076:RTT/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
2077:RTT/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
2078:RTT/SEGGER_RTT.c ****   //
2079:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 4035              		.loc 1 2079 3 view .LVU1195
2080:RTT/SEGGER_RTT.c ****   RdOff = pRTTCB->aUp[BufferIndex].RdOff;
 4036              		.loc 1 2080 3 view .LVU1196
 4037              		.loc 1 2080 9 is_stmt 0 view .LVU1197
 4038 0000 00EB4002 		add	r2, r0, r0, lsl #1
 4039 0004 084B     		ldr	r3, .L268
 4040 0006 03EBC203 		add	r3, r3, r2, lsl #3
 4041 000a 9A6A     		ldr	r2, [r3, #40]
 4042              	.LVL414:
2081:RTT/SEGGER_RTT.c ****   WrOff = pRTTCB->aUp[BufferIndex].WrOff;
 4043              		.loc 1 2081 3 is_stmt 1 view .LVU1198
 4044              		.loc 1 2081 9 is_stmt 0 view .LVU1199
 4045 000c 5B6A     		ldr	r3, [r3, #36]
 4046              	.LVL415:
2082:RTT/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 4047              		.loc 1 2082 3 is_stmt 1 view .LVU1200
 4048              		.loc 1 2082 6 is_stmt 0 view .LVU1201
 4049 000e 9A42     		cmp	r2, r3
 4050 0010 01D8     		bhi	.L266
2083:RTT/SEGGER_RTT.c ****     r = WrOff - RdOff;
 4051              		.loc 1 2083 5 is_stmt 1 view .LVU1202
 4052              		.loc 1 2083 7 is_stmt 0 view .LVU1203
 4053 0012 981A     		subs	r0, r3, r2
 4054              	.LVL416:
 4055              		.loc 1 2083 7 view .LVU1204
 4056 0014 7047     		bx	lr
 4057              	.LVL417:
 4058              	.L266:
2084:RTT/SEGGER_RTT.c ****   } else {
2085:RTT/SEGGER_RTT.c ****     r = pRTTCB->aUp[BufferIndex].SizeOfBuffer - (WrOff - RdOff);
 4059              		.loc 1 2085 5 is_stmt 1 view .LVU1205
 4060              		.loc 1 2085 33 is_stmt 0 view .LVU1206
 4061 0016 00EB4000 		add	r0, r0, r0, lsl #1
 4062              	.LVL418:
 4063              		.loc 1 2085 33 view .LVU1207
 4064 001a 0349     		ldr	r1, .L268
 4065 001c 01EBC000 		add	r0, r1, r0, lsl #3
 4066 0020 006A     		ldr	r0, [r0, #32]
 4067              		.loc 1 2085 47 view .LVU1208
 4068 0022 D21A     		subs	r2, r2, r3
 4069              	.LVL419:
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 115


 4070              		.loc 1 2085 7 view .LVU1209
 4071 0024 1044     		add	r0, r0, r2
 4072              	.LVL420:
2086:RTT/SEGGER_RTT.c ****   }
2087:RTT/SEGGER_RTT.c ****   return r;
 4073              		.loc 1 2087 3 is_stmt 1 view .LVU1210
2088:RTT/SEGGER_RTT.c **** }
 4074              		.loc 1 2088 1 is_stmt 0 view .LVU1211
 4075 0026 7047     		bx	lr
 4076              	.L269:
 4077              		.align	2
 4078              	.L268:
 4079 0028 00000000 		.word	.LANCHOR1
 4080              		.cfi_endproc
 4081              	.LFE35:
 4083              		.global	_SEGGER_RTT
 4084              		.section	.bss._ActiveTerminal,"aw",%nobits
 4085              		.set	.LANCHOR5,. + 0
 4088              	_ActiveTerminal:
 4089 0000 00       		.space	1
 4090              		.section	.bss._SEGGER_RTT,"aw",%nobits
 4091              		.align	2
 4092              		.set	.LANCHOR1,. + 0
 4095              	_SEGGER_RTT:
 4096 0000 00000000 		.space	168
 4096      00000000 
 4096      00000000 
 4096      00000000 
 4096      00000000 
 4097              		.section	.bss._acDownBuffer,"aw",%nobits
 4098              		.align	2
 4099              		.set	.LANCHOR3,. + 0
 4102              	_acDownBuffer:
 4103 0000 00000000 		.space	16
 4103      00000000 
 4103      00000000 
 4103      00000000 
 4104              		.section	.bss._acUpBuffer,"aw",%nobits
 4105              		.align	2
 4106              		.set	.LANCHOR2,. + 0
 4109              	_acUpBuffer:
 4110 0000 00000000 		.space	1024
 4110      00000000 
 4110      00000000 
 4110      00000000 
 4110      00000000 
 4111              		.section	.rodata._aInitStr.0,"a"
 4112              		.align	2
 4113              		.set	.LANCHOR4,. + 0
 4116              	_aInitStr.0:
 4117 0000 00000000 		.ascii	"\000\000\000\000\000\000TTR REGGES\000"
 4117      00005454 
 4117      52205245 
 4117      47474553 
 4117      00
 4118              		.section	.rodata._aTerminalId,"a"
 4119              		.align	2
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 116


 4120              		.set	.LANCHOR0,. + 0
 4123              	_aTerminalId:
 4124 0000 30313233 		.ascii	"0123456789ABCDEF"
 4124      34353637 
 4124      38394142 
 4124      43444546 
 4125              		.text
 4126              	.Letext0:
 4127              		.file 2 "RTT/SEGGER_RTT.h"
 4128              		.file 3 "<built-in>"
 4129              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 117


DEFINED SYMBOLS
                            *ABS*:00000000 SEGGER_RTT.c
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:18     .text._GetAvailWriteSpace:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:23     .text._GetAvailWriteSpace:00000000 _GetAvailWriteSpace
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:77     .text._WriteNoCheck:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:82     .text._WriteNoCheck:00000000 _WriteNoCheck
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:182    .text._WriteBlocking:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:187    .text._WriteBlocking:00000000 _WriteBlocking
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:333    .text._PostTerminalSwitch:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:338    .text._PostTerminalSwitch:00000000 _PostTerminalSwitch
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:380    .text._PostTerminalSwitch:00000020 $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:385    .rodata._DoInit.str1.4:00000000 $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:389    .text._DoInit:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:394    .text._DoInit:00000000 _DoInit
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:495    .text._DoInit:00000050 $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:504    .text.SEGGER_RTT_ReadUpBufferNoLock:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:510    .text.SEGGER_RTT_ReadUpBufferNoLock:00000000 SEGGER_RTT_ReadUpBufferNoLock
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:705    .text.SEGGER_RTT_ReadUpBufferNoLock:000000a8 $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:710    .text.SEGGER_RTT_ReadNoLock:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:716    .text.SEGGER_RTT_ReadNoLock:00000000 SEGGER_RTT_ReadNoLock
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:906    .text.SEGGER_RTT_ReadNoLock:0000009c $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:911    .text.SEGGER_RTT_ReadUpBuffer:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:917    .text.SEGGER_RTT_ReadUpBuffer:00000000 SEGGER_RTT_ReadUpBuffer
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:969    .text.SEGGER_RTT_Read:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:975    .text.SEGGER_RTT_Read:00000000 SEGGER_RTT_Read
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:1027   .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:1033   .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000 SEGGER_RTT_WriteWithOverwriteNoLock
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:1272   .text.SEGGER_RTT_WriteWithOverwriteNoLock:0000010c $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:1277   .text.SEGGER_RTT_WriteDownBufferNoLock:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:1283   .text.SEGGER_RTT_WriteDownBufferNoLock:00000000 SEGGER_RTT_WriteDownBufferNoLock
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:1397   .text.SEGGER_RTT_WriteDownBufferNoLock:00000060 $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:1402   .text.SEGGER_RTT_WriteNoLock:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:1408   .text.SEGGER_RTT_WriteNoLock:00000000 SEGGER_RTT_WriteNoLock
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:1523   .text.SEGGER_RTT_WriteNoLock:00000068 $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:1528   .text.SEGGER_RTT_WriteDownBuffer:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:1534   .text.SEGGER_RTT_WriteDownBuffer:00000000 SEGGER_RTT_WriteDownBuffer
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:1614   .text.SEGGER_RTT_WriteDownBuffer:00000030 $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:1620   .text.SEGGER_RTT_Write:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:1626   .text.SEGGER_RTT_Write:00000000 SEGGER_RTT_Write
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:1706   .text.SEGGER_RTT_Write:00000030 $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:1712   .text.SEGGER_RTT_WriteString:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:1718   .text.SEGGER_RTT_WriteString:00000000 SEGGER_RTT_WriteString
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:1761   .text.SEGGER_RTT_PutCharSkipNoLock:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:1767   .text.SEGGER_RTT_PutCharSkipNoLock:00000000 SEGGER_RTT_PutCharSkipNoLock
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:1865   .text.SEGGER_RTT_PutCharSkipNoLock:0000004c $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:1870   .text.SEGGER_RTT_PutCharSkip:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:1876   .text.SEGGER_RTT_PutCharSkip:00000000 SEGGER_RTT_PutCharSkip
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2015   .text.SEGGER_RTT_PutCharSkip:0000006c $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2021   .text.SEGGER_RTT_PutChar:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2027   .text.SEGGER_RTT_PutChar:00000000 SEGGER_RTT_PutChar
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2190   .text.SEGGER_RTT_PutChar:0000008c $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2196   .text.SEGGER_RTT_GetKey:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2202   .text.SEGGER_RTT_GetKey:00000000 SEGGER_RTT_GetKey
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2254   .text.SEGGER_RTT_WaitKey:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2260   .text.SEGGER_RTT_WaitKey:00000000 SEGGER_RTT_WaitKey
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2290   .text.SEGGER_RTT_HasKey:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2296   .text.SEGGER_RTT_HasKey:00000000 SEGGER_RTT_HasKey
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 118


C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2361   .text.SEGGER_RTT_HasKey:00000020 $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2366   .text.SEGGER_RTT_HasData:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2372   .text.SEGGER_RTT_HasData:00000000 SEGGER_RTT_HasData
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2403   .text.SEGGER_RTT_HasData:0000001c $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2408   .text.SEGGER_RTT_HasDataUp:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2414   .text.SEGGER_RTT_HasDataUp:00000000 SEGGER_RTT_HasDataUp
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2445   .text.SEGGER_RTT_HasDataUp:0000001c $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2450   .text.SEGGER_RTT_AllocDownBuffer:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2456   .text.SEGGER_RTT_AllocDownBuffer:00000000 SEGGER_RTT_AllocDownBuffer
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2601   .text.SEGGER_RTT_AllocDownBuffer:00000070 $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2607   .text.SEGGER_RTT_AllocUpBuffer:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2613   .text.SEGGER_RTT_AllocUpBuffer:00000000 SEGGER_RTT_AllocUpBuffer
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2766   .text.SEGGER_RTT_AllocUpBuffer:00000084 $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2772   .text.SEGGER_RTT_ConfigUpBuffer:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2778   .text.SEGGER_RTT_ConfigUpBuffer:00000000 SEGGER_RTT_ConfigUpBuffer
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2914   .text.SEGGER_RTT_ConfigUpBuffer:00000070 $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2919   .text.SEGGER_RTT_ConfigDownBuffer:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:2925   .text.SEGGER_RTT_ConfigDownBuffer:00000000 SEGGER_RTT_ConfigDownBuffer
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:3057   .text.SEGGER_RTT_ConfigDownBuffer:00000060 $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:3062   .text.SEGGER_RTT_SetNameUpBuffer:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:3068   .text.SEGGER_RTT_SetNameUpBuffer:00000000 SEGGER_RTT_SetNameUpBuffer
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:3172   .text.SEGGER_RTT_SetNameUpBuffer:0000003c $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:3177   .text.SEGGER_RTT_SetNameDownBuffer:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:3183   .text.SEGGER_RTT_SetNameDownBuffer:00000000 SEGGER_RTT_SetNameDownBuffer
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:3284   .text.SEGGER_RTT_SetNameDownBuffer:0000003c $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:3289   .text.SEGGER_RTT_SetFlagsUpBuffer:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:3295   .text.SEGGER_RTT_SetFlagsUpBuffer:00000000 SEGGER_RTT_SetFlagsUpBuffer
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:3396   .text.SEGGER_RTT_SetFlagsUpBuffer:0000003c $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:3401   .text.SEGGER_RTT_SetFlagsDownBuffer:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:3407   .text.SEGGER_RTT_SetFlagsDownBuffer:00000000 SEGGER_RTT_SetFlagsDownBuffer
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:3508   .text.SEGGER_RTT_SetFlagsDownBuffer:0000003c $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:3513   .text.SEGGER_RTT_Init:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:3519   .text.SEGGER_RTT_Init:00000000 SEGGER_RTT_Init
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:3539   .text.SEGGER_RTT_SetTerminal:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:3545   .text.SEGGER_RTT_SetTerminal:00000000 SEGGER_RTT_SetTerminal
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:3715   .text.SEGGER_RTT_SetTerminal:0000007c $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:3723   .text.SEGGER_RTT_TerminalOut:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:3729   .text.SEGGER_RTT_TerminalOut:00000000 SEGGER_RTT_TerminalOut
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:3965   .text.SEGGER_RTT_TerminalOut:000000e0 $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:3972   .text.SEGGER_RTT_GetAvailWriteSpace:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:3978   .text.SEGGER_RTT_GetAvailWriteSpace:00000000 SEGGER_RTT_GetAvailWriteSpace
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:4012   .text.SEGGER_RTT_GetAvailWriteSpace:00000014 $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:4017   .text.SEGGER_RTT_GetBytesInBuffer:00000000 $t
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:4023   .text.SEGGER_RTT_GetBytesInBuffer:00000000 SEGGER_RTT_GetBytesInBuffer
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:4079   .text.SEGGER_RTT_GetBytesInBuffer:00000028 $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:4095   .bss._SEGGER_RTT:00000000 _SEGGER_RTT
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:4088   .bss._ActiveTerminal:00000000 _ActiveTerminal
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:4089   .bss._ActiveTerminal:00000000 $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:4091   .bss._SEGGER_RTT:00000000 $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:4098   .bss._acDownBuffer:00000000 $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:4102   .bss._acDownBuffer:00000000 _acDownBuffer
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:4105   .bss._acUpBuffer:00000000 $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:4109   .bss._acUpBuffer:00000000 _acUpBuffer
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:4112   .rodata._aInitStr.0:00000000 $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:4116   .rodata._aInitStr.0:00000000 _aInitStr.0
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:4119   .rodata._aTerminalId:00000000 $d
C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s:4123   .rodata._aTerminalId:00000000 _aTerminalId
ARM GAS  C:\Users\11655\AppData\Local\Temp\ccZD0YsZ.s 			page 119



UNDEFINED SYMBOLS
memcpy
memset
strlen
